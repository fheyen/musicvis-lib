{
  "version": 3,
  "sources": ["../node_modules/.pnpm/midi-parser-js@4.0.4/node_modules/midi-parser-js/src/main.js", "../src/fileFormats/Midi.js", "../src/types/Note.js", "../src/types/GuitarNote.js", "../src/types/HarmonicaNote.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/ascending.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/bisector.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/number.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/bisect.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/variance.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/deviation.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/extent.js", "../node_modules/.pnpm/internmap@1.0.1/node_modules/internmap/src/index.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/identity.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/group.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/ticks.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/max.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/min.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/quickselect.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/quantile.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/mean.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/median.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/minIndex.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/difference.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/set.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/intersection.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/union.js", "../node_modules/.pnpm/d3-dispatch@2.0.0/node_modules/d3-dispatch/src/dispatch.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/namespaces.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/namespace.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/creator.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selector.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/select.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/array.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selectorAll.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/selectAll.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/matcher.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/selectChild.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/selectChildren.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/filter.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/sparse.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/enter.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/constant.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/data.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/exit.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/join.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/merge.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/order.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/sort.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/call.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/nodes.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/node.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/size.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/empty.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/each.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/attr.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/window.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/style.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/property.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/classed.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/text.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/html.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/raise.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/lower.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/append.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/insert.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/remove.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/clone.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/datum.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/on.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/dispatch.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/iterator.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/index.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/define.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/color.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/math.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/cubehelix.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/basis.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/basisClosed.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/constant.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/color.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/rgb.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/numberArray.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/array.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/date.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/number.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/object.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/string.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/value.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/round.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/transform/decompose.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/transform/parse.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/transform/index.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/cubehelix.js", "../node_modules/.pnpm/d3-timer@2.0.0/node_modules/d3-timer/src/timer.js", "../node_modules/.pnpm/d3-timer@2.0.0/node_modules/d3-timer/src/timeout.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/schedule.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/interrupt.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/selection/interrupt.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/tween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/interpolate.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/attr.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/attrTween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/delay.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/duration.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/ease.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/easeVarying.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/filter.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/merge.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/on.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/remove.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/select.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/selectAll.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/selection.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/style.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/styleTween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/text.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/textTween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/transition.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/end.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/index.js", "../node_modules/.pnpm/d3-ease@2.0.0/node_modules/d3-ease/src/cubic.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/selection/transition.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/selection/index.js", "../node_modules/.pnpm/d3-brush@2.1.0/node_modules/d3-brush/src/brush.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatDecimal.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/exponent.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatGroup.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatNumerals.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatSpecifier.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatTrim.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatPrefixAuto.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatRounded.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatTypes.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/identity.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/locale.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/defaultLocale.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/precisionFixed.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/precisionPrefix.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/precisionRound.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/defaultSource.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/uniform.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/int.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/normal.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/lcg.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/init.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/constant.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/number.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/continuous.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/tickFormat.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/linear.js", "../node_modules/.pnpm/d3-scale-chromatic@2.0.0/node_modules/d3-scale-chromatic/src/colors.js", "../node_modules/.pnpm/d3-scale-chromatic@2.0.0/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js", "../node_modules/.pnpm/d3-scale-chromatic@2.0.0/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js", "../node_modules/.pnpm/d3-zoom@2.0.0/node_modules/d3-zoom/src/transform.js", "../src/utils/MathUtils.js", "../src/types/NoteArray.js", "../src/utils/ArrayUtils.js", "../src/types/Recording.js", "../src/types/MusicPiece.js", "../src/fileFormats/MusicXmlParser.js", "../src/utils/MusicUtils.js", "../src/fileFormats/MidiParser.js", "../src/types/PitchSequence.js", "../src/graphics/Canvas.js", "../src/input/AudioRecorder.js", "../src/input/MidiRecorder.js", "../src/input/MidiInputManager.js", "../src/instruments/Drums.js", "../src/instruments/Guitar.js", "../src/instruments/Lamellophone.js", "../src/chords/Chords.js", "../node_modules/.pnpm/@tonaljs+core@4.6.5/node_modules/@tonaljs/core/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+collection@4.6.2/node_modules/@tonaljs/collection/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+pcset@4.6.5/node_modules/@tonaljs/pcset/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+chord-type@4.6.5/node_modules/@tonaljs/chord-type/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+chord-detect@4.6.5/node_modules/@tonaljs/chord-detect/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+scale-type@4.6.5/node_modules/@tonaljs/scale-type/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+chord@4.6.5/node_modules/@tonaljs/chord/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+duration-value@4.6.2/node_modules/@tonaljs/duration-value/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+interval@4.6.5/node_modules/@tonaljs/interval/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+midi@4.6.5/node_modules/@tonaljs/midi/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+roman-numeral@4.6.5/node_modules/@tonaljs/roman-numeral/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+key@4.6.5/node_modules/@tonaljs/key/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+mode@4.6.5/node_modules/@tonaljs/mode/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+scale@4.6.5/node_modules/@tonaljs/scale/dist/index.es.js", "../src/instruments/Piano.js", "../src/alignment/Alignment.js", "../src/comparison/Matching.js", "../src/utils/index.js", "../src/utils/BlobUtils.js", "../src/utils/ColorUtils.js", "../src/utils/FormattingUtils.js", "../src/utils/LocalStorageUtils.js", "../src/utils/MiscUtils.js", "../src/utils/NoteColorUtils.js", "../src/utils/StatisticsUtils.js", "../src/utils/RecordingsUtils.js", "../src/utils/WebMidiUtils.js", "../src/alignment/DiffAlignment.js", "../src/comparison/PriorityMatching.js", "../src/comparison/Similarity.js", "../src/comparison/SimilarSections.js", "../src/stringBased/Levenshtein.js", "../src/stringBased/index.js", "../src/stringBased/LongestCommonSubsequence.js", "../src/stringBased/Gotoh.js", "../src/stringBased/SuffixTree.js", "../src/stringBased/NGrams.js", "../src/stringBased/ImmediateRepetitionCompression.js", "../src/stringBased/NeedlemanWunsch.js", "../src/index.js"],
  "sourcesContent": ["/*\n    Project Name : midi-parser-js\n    Project Url  : https://github.com/colxi/midi-parser-js/\n    Author       : colxi\n    Author URL   : http://www.colxi.info/\n    Description  : MidiParser library reads .MID binary files, Base64 encoded MIDI Data,\n    or UInt8 Arrays, and outputs as a readable and structured JS object.\n*/\n\n(function(){\n    'use strict';\n\n    /**\n     * CROSSBROWSER & NODEjs POLYFILL for ATOB() -\n     * By: https://github.com/MaxArt2501 (modified)\n     * @param  {string} string [description]\n     * @return {[type]}        [description]\n     */\n    const _atob = function(string) {\n        // base64 character set, plus padding character (=)\n        let b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        // Regular expression to check formal correctness of base64 encoded strings\n        let b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n        // remove data type signatures at the begining of the string\n        // eg :  \"data:audio/mid;base64,\"\n        string = string.replace( /^.*?base64,/ , '');\n        // atob can work with strings with whitespaces, even inside the encoded part,\n        // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n        string = String(string).replace(/[\\t\\n\\f\\r ]+/g, '');\n        if (!b64re.test(string))\n            throw new TypeError('Failed to execute _atob() : The string to be decoded is not correctly encoded.');\n\n        // Adding the padding if missing, for semplicity\n        string += '=='.slice(2 - (string.length & 3));\n        let bitmap, result = '';\n        let r1, r2, i = 0;\n        for (; i < string.length;) {\n            bitmap = b64.indexOf(string.charAt(i++)) << 18 | b64.indexOf(string.charAt(i++)) << 12\n                    | (r1 = b64.indexOf(string.charAt(i++))) << 6 | (r2 = b64.indexOf(string.charAt(i++)));\n\n            result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255)\n                    : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255)\n                    : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);\n        }\n        return result;\n    };\n\n\n    /**\n     * [MidiParser description]\n     * @type {Object}\n     */\n    const MidiParser  = {\n        // debug (bool), when enabled will log in console unimplemented events\n        // warnings and internal handled errors.\n        debug: false,\n\n        /**\n         * [parse description]\n         * @param  {[type]} input     [description]\n         * @param  {[type]} _callback [description]\n         * @return {[type]}           [description]\n         */\n        parse: function(input, _callback){\n            if(input instanceof Uint8Array) return MidiParser.Uint8(input);\n            else if(typeof input === 'string') return MidiParser.Base64(input);\n            else if(input instanceof HTMLElement && input.type === 'file') return MidiParser.addListener(input , _callback);\n            else throw new Error('MidiParser.parse() : Invalid input provided');\n        },\n\n        /**\n         * addListener() should be called in order attach a listener to the INPUT HTML element\n         * that will provide the binary data automating the conversion, and returning\n         * the structured data to the provided callback function.\n         */\n        addListener: function(_fileElement, _callback){\n            if(!File || !FileReader) throw new Error('The File|FileReader APIs are not supported in this browser. Use instead MidiParser.Base64() or MidiParser.Uint8()');\n\n            // validate provided element\n            if( _fileElement === undefined ||\n                !(_fileElement instanceof HTMLElement) ||\n                _fileElement.tagName !== 'INPUT' ||\n                _fileElement.type.toLowerCase() !== 'file' \n            ){\n                console.warn('MidiParser.addListener() : Provided element is not a valid FILE INPUT element');\n                return false;\n            }\n            _callback = _callback || function(){};\n\n            _fileElement.addEventListener('change', function(InputEvt){             // set the 'file selected' event handler\n                if (!InputEvt.target.files.length) return false;                    // return false if no elements where selected\n                console.log('MidiParser.addListener() : File detected in INPUT ELEMENT processing data..');\n                let reader = new FileReader();                                      // prepare the file Reader\n                reader.readAsArrayBuffer(InputEvt.target.files[0]);                 // read the binary data\n                reader.onload =  function(e){\n                    _callback( MidiParser.Uint8(new Uint8Array(e.target.result)));  // encode data with Uint8Array and call the parser\n                };\n            });\n        },\n\n        /**\n         * Base64() : convert baset4 string into uint8 array buffer, before performing the\n         * parsing subroutine.\n         */\n        Base64 : function(b64String){\n            b64String = String(b64String);\n\n            let raw = _atob(b64String);\n            let rawLength = raw.length;\n            let t_array = new Uint8Array(new ArrayBuffer(rawLength));\n\n            for(let i=0; i<rawLength; i++) t_array[i] = raw.charCodeAt(i);\n            return  MidiParser.Uint8(t_array) ;\n        },\n\n        /**\n         * parse() : function reads the binary data, interpreting and spliting each chuck\n         * and parsing it to a structured Object. When job is finised returns the object\n         * or 'false' if any error was generated.\n         */\n        Uint8: function(FileAsUint8Array){\n            let file = {\n                data: null,\n                pointer: 0,\n                movePointer: function(_bytes){                                      // move the pointer negative and positive direction\n                    this.pointer += _bytes;\n                    return this.pointer;\n                },\n                readInt: function(_bytes){                                          // get integer from next _bytes group (big-endian)\n                    _bytes = Math.min(_bytes, this.data.byteLength-this.pointer);\n                    if (_bytes < 1) return -1;                                                                      // EOF\n                    let value = 0;\n                    if(_bytes > 1){\n                        for(let i=1; i<= (_bytes-1); i++){\n                            value += this.data.getUint8(this.pointer) * Math.pow(256, (_bytes - i));\n                            this.pointer++;\n                        }\n                    }\n                    value += this.data.getUint8(this.pointer);\n                    this.pointer++;\n                    return value;\n                },\n                readStr: function(_bytes){                                          // read as ASCII chars, the followoing _bytes\n                    let text = '';\n                    for(let char=1; char <= _bytes; char++) text +=  String.fromCharCode(this.readInt(1));\n                    return text;\n                },\n                readIntVLV: function(){                                             // read a variable length value\n                    let value = 0;\n                    if ( this.pointer >= this.data.byteLength ){\n                        return -1;                                                  // EOF\n                    }else if(this.data.getUint8(this.pointer) < 128){               // ...value in a single byte\n                        value = this.readInt(1);\n                    }else{                                                          // ...value in multiple bytes\n                        let FirstBytes = [];\n                        while(this.data.getUint8(this.pointer) >= 128){\n                            FirstBytes.push(this.readInt(1) - 128);\n                        }\n                        let lastByte  = this.readInt(1);\n                        for(let dt = 1; dt <= FirstBytes.length; dt++){\n                            value += FirstBytes[FirstBytes.length - dt] * Math.pow(128, dt);\n                        }\n                        value += lastByte;\n                    }\n                    return value;\n                }\n            };\n\n            file.data = new DataView(FileAsUint8Array.buffer, FileAsUint8Array.byteOffset, FileAsUint8Array.byteLength);                                            // 8 bits bytes file data array\n            //  ** read FILE HEADER\n            if(file.readInt(4) !== 0x4D546864){\n                console.warn('Header validation failed (not MIDI standard or file corrupt.)');\n                return false;                                                       // Header validation failed (not MIDI standard or file corrupt.)\n            }\n            let headerSize          = file.readInt(4);                              // header size (unused var), getted just for read pointer movement\n            let MIDI                = {};                                           // create new midi object\n            MIDI.formatType         = file.readInt(2);                              // get MIDI Format Type\n            MIDI.tracks             = file.readInt(2);                              // get ammount of track chunks\n            MIDI.track              = [];                                           // create array key for track data storing\n            let timeDivisionByte1   = file.readInt(1);                              // get Time Division first byte\n            let timeDivisionByte2   = file.readInt(1);                              // get Time Division second byte\n            if(timeDivisionByte1 >= 128){                                           // discover Time Division mode (fps or tpf)\n                MIDI.timeDivision    = [];\n                MIDI.timeDivision[0] = timeDivisionByte1 - 128;                     // frames per second MODE  (1st byte)\n                MIDI.timeDivision[1] = timeDivisionByte2;                           // ticks in each frame     (2nd byte)\n            }else MIDI.timeDivision  = (timeDivisionByte1 * 256) + timeDivisionByte2;// else... ticks per beat MODE  (2 bytes value)\n\n            //  ** read TRACK CHUNK\n            for(let t=1; t <= MIDI.tracks; t++){\n                MIDI.track[t-1]     = {event: []};                                  // create new Track entry in Array\n                let headerValidation = file.readInt(4);\n                if ( headerValidation === -1 ) break;                               // EOF\n                if(headerValidation !== 0x4D54726B) return false;                   // Track chunk header validation failed.\n                file.readInt(4);                                                    // move pointer. get chunk size (bytes length)\n                let e               = 0;                                            // init event counter\n                let endOfTrack      = false;                                        // FLAG for track reading secuence breaking\n                // ** read EVENT CHUNK\n                let statusByte;\n                let laststatusByte;\n                while(!endOfTrack){\n                    e++;                                                            // increase by 1 event counter\n                    MIDI.track[t-1].event[e-1] = {};                                // create new event object, in events array\n                    MIDI.track[t-1].event[e-1].deltaTime  = file.readIntVLV();      // get DELTA TIME OF MIDI event (Variable Length Value)\n                    statusByte = file.readInt(1);                                   // read EVENT TYPE (STATUS BYTE)\n                    if(statusByte === -1) break;                                    // EOF\n                    else if(statusByte >= 128) laststatusByte = statusByte;         // NEW STATUS BYTE DETECTED\n                    else{                                                           // 'RUNNING STATUS' situation detected\n                        statusByte = laststatusByte;                                // apply last loop, Status Byte\n                        file.movePointer(-1);                                       // move back the pointer (cause readed byte is not status byte)\n                    }\n\n\n                    //\n                    // ** IS META EVENT\n                    //\n                    if(statusByte === 0xFF){                                        // Meta Event type\n                        MIDI.track[t-1].event[e-1].type = 0xFF;                     // assign metaEvent code to array\n                        MIDI.track[t-1].event[e-1].metaType =  file.readInt(1);     // assign metaEvent subtype\n                        let metaEventLength = file.readIntVLV();                    // get the metaEvent length\n                        switch(MIDI.track[t-1].event[e-1].metaType){\n                            case 0x2F:                                              // end of track, has no data byte\n                            case -1:                                                // EOF\n                                endOfTrack = true;                                  // change FLAG to force track reading loop breaking\n                                break;\n                            case 0x01:                                              // Text Event\n                            case 0x02:                                              // Copyright Notice\n                            case 0x03:\n                            case 0x04:                                              // Instrument Name\n                            case 0x05:                                              // Lyrics)\n                            case 0x07:                                              // Cue point                                         // Sequence/Track Name (documentation: http://www.ta7.de/txt/musik/musi0006.htm)\n                            case 0x06:                                              // Marker\n                                MIDI.track[t-1].event[e-1].data = file.readStr(metaEventLength);\n                                break;\n                            case 0x21:                                              // MIDI PORT\n                            case 0x59:                                              // Key Signature\n                            case 0x51:                                              // Set Tempo\n                                MIDI.track[t-1].event[e-1].data = file.readInt(metaEventLength);\n                                break;\n                            case 0x54:                                              // SMPTE Offset\n                                MIDI.track[t-1].event[e-1].data    = [];\n                                MIDI.track[t-1].event[e-1].data[0] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[1] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[2] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[3] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[4] = file.readInt(1);\n                                break;\n                            case 0x58:                                              // Time Signature\n                                MIDI.track[t-1].event[e-1].data    = [];\n                                MIDI.track[t-1].event[e-1].data[0] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[1] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[2] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[3] = file.readInt(1);\n                                break;\n                            default :\n                                // if user provided a custom interpreter, call it\n                                // and assign to event the returned data\n                                if( this.customInterpreter !== null){\n                                    MIDI.track[t-1].event[e-1].data = this.customInterpreter( MIDI.track[t-1].event[e-1].metaType, file, metaEventLength);\n                                }\n                                // if no customInterpretr is provided, or returned\n                                // false (=apply default), perform default action\n                                if(this.customInterpreter === null || MIDI.track[t-1].event[e-1].data === false){\n                                    file.readInt(metaEventLength);\n                                    MIDI.track[t-1].event[e-1].data = file.readInt(metaEventLength);\n                                    if (this.debug) console.info('Unimplemented 0xFF meta event! data block readed as Integer');\n                                }\n                        }\n                    }\n\n                    //\n                    // IS REGULAR EVENT\n                    //\n                    else{                                                           // MIDI Control Events OR System Exclusive Events\n                        statusByte = statusByte.toString(16).split('');             // split the status byte HEX representation, to obtain 4 bits values\n                        if(!statusByte[1]) statusByte.unshift('0');                 // force 2 digits\n                        MIDI.track[t-1].event[e-1].type = parseInt(statusByte[0], 16);// first byte is EVENT TYPE ID\n                        MIDI.track[t-1].event[e-1].channel = parseInt(statusByte[1], 16);// second byte is channel\n                        switch(MIDI.track[t-1].event[e-1].type){\n                            case 0xF:{                                              // System Exclusive Events\n\n                                // if user provided a custom interpreter, call it\n                                // and assign to event the returned data\n                                if( this.customInterpreter !== null){\n                                    MIDI.track[t-1].event[e-1].data = this.customInterpreter( MIDI.track[t-1].event[e-1].type, file , false);\n                                }\n\n                                // if no customInterpretr is provided, or returned\n                                // false (=apply default), perform default action\n                                if(this.customInterpreter === null || MIDI.track[t-1].event[e-1].data === false){\n                                    let event_length = file.readIntVLV();\n                                    MIDI.track[t-1].event[e-1].data = file.readInt(event_length);\n                                    if (this.debug) console.info('Unimplemented 0xF exclusive events! data block readed as Integer');\n                                }\n                                break;\n                            }\n                            case 0xA:                                               // Note Aftertouch\n                            case 0xB:                                               // Controller\n                            case 0xE:                                               // Pitch Bend Event\n                            case 0x8:                                               // Note off\n                            case 0x9:                                               // Note On\n                                MIDI.track[t-1].event[e-1].data = [];\n                                MIDI.track[t-1].event[e-1].data[0] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[1] = file.readInt(1);\n                                break;\n                            case 0xC:                                               // Program Change\n                            case 0xD:                                               // Channel Aftertouch\n                                MIDI.track[t-1].event[e-1].data = file.readInt(1);\n                                break;\n                            case -1:                                                // EOF\n                                endOfTrack = true;                                  // change FLAG to force track reading loop breaking\n                                break;\n                            default:\n                                // if user provided a custom interpreter, call it\n                                // and assign to event the returned data\n                                if( this.customInterpreter !== null){\n                                    MIDI.track[t-1].event[e-1].data = this.customInterpreter( MIDI.track[t-1].event[e-1].metaType, file , false);\n                                }\n\n                                // if no customInterpretr is provided, or returned\n                                // false (=apply default), perform default action\n                                if(this.customInterpreter === null || MIDI.track[t-1].event[e-1].data === false){\n                                    console.log('Unknown EVENT detected... reading cancelled!');\n                                    return false;\n                                }\n                        }\n                    }\n                }\n            }\n            return MIDI;\n        },\n\n        /**\n         * custom function to handle unimplemented, or custom midi messages.\n         * If message is a meta-event, the value of metaEventLength will be >0.\n         * Function must return the value to store, and pointer of dataView needs\n         * to be manually increased\n         * If you want default action to be performed, return false\n         */\n        customInterpreter : null // function( e_type , arrayByffer, metaEventLength){ return e_data_int }\n    };\n\n\n    // if running in NODE export module\n    if(typeof module !== 'undefined') module.exports = MidiParser;\n    else{\n        // if running in Browser, set a global variable.\n        let _global = typeof window === 'object' && window.self === window && window ||\n                    typeof self === 'object' && self.self === self && self ||\n                    typeof global === 'object' && global.global === global && global;\n\n        _global.MidiParser = MidiParser;\n    }\n\n\n    \n})();", "/**\r\n * Lookup for many MIDI specifications.\r\n *\r\n * @module fileFormats/Midi\r\n * @see https://soundprogramming.net/file-formats/\r\n */\r\n\r\n/**\r\n * @typedef {object} MidiNote A MIDI note\r\n * @property {number} pitch the MIDI note number e.g. 60 for C4\r\n * @property {string} name e.g. C#\r\n * @property {number} octave number in [-1, 9]\r\n * @property {string} label name and octave, e.g. C#5\r\n * @property {number} frequency physical frequency\r\n * @example <caption>Example for a MIDI note</caption>\r\n *      { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\n\r\nconst MidiNoteByPitch = new Map()\r\nconst MidiNoteByLabel = new Map()\r\nconst MidiInstrumentByNumber = new Map()\r\nconst MidiInstrumentByNumberLev2 = new Map()\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified number.\r\n *\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {...MidiNote} MIDI note information as a {@link MidiNote}\r\n */\r\nexport function getMidiNoteByNr (nr) {\r\n  return MidiNoteByPitch.get(nr)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified label.\r\n *\r\n * @param {string} label note label, e.g. 'D#0'\r\n *      (upper-case and sharp notation necessary)\r\n * @returns {...MidiNote} MIDI note information as a {@link MidiNote}\r\n */\r\nexport function getMidiNoteByLabel (label) {\r\n  return MidiNoteByLabel.get(label)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified name and octave.\r\n *\r\n * @param {string} name note name, e.g. 'D#'\r\n *      (upper-case and sharp notation necessary)\r\n * @param {number} octave octave in [-1, 9]\r\n * @returns {...MidiNote} MIDI note information as a {@link MidiNote}\r\n */\r\nexport function getMidiNoteByNameAndOctave (name, octave) {\r\n  return MidiNoteByLabel.get(`${name}${octave}`)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument with the specified number.\r\n *\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @returns {object} note info, e.g.\r\n *      { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' }\r\n */\r\nexport function getMidiInstrumentByNr (nr) {\r\n  return MidiInstrumentByNumber.get(nr)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument (MIDI level 2) with the\r\n * specified number.\r\n *\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @param {number} subNr MIDI instrument sub number in [0, 127]\r\n * @returns {object} note info, e.g.\r\n *      { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' }\r\n */\r\nexport function getMidiInstrumentByNrL2 (nr, subNr) {\r\n  const key = `${nr}-${subNr}`\r\n  return MidiInstrumentByNumberLev2.get(key)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument with the specified number.\r\n *\r\n * @param {number} nr MIDI drum note number in [27, 87]\r\n * @returns {string} note name, e.g. 'Bass Drum 1\r\n */\r\nexport function getMidiDrumNoteByNr (nr) {\r\n  return GENERAL_MIDI_DRUM_NOTE_NUMBERS.get(nr)\r\n}\r\n\r\n/**\r\n * Returns true if a given MIDI pitch refers to a sharp note.\r\n *\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {boolean} true if sharp, false otherwise\r\n */\r\nexport function isSharp (nr) {\r\n  // return SHARPS.has(nr);\r\n  const chroma = nr % 12\r\n  return chroma === 1 ||\r\n    chroma === 3 ||\r\n    chroma === 6 ||\r\n    chroma === 8 ||\r\n    chroma === 10\r\n}\r\n\r\n/**\r\n * Returns a note name such as 'C#' (without octave) for a given MIDI\r\n * note number.\r\n *\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {string} note name such as 'C#'\r\n */\r\nexport function getNoteNameFromNoteNr (nr) {\r\n  return NOTE_NAMES[nr % 12]\r\n}\r\n\r\n/**\r\n * Maps flats to sharps, e.g. flatToSharp.get('Db') === 'C#'\r\n *\r\n * @type {Map<string,string>}\r\n */\r\nexport const flatToSharp = new Map([\r\n  ['Cb', 'B'],\r\n  ['Db', 'C#'],\r\n  ['Eb', 'D#'],\r\n  ['Fb', 'E'],\r\n  ['Gb', 'F#'],\r\n  ['Ab', 'G#'],\r\n  ['Bb', 'A#']\r\n])\r\n\r\n/**\r\n * Maps shaprs to flats, e.g. sharpToFlat.get('C#') === 'Db'\r\n *\r\n * @type {Map<string,string>}\r\n */\r\nexport const sharpToFlat = new Map([\r\n  ['C#', 'Db'],\r\n  ['D#', 'Eb'],\r\n  ['E#', 'F'],\r\n  ['F#', 'Gb'],\r\n  ['G#', 'Ab'],\r\n  ['A#', 'Bb'],\r\n  ['B#', 'C']\r\n])\r\n\r\n/**\r\n * Names of notes, indexed like MIDI numbers, i.e. C is 0\r\n *\r\n * @type {string[]}\r\n */\r\nexport const NOTE_NAMES = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B'\r\n]\r\n\r\n/**\r\n * Names of notes, indexed like MIDI numbers, i.e. C is 0, with flats instead of\r\n * sharps.\r\n *\r\n * @type {string[]}\r\n */\r\nexport const NOTE_NAMES_FLAT = [\r\n  'C',\r\n  'Db',\r\n  'D',\r\n  'Eb',\r\n  'E',\r\n  'F',\r\n  'Gb',\r\n  'G',\r\n  'Ab',\r\n  'A',\r\n  'Bb',\r\n  'B'\r\n]\r\n\r\n/**\r\n * Index equals MIDI note number\r\n *\r\n * @type {Array<MidiNote>}\r\n */\r\nexport const MIDI_NOTES = [\r\n  { pitch: 0, name: 'C', octave: -1, label: 'C-1', frequency: 8.176 },\r\n  { pitch: 1, name: 'C#', octave: -1, label: 'C#-1', frequency: 8.662 },\r\n  { pitch: 2, name: 'D', octave: -1, label: 'D-1', frequency: 9.177 },\r\n  { pitch: 3, name: 'D#', octave: -1, label: 'D#-1', frequency: 9.723 },\r\n  { pitch: 4, name: 'E', octave: -1, label: 'E-1', frequency: 10.301 },\r\n  { pitch: 5, name: 'F', octave: -1, label: 'F-1', frequency: 10.913 },\r\n  { pitch: 6, name: 'F#', octave: -1, label: 'F#-1', frequency: 11.562 },\r\n  { pitch: 7, name: 'G', octave: -1, label: 'G-1', frequency: 12.25 },\r\n  { pitch: 8, name: 'G#', octave: -1, label: 'G#-1', frequency: 12.978 },\r\n  { pitch: 9, name: 'A', octave: -1, label: 'A-1', frequency: 13.75 },\r\n  { pitch: 10, name: 'A#', octave: -1, label: 'A#-1', frequency: 14.568 },\r\n  { pitch: 11, name: 'B', octave: -1, label: 'B-1', frequency: 15.434 },\r\n  { pitch: 12, name: 'C', octave: 0, label: 'C0', frequency: 16.352 },\r\n  { pitch: 13, name: 'C#', octave: 0, label: 'C#0', frequency: 17.324 },\r\n  { pitch: 14, name: 'D', octave: 0, label: 'D0', frequency: 18.354 },\r\n  { pitch: 15, name: 'D#', octave: 0, label: 'D#0', frequency: 19.445 },\r\n  { pitch: 16, name: 'E', octave: 0, label: 'E0', frequency: 20.602 },\r\n  { pitch: 17, name: 'F', octave: 0, label: 'F0', frequency: 21.827 },\r\n  { pitch: 18, name: 'F#', octave: 0, label: 'F#0', frequency: 23.125 },\r\n  { pitch: 19, name: 'G', octave: 0, label: 'G0', frequency: 24.5 },\r\n  { pitch: 20, name: 'G#', octave: 0, label: 'G#0', frequency: 25.957 },\r\n  { pitch: 21, name: 'A', octave: 0, label: 'A0', frequency: 27.5 },\r\n  { pitch: 22, name: 'A#', octave: 0, label: 'A#0', frequency: 29.135 },\r\n  { pitch: 23, name: 'B', octave: 0, label: 'B0', frequency: 30.868 },\r\n  { pitch: 24, name: 'C', octave: 1, label: 'C1', frequency: 32.703 },\r\n  { pitch: 25, name: 'C#', octave: 1, label: 'C#1', frequency: 34.648 },\r\n  { pitch: 26, name: 'D', octave: 1, label: 'D1', frequency: 36.708 },\r\n  { pitch: 27, name: 'D#', octave: 1, label: 'D#1', frequency: 38.891 },\r\n  { pitch: 28, name: 'E', octave: 1, label: 'E1', frequency: 41.203 },\r\n  { pitch: 29, name: 'F', octave: 1, label: 'F1', frequency: 43.654 },\r\n  { pitch: 30, name: 'F#', octave: 1, label: 'F#1', frequency: 46.249 },\r\n  { pitch: 31, name: 'G', octave: 1, label: 'G1', frequency: 48.999 },\r\n  { pitch: 32, name: 'G#', octave: 1, label: 'G#1', frequency: 51.913 },\r\n  { pitch: 33, name: 'A', octave: 1, label: 'A1', frequency: 55 },\r\n  { pitch: 34, name: 'A#', octave: 1, label: 'A#1', frequency: 58.27 },\r\n  { pitch: 35, name: 'B', octave: 1, label: 'B1', frequency: 61.735 },\r\n  { pitch: 36, name: 'C', octave: 2, label: 'C2', frequency: 65.406 },\r\n  { pitch: 37, name: 'C#', octave: 2, label: 'C#2', frequency: 69.296 },\r\n  { pitch: 38, name: 'D', octave: 2, label: 'D2', frequency: 73.416 },\r\n  { pitch: 39, name: 'D#', octave: 2, label: 'D#2', frequency: 77.782 },\r\n  { pitch: 40, name: 'E', octave: 2, label: 'E2', frequency: 82.407 },\r\n  { pitch: 41, name: 'F', octave: 2, label: 'F2', frequency: 87.307 },\r\n  { pitch: 42, name: 'F#', octave: 2, label: 'F#2', frequency: 92.499 },\r\n  { pitch: 43, name: 'G', octave: 2, label: 'G2', frequency: 97.999 },\r\n  { pitch: 44, name: 'G#', octave: 2, label: 'G#2', frequency: 103.826 },\r\n  { pitch: 45, name: 'A', octave: 2, label: 'A2', frequency: 110 },\r\n  { pitch: 46, name: 'A#', octave: 2, label: 'A#2', frequency: 116.541 },\r\n  { pitch: 47, name: 'B', octave: 2, label: 'B2', frequency: 123.471 },\r\n  { pitch: 48, name: 'C', octave: 3, label: 'C3', frequency: 130.813 },\r\n  { pitch: 49, name: 'C#', octave: 3, label: 'C#3', frequency: 138.591 },\r\n  { pitch: 50, name: 'D', octave: 3, label: 'D3', frequency: 146.832 },\r\n  { pitch: 51, name: 'D#', octave: 3, label: 'D#3', frequency: 155.563 },\r\n  { pitch: 52, name: 'E', octave: 3, label: 'E3', frequency: 164.814 },\r\n  { pitch: 53, name: 'F', octave: 3, label: 'F3', frequency: 174.614 },\r\n  { pitch: 54, name: 'F#', octave: 3, label: 'F#3', frequency: 184.997 },\r\n  { pitch: 55, name: 'G', octave: 3, label: 'G3', frequency: 195.998 },\r\n  { pitch: 56, name: 'G#', octave: 3, label: 'G#3', frequency: 207.652 },\r\n  { pitch: 57, name: 'A', octave: 3, label: 'A3', frequency: 220 },\r\n  { pitch: 58, name: 'A#', octave: 3, label: 'A#3', frequency: 233.082 },\r\n  { pitch: 59, name: 'B', octave: 3, label: 'B3', frequency: 246.942 },\r\n  { pitch: 60, name: 'C', octave: 4, label: 'C4', frequency: 261.626 },\r\n  { pitch: 61, name: 'C#', octave: 4, label: 'C#4', frequency: 277.183 },\r\n  { pitch: 62, name: 'D', octave: 4, label: 'D4', frequency: 293.665 },\r\n  { pitch: 63, name: 'D#', octave: 4, label: 'D#4', frequency: 311.127 },\r\n  { pitch: 64, name: 'E', octave: 4, label: 'E4', frequency: 329.628 },\r\n  { pitch: 65, name: 'F', octave: 4, label: 'F4', frequency: 349.228 },\r\n  { pitch: 66, name: 'F#', octave: 4, label: 'F#4', frequency: 369.994 },\r\n  { pitch: 67, name: 'G', octave: 4, label: 'G4', frequency: 391.995 },\r\n  { pitch: 68, name: 'G#', octave: 4, label: 'G#4', frequency: 415.305 },\r\n  { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440 },\r\n  { pitch: 70, name: 'A#', octave: 4, label: 'A#4', frequency: 466.164 },\r\n  { pitch: 71, name: 'B', octave: 4, label: 'B4', frequency: 493.883 },\r\n  { pitch: 72, name: 'C', octave: 5, label: 'C5', frequency: 523.251 },\r\n  { pitch: 73, name: 'C#', octave: 5, label: 'C#5', frequency: 554.365 },\r\n  { pitch: 74, name: 'D', octave: 5, label: 'D5', frequency: 587.33 },\r\n  { pitch: 75, name: 'D#', octave: 5, label: 'D#5', frequency: 622.254 },\r\n  { pitch: 76, name: 'E', octave: 5, label: 'E5', frequency: 659.255 },\r\n  { pitch: 77, name: 'F', octave: 5, label: 'F5', frequency: 698.456 },\r\n  { pitch: 78, name: 'F#', octave: 5, label: 'F#5', frequency: 739.989 },\r\n  { pitch: 79, name: 'G', octave: 5, label: 'G5', frequency: 783.991 },\r\n  { pitch: 80, name: 'G#', octave: 5, label: 'G#5', frequency: 830.609 },\r\n  { pitch: 81, name: 'A', octave: 5, label: 'A5', frequency: 880 },\r\n  { pitch: 82, name: 'A#', octave: 5, label: 'A#5', frequency: 932.328 },\r\n  { pitch: 83, name: 'B', octave: 5, label: 'B5', frequency: 987.767 },\r\n  { pitch: 84, name: 'C', octave: 6, label: 'C6', frequency: 1046.502 },\r\n  { pitch: 85, name: 'C#', octave: 6, label: 'C#6', frequency: 1108.731 },\r\n  { pitch: 86, name: 'D', octave: 6, label: 'D6', frequency: 1174.659 },\r\n  { pitch: 87, name: 'D#', octave: 6, label: 'D#6', frequency: 1244.508 },\r\n  { pitch: 88, name: 'E', octave: 6, label: 'E6', frequency: 1318.51 },\r\n  { pitch: 89, name: 'F', octave: 6, label: 'F6', frequency: 1396.913 },\r\n  { pitch: 90, name: 'F#', octave: 6, label: 'F#6', frequency: 1479.978 },\r\n  { pitch: 91, name: 'G', octave: 6, label: 'G6', frequency: 1567.982 },\r\n  { pitch: 92, name: 'G#', octave: 6, label: 'G#6', frequency: 1661.219 },\r\n  { pitch: 93, name: 'A', octave: 6, label: 'A6', frequency: 1760 },\r\n  { pitch: 94, name: 'A#', octave: 6, label: 'A#6', frequency: 1864.655 },\r\n  { pitch: 95, name: 'B', octave: 6, label: 'B6', frequency: 1975.533 },\r\n  { pitch: 96, name: 'C', octave: 7, label: 'C7', frequency: 2093.005 },\r\n  { pitch: 97, name: 'C#', octave: 7, label: 'C#7', frequency: 2217.461 },\r\n  { pitch: 98, name: 'D', octave: 7, label: 'D7', frequency: 2349.318 },\r\n  { pitch: 99, name: 'D#', octave: 7, label: 'D#7', frequency: 2489.016 },\r\n  { pitch: 100, name: 'E', octave: 7, label: 'E7', frequency: 2637.02 },\r\n  { pitch: 101, name: 'F', octave: 7, label: 'F7', frequency: 2793.826 },\r\n  { pitch: 102, name: 'F#', octave: 7, label: 'F#7', frequency: 2959.955 },\r\n  { pitch: 103, name: 'G', octave: 7, label: 'G7', frequency: 3135.963 },\r\n  { pitch: 104, name: 'G#', octave: 7, label: 'G#7', frequency: 3322.438 },\r\n  { pitch: 105, name: 'A', octave: 7, label: 'A7', frequency: 3520 },\r\n  { pitch: 106, name: 'A#', octave: 7, label: 'A#7', frequency: 3729.31 },\r\n  { pitch: 107, name: 'B', octave: 7, label: 'B7', frequency: 3951.066 },\r\n  { pitch: 108, name: 'C', octave: 8, label: 'C8', frequency: 4186.009 },\r\n  { pitch: 109, name: 'C#', octave: 8, label: 'C#8', frequency: 4434.922 },\r\n  { pitch: 110, name: 'D', octave: 8, label: 'D8', frequency: 4698.636 },\r\n  { pitch: 111, name: 'D#', octave: 8, label: 'D#8', frequency: 4978.032 },\r\n  { pitch: 112, name: 'E', octave: 8, label: 'E8', frequency: 5274.041 },\r\n  { pitch: 113, name: 'F', octave: 8, label: 'F8', frequency: 5587.652 },\r\n  { pitch: 114, name: 'F#', octave: 8, label: 'F#8', frequency: 5919.911 },\r\n  { pitch: 115, name: 'G', octave: 8, label: 'G8', frequency: 6271.927 },\r\n  { pitch: 116, name: 'G#', octave: 8, label: 'G#8', frequency: 6644.875 },\r\n  { pitch: 117, name: 'A', octave: 8, label: 'A8', frequency: 7040 },\r\n  { pitch: 118, name: 'A#', octave: 8, label: 'A#8', frequency: 7458.62 },\r\n  { pitch: 119, name: 'B', octave: 8, label: 'B8', frequency: 7902.133 },\r\n  { pitch: 120, name: 'C', octave: 9, label: 'C9', frequency: 8372.018 },\r\n  { pitch: 121, name: 'C#', octave: 9, label: 'C#9', frequency: 8869.844 },\r\n  { pitch: 122, name: 'D', octave: 9, label: 'D9', frequency: 9397.273 },\r\n  { pitch: 123, name: 'D#', octave: 9, label: 'D#9', frequency: 9956.063 },\r\n  { pitch: 124, name: 'E', octave: 9, label: 'E9', frequency: 10_548.08 },\r\n  { pitch: 125, name: 'F', octave: 9, label: 'F9', frequency: 11_175.3 },\r\n  { pitch: 126, name: 'F#', octave: 9, label: 'F#9', frequency: 11_839.82 },\r\n  { pitch: 127, name: 'G', octave: 9, label: 'G9', frequency: 12_543.85 }\r\n]\r\n\r\n/**\r\n * Set of all MIDI notes that are sharp/flat\r\n *\r\n * @type {Set<number>}\r\n * @example <caption>Find out if a note is sharp/flat</caption>\r\n *      const midiNr = 42;\r\n *      const isSharp = Midi.SHARPS.has(midiNr);\r\n *      // true\r\n */\r\nexport const SHARPS = new Set([\r\n  1,\r\n  3,\r\n  6,\r\n  8,\r\n  10,\r\n  13,\r\n  15,\r\n  18,\r\n  20,\r\n  22,\r\n  25,\r\n  27,\r\n  30,\r\n  32,\r\n  34,\r\n  37,\r\n  39,\r\n  42,\r\n  44,\r\n  46,\r\n  49,\r\n  51,\r\n  54,\r\n  56,\r\n  58,\r\n  61,\r\n  63,\r\n  66,\r\n  68,\r\n  70,\r\n  73,\r\n  75,\r\n  78,\r\n  80,\r\n  82,\r\n  85,\r\n  87,\r\n  90,\r\n  92,\r\n  94,\r\n  97,\r\n  99,\r\n  102,\r\n  104,\r\n  106,\r\n  109,\r\n  111,\r\n  114,\r\n  116,\r\n  118,\r\n  121,\r\n  123,\r\n  126\r\n])\r\n\r\n/**\r\n * @typedef {object} MidiCommand A MIDI command\r\n * @property {string} name e.g. 'noteOn'\r\n * @property {string} description e.g. 'Note-on'\r\n * @property {string[]|undefined} params additional prameters of that command\r\n * @example <caption>Example for a MIDI command</caption>\r\n *      { name: 'noteOn', description: 'Note-on', params: ['key', 'velocity'] }],\r\n */\r\n\r\n/**\r\n * MIDI commands with code, name, and parameters\r\n * From: https://ccrma.stanford.edu/~craig/articles/linuxmidi/misc/essenmidi.html\r\n * https://www.midi.org/specifications/item/table-1-summary-of-midi-message\r\n *\r\n * @type {Map<number,MidiCommand>}\r\n */\r\nexport const MIDI_COMMANDS = new Map([\r\n  [0x80, { name: 'noteOff', description: 'Note-off', params: ['key', 'velocity'] }],\r\n  [0x90, { name: 'noteOn', description: 'Note-on', params: ['key', 'velocity'] }],\r\n  [0xA0, { name: 'aftertouch', description: 'Aftertouch', params: ['key', 'touch'] }],\r\n  [0xB0, { name: 'continuousController', description: 'Continuous controller', params: ['controller #', 'controller value'] }],\r\n  [0xC0, { name: 'patchChange', description: 'Patch change', params: ['instrument number', 'instrument number'] }],\r\n  [0xD0, { name: 'channelPressure', description: 'Channel Pressure', params: ['pressure'] }],\r\n  [0xE0, { name: 'pitchBend', description: 'Pitch bend', params: ['lsb (7 bits)', 'msb (7 bits)'] }],\r\n  [0xF0, { name: 'sysExStart', description: 'start of system exclusive message' }],\r\n  [0xF1, { name: 'timeCodeQuarter', description: 'MIDI Time Code Quarter Frame (Sys Common)' }],\r\n  [0xF2, { name: 'posPointer', description: 'Song Position Pointer (Sys Common)' }],\r\n  [0xF3, { name: 'songSelect', description: 'Song Select (Sys Common)' }],\r\n  [0xF4, { name: 'unknown1', description: '???' }],\r\n  [0xF5, { name: 'unknown2', description: '???' }],\r\n  [0xF6, { name: 'tuneRequest', description: 'Tune Request (Sys Common)' }],\r\n  [0xF7, { name: 'syExEnd', description: 'end of system exclusive message 0' }],\r\n  [0xF8, { name: 'timingClock', description: 'Timing Clock (Sys Realtime)' }],\r\n  [0xFA, { name: 'start', description: 'Start (Sys Realtime)' }],\r\n  [0xFB, { name: 'continue', description: 'Continue (Sys Realtime)' }],\r\n  [0xFC, { name: 'stop', description: 'Stop (Sys Realtime)' }],\r\n  [0xFD, { name: 'unknwon3', description: '???' }],\r\n  [0xFE, { name: 'activeSensing', description: 'Active Sensing (Sys Realtime)' }],\r\n  [0xFF, { name: 'systemReset', description: 'System Reset (Sys Realtime)' }]\r\n])\r\n\r\n/*\r\n * MIDI instruments with number, group, and label\r\n */\r\nconst MIDI_INSTRUMENTS = [\r\n  { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' },\r\n  { number: 1, group: 'Piano', label: 'Bright Acoustic Piano' },\r\n  { number: 2, group: 'Piano', label: 'Electric Grand Piano' },\r\n  { number: 3, group: 'Piano', label: 'Honky-tonk Piano' },\r\n  { number: 4, group: 'Piano', label: 'Electric Piano 1' },\r\n  { number: 5, group: 'Piano', label: 'Electric Piano 2' },\r\n  { number: 6, group: 'Piano', label: 'Harpsichord' },\r\n  { number: 7, group: 'Piano', label: 'Clavinet' },\r\n  { number: 8, group: 'Chromatic Percussion', label: 'Celesta' },\r\n  { number: 9, group: 'Chromatic Percussion', label: 'Glockenspiel' },\r\n  { number: 10, group: 'Chromatic Percussion', label: 'Music Box' },\r\n  { number: 11, group: 'Chromatic Percussion', label: 'Vibraphone' },\r\n  { number: 12, group: 'Chromatic Percussion', label: 'Marimba' },\r\n  { number: 13, group: 'Chromatic Percussion', label: 'Xylophone' },\r\n  { number: 14, group: 'Chromatic Percussion', label: 'Tubular Bells' },\r\n  { number: 15, group: 'Chromatic Percussion', label: 'Dulcimer' },\r\n  { number: 16, group: 'Organ', label: 'Drawbar Organ' },\r\n  { number: 17, group: 'Organ', label: 'Percussive Organ' },\r\n  { number: 18, group: 'Organ', label: 'Rock Organ' },\r\n  { number: 19, group: 'Organ', label: 'Church Organ' },\r\n  { number: 20, group: 'Organ', label: 'Reed Organ' },\r\n  { number: 21, group: 'Organ', label: 'Accordion' },\r\n  { number: 22, group: 'Organ', label: 'Harmonica' },\r\n  { number: 23, group: 'Organ', label: 'Tango Accordion' },\r\n  { number: 24, group: 'Guitar', label: 'Acoustic Guitar(nylon)' },\r\n  { number: 25, group: 'Guitar', label: 'Acoustic Guitar(steel)' },\r\n  { number: 26, group: 'Guitar', label: 'Electric Guitar(jazz)' },\r\n  { number: 27, group: 'Guitar', label: 'Electric Guitar(clean)' },\r\n  { number: 28, group: 'Guitar', label: 'Electric Guitar(muted)' },\r\n  { number: 29, group: 'Guitar', label: 'Overdriven Guitar' },\r\n  { number: 30, group: 'Guitar', label: 'Distortion Guitar' },\r\n  { number: 31, group: 'Guitar', label: 'Guitar harmonics' },\r\n  { number: 32, group: 'Bass', label: 'Acoustic Bass' },\r\n  { number: 33, group: 'Bass', label: 'Electric Bass(finger)' },\r\n  { number: 34, group: 'Bass', label: 'Electric Bass(pick)' },\r\n  { number: 35, group: 'Bass', label: 'Fretless Bass' },\r\n  { number: 36, group: 'Bass', label: 'Slap Bass 1' },\r\n  { number: 37, group: 'Bass', label: 'Slap Bass 2' },\r\n  { number: 38, group: 'Bass', label: 'Synth Bass 1' },\r\n  { number: 39, group: 'Bass', label: 'Synth Bass 2' },\r\n  { number: 40, group: 'Strings', label: 'Violin' },\r\n  { number: 41, group: 'Strings', label: 'Viola' },\r\n  { number: 42, group: 'Strings', label: 'Cello' },\r\n  { number: 43, group: 'Strings', label: 'Contrabass' },\r\n  { number: 44, group: 'Strings', label: 'Tremolo Strings' },\r\n  { number: 45, group: 'Strings', label: 'Pizzicato Strings' },\r\n  { number: 46, group: 'Strings', label: 'Orchestral Harp' },\r\n  { number: 47, group: 'Strings', label: 'Timpani' },\r\n  { number: 48, group: 'Strings (continued)', label: 'String Ensemble 1' },\r\n  { number: 49, group: 'Strings (continued)', label: 'String Ensemble 2' },\r\n  { number: 50, group: 'Strings (continued)', label: 'Synth Strings 1' },\r\n  { number: 51, group: 'Strings (continued)', label: 'Synth Strings 2' },\r\n  { number: 52, group: 'Strings (continued)', label: 'Choir Aahs' },\r\n  { number: 53, group: 'Strings (continued)', label: 'Voice Oohs' },\r\n  { number: 54, group: 'Strings (continued)', label: 'Synth Voice' },\r\n  { number: 55, group: 'Strings (continued)', label: 'Orchestra Hit' },\r\n  { number: 56, group: 'Brass', label: 'Trumpet' },\r\n  { number: 57, group: 'Brass', label: 'Trombone' },\r\n  { number: 58, group: 'Brass', label: 'Tuba' },\r\n  { number: 59, group: 'Brass', label: 'Muted Trumpet' },\r\n  { number: 60, group: 'Brass', label: 'French Horn' },\r\n  { number: 61, group: 'Brass', label: 'Brass Section' },\r\n  { number: 62, group: 'Brass', label: 'Synth Brass 1' },\r\n  { number: 63, group: 'Brass', label: 'Synth Brass 2' },\r\n  { number: 64, group: 'Reed', label: 'Soprano Sax' },\r\n  { number: 65, group: 'Reed', label: 'Alto Sax' },\r\n  { number: 66, group: 'Reed', label: 'Tenor Sax' },\r\n  { number: 67, group: 'Reed', label: 'Baritone Sax' },\r\n  { number: 68, group: 'Reed', label: 'Oboe' },\r\n  { number: 69, group: 'Reed', label: 'English Horn' },\r\n  { number: 70, group: 'Reed', label: 'Bassoon' },\r\n  { number: 71, group: 'Reed', label: 'Clarinet' },\r\n  { number: 72, group: 'Pipe', label: 'Piccolo' },\r\n  { number: 73, group: 'Pipe', label: 'Flute' },\r\n  { number: 74, group: 'Pipe', label: 'Recorder' },\r\n  { number: 75, group: 'Pipe', label: 'Pan Flute' },\r\n  { number: 76, group: 'Pipe', label: 'Blown Bottle' },\r\n  { number: 77, group: 'Pipe', label: 'Shakuhachi' },\r\n  { number: 78, group: 'Pipe', label: 'Whistle' },\r\n  { number: 79, group: 'Pipe', label: 'Ocarina' },\r\n  { number: 80, group: 'Synth Lead', label: 'Lead 1(square)' },\r\n  { number: 81, group: 'Synth Lead', label: 'Lead 2(sawtooth)' },\r\n  { number: 82, group: 'Synth Lead', label: 'Lead 3(calliope)' },\r\n  { number: 83, group: 'Synth Lead', label: 'Lead 4(chiff)' },\r\n  { number: 84, group: 'Synth Lead', label: 'Lead 5(charang)' },\r\n  { number: 85, group: 'Synth Lead', label: 'Lead 6(voice)' },\r\n  { number: 86, group: 'Synth Lead', label: 'Lead 7(fifths)' },\r\n  { number: 87, group: 'Synth Lead', label: 'Lead 8(bass + lead)' },\r\n  { number: 88, group: 'Synth Pad', label: 'Pad 1(new age)' },\r\n  { number: 89, group: 'Synth Pad', label: 'Pad 2(warm)' },\r\n  { number: 90, group: 'Synth Pad', label: 'Pad 3(polysynth)' },\r\n  { number: 91, group: 'Synth Pad', label: 'Pad 4(choir)' },\r\n  { number: 92, group: 'Synth Pad', label: 'Pad 5(bowed)' },\r\n  { number: 93, group: 'Synth Pad', label: 'Pad 6(metallic)' },\r\n  { number: 94, group: 'Synth Pad', label: 'Pad 7(halo)' },\r\n  { number: 95, group: 'Synth Pad', label: 'Pad 8(sweep)' },\r\n  { number: 96, group: 'Synth Effects', label: 'FX 1(rain)' },\r\n  { number: 97, group: 'Synth Effects', label: 'FX 2(soundtrack)' },\r\n  { number: 98, group: 'Synth Effects', label: 'FX 3(crystal)' },\r\n  { number: 99, group: 'Synth Effects', label: 'FX 4(atmosphere)' },\r\n  { number: 100, group: 'Synth Effects', label: 'FX 5(brightness)' },\r\n  { number: 101, group: 'Synth Effects', label: 'FX 6(goblins)' },\r\n  { number: 102, group: 'Synth Effects', label: 'FX 7(echoes)' },\r\n  { number: 103, group: 'Synth Effects', label: 'FX 8(sci-fi)' },\r\n  { number: 104, group: 'Ethnic', label: 'Sitar' },\r\n  { number: 105, group: 'Ethnic', label: 'Banjo' },\r\n  { number: 106, group: 'Ethnic', label: 'Shamisen' },\r\n  { number: 107, group: 'Ethnic', label: 'Koto' },\r\n  { number: 108, group: 'Ethnic', label: 'Kalimba' },\r\n  { number: 109, group: 'Ethnic', label: 'Bag pipe' },\r\n  { number: 110, group: 'Ethnic', label: 'Fiddle' },\r\n  { number: 111, group: 'Ethnic', label: 'Shanai' },\r\n  { number: 112, group: 'Percussive', label: 'Tinkle Bell' },\r\n  { number: 113, group: 'Percussive', label: 'Agogo' },\r\n  { number: 114, group: 'Percussive', label: 'Steel Drums' },\r\n  { number: 115, group: 'Percussive', label: 'Woodblock' },\r\n  { number: 116, group: 'Percussive', label: 'Taiko Drum' },\r\n  { number: 117, group: 'Percussive', label: 'Melodic Tom' },\r\n  { number: 118, group: 'Percussive', label: 'Synth Drum' },\r\n  { number: 119, group: 'Sound Effects', label: 'Reverse Cymbal' },\r\n  { number: 120, group: 'Sound Effects', label: 'Guitar Fret Noise' },\r\n  { number: 121, group: 'Sound Effects', label: 'Breath Noise' },\r\n  { number: 122, group: 'Sound Effects', label: 'Seashore' },\r\n  { number: 123, group: 'Sound Effects', label: 'Bird Tweet' },\r\n  { number: 124, group: 'Sound Effects', label: 'Telephone Ring' },\r\n  { number: 125, group: 'Sound Effects', label: 'Helicopter' },\r\n  { number: 126, group: 'Sound Effects', label: 'Applause' },\r\n  { number: 127, group: 'Sound Effects', label: 'Gunshot' }\r\n]\r\n\r\nconst MIDI_INSTRUMENTS_LEV2 = [\r\n  { number: 1, subnumber: 0, group: 'Piano', label: 'Acoustic Grand Piano' },\r\n  { number: 1, subnumber: 1, group: 'Piano', label: 'Wide Acoustic Grand' },\r\n  { number: 1, subnumber: 2, group: 'Piano', label: 'Dark Acoustic Grand' },\r\n  { number: 2, subnumber: 0, group: 'Piano', label: 'Bright Acoustic Piano' },\r\n  { number: 2, subnumber: 1, group: 'Piano', label: 'Wide Bright Acoustic' },\r\n  { number: 3, subnumber: 0, group: 'Piano', label: 'Electric Grand Piano' },\r\n  { number: 3, subnumber: 1, group: 'Piano', label: 'Wide Electric Grand' },\r\n  { number: 4, subnumber: 0, group: 'Piano', label: 'Honky-tonk Piano' },\r\n  { number: 4, subnumber: 1, group: 'Piano', label: 'Wide Honky-tonk' },\r\n  { number: 5, subnumber: 0, group: 'Piano', label: 'Rhodes Piano' },\r\n  { number: 5, subnumber: 1, group: 'Piano', label: 'Detuned Electric Piano 1' },\r\n  { number: 5, subnumber: 2, group: 'Piano', label: 'Electric Piano 1 Variation' },\r\n  { number: 5, subnumber: 3, group: 'Piano', label: '60\\'s Electric Piano' },\r\n  { number: 6, subnumber: 0, group: 'Piano', label: 'Chorused Electric Piano' },\r\n  { number: 6, subnumber: 1, group: 'Piano', label: 'Detuned Electric Piano 2' },\r\n  { number: 6, subnumber: 2, group: 'Piano', label: 'Electric Piano 2 Variation' },\r\n  { number: 6, subnumber: 3, group: 'Piano', label: 'Electric Piano Legend' },\r\n  { number: 6, subnumber: 4, group: 'Piano', label: 'Electric Piano Phase' },\r\n  { number: 7, subnumber: 0, group: 'Piano', label: 'Harpsichord' },\r\n  { number: 7, subnumber: 1, group: 'Piano', label: 'Coupled Harpsichord' },\r\n  { number: 7, subnumber: 2, group: 'Piano', label: 'Wide Harpsichord' },\r\n  { number: 7, subnumber: 3, group: 'Piano', label: 'Open Harpsichord' },\r\n  { number: 8, subnumber: 0, group: 'Piano', label: 'Clavinet' },\r\n  { number: 8, subnumber: 1, group: 'Piano', label: 'Pulse Clavinet' },\r\n  { number: 9, subnumber: 0, group: 'Chromatic Percussion', label: 'Celesta' },\r\n  { number: 10, subnumber: 0, group: 'Chromatic Percussion', label: 'Glockenspiel' },\r\n  { number: 11, subnumber: 0, group: 'Chromatic Percussion', label: 'Music Box' },\r\n  { number: 12, subnumber: 0, group: 'Chromatic Percussion', label: 'Vibraphone' },\r\n  { number: 12, subnumber: 1, group: 'Chromatic Percussion', label: 'Wet Vibraphone' },\r\n  { number: 13, subnumber: 0, group: 'Chromatic Percussion', label: 'Marimba' },\r\n  { number: 13, subnumber: 1, group: 'Chromatic Percussion', label: 'Wide Marimba' },\r\n  { number: 14, subnumber: 0, group: 'Chromatic Percussion', label: 'Xylophone' },\r\n  { number: 15, subnumber: 0, group: 'Chromatic Percussion', label: 'Tubular Bells' },\r\n  { number: 15, subnumber: 1, group: 'Chromatic Percussion', label: 'Church Bells' },\r\n  { number: 15, subnumber: 2, group: 'Chromatic Percussion', label: 'Carillon' },\r\n  { number: 16, subnumber: 0, group: 'Chromatic Percussion', label: 'Dulcimer / Santur' },\r\n  { number: 17, subnumber: 0, group: 'Organ', label: 'Hammond Organ' },\r\n  { number: 17, subnumber: 1, group: 'Organ', label: 'Detuned Organ 1' },\r\n  { number: 17, subnumber: 2, group: 'Organ', label: '60\\'s Organ 1' },\r\n  { number: 17, subnumber: 3, group: 'Organ', label: 'Organ 4' },\r\n  { number: 18, subnumber: 0, group: 'Organ', label: 'Percussive Organ' },\r\n  { number: 18, subnumber: 1, group: 'Organ', label: 'Detuned Organ 2' },\r\n  { number: 18, subnumber: 2, group: 'Organ', label: 'Organ 5' },\r\n  { number: 19, subnumber: 0, group: 'Organ', label: 'Rock Organ' },\r\n  { number: 20, subnumber: 0, group: 'Organ', label: 'Church Organ 1' },\r\n  { number: 20, subnumber: 1, group: 'Organ', label: 'Church Organ 2' },\r\n  { number: 20, subnumber: 2, group: 'Organ', label: 'Church Organ 3' },\r\n  { number: 21, subnumber: 0, group: 'Organ', label: 'Reed Organ' },\r\n  { number: 21, subnumber: 1, group: 'Organ', label: 'Puff Organ' },\r\n  { number: 22, subnumber: 0, group: 'Organ', label: 'French Accordion' },\r\n  { number: 22, subnumber: 1, group: 'Organ', label: 'Italian Accordion' },\r\n  { number: 23, subnumber: 0, group: 'Organ', label: 'Harmonica' },\r\n  { number: 24, subnumber: 0, group: 'Organ', label: 'Bandoneon' },\r\n  { number: 25, subnumber: 0, group: 'Guitar', label: 'Nylon-String Guitar' },\r\n  { number: 25, subnumber: 1, group: 'Guitar', label: 'Ukelele' },\r\n  { number: 25, subnumber: 2, group: 'Guitar', label: 'Open Nylon Guitar' },\r\n  { number: 25, subnumber: 3, group: 'Guitar', label: 'Nylon Guitar 2' },\r\n  { number: 26, subnumber: 0, group: 'Guitar', label: 'Steel-String Guitar' },\r\n  { number: 26, subnumber: 1, group: 'Guitar', label: '12-String Guitar' },\r\n  { number: 26, subnumber: 2, group: 'Guitar', label: 'Mandolin' },\r\n  { number: 26, subnumber: 3, group: 'Guitar', label: 'Steel + Body' },\r\n  { number: 27, subnumber: 0, group: 'Guitar', label: 'Jazz Guitar' },\r\n  { number: 27, subnumber: 1, group: 'Guitar', label: 'Hawaiian Guitar' },\r\n  { number: 28, subnumber: 0, group: 'Guitar', label: 'Clean Electric Guitar' },\r\n  { number: 28, subnumber: 1, group: 'Guitar', label: 'Chorus Guitar' },\r\n  { number: 28, subnumber: 2, group: 'Guitar', label: 'Mid Tone Guitar' },\r\n  { number: 29, subnumber: 0, group: 'Guitar', label: 'Muted Electric Guitar' },\r\n  { number: 29, subnumber: 1, group: 'Guitar', label: 'Funk Guitar' },\r\n  { number: 29, subnumber: 2, group: 'Guitar', label: 'Funk Guitar 2' },\r\n  { number: 29, subnumber: 3, group: 'Guitar', label: 'Jazz Man' },\r\n  { number: 30, subnumber: 0, group: 'Guitar', label: 'Overdriven Guitar' },\r\n  { number: 30, subnumber: 1, group: 'Guitar', label: 'Guitar Pinch' },\r\n  { number: 31, subnumber: 0, group: 'Guitar', label: 'Distortion Guitar' },\r\n  { number: 31, subnumber: 1, group: 'Guitar', label: 'Feedback Guitar' },\r\n  { number: 31, subnumber: 2, group: 'Guitar', label: 'Distortion Rtm Guitar' },\r\n  { number: 32, subnumber: 0, group: 'Guitar', label: 'Guitar Harmonics' },\r\n  { number: 32, subnumber: 1, group: 'Guitar', label: 'Guitar Feedback' },\r\n  { number: 33, subnumber: 0, group: 'Bass', label: 'Acoustic Bass' },\r\n  { number: 34, subnumber: 0, group: 'Bass', label: 'Fingered Bass' },\r\n  { number: 34, subnumber: 1, group: 'Bass', label: 'Finger Slap' },\r\n  { number: 35, subnumber: 0, group: 'Bass', label: 'Picked Bass' },\r\n  { number: 36, subnumber: 0, group: 'Bass', label: 'Fretless Bass' },\r\n  { number: 37, subnumber: 0, group: 'Bass', label: 'Slap Bass 1' },\r\n  { number: 38, subnumber: 0, group: 'Bass', label: 'Slap Bass 2' },\r\n  { number: 39, subnumber: 0, group: 'Bass', label: 'Synth Bass 1' },\r\n  { number: 39, subnumber: 1, group: 'Bass', label: 'Synth Bass 101' },\r\n  { number: 39, subnumber: 2, group: 'Bass', label: 'Synth Bass 3' },\r\n  { number: 39, subnumber: 3, group: 'Bass', label: 'Clavi Bass' },\r\n  { number: 39, subnumber: 4, group: 'Bass', label: 'Hammer' },\r\n  { number: 40, subnumber: 0, group: 'Bass', label: 'Synth Bass 2' },\r\n  { number: 40, subnumber: 1, group: 'Bass', label: 'Synth Bass 4' },\r\n  { number: 40, subnumber: 2, group: 'Bass', label: 'Rubber Bass' },\r\n  { number: 40, subnumber: 3, group: 'Bass', label: 'Attack Pulse' },\r\n  { number: 41, subnumber: 0, group: 'Strings', label: 'Violin' },\r\n  { number: 41, subnumber: 1, group: 'Strings', label: 'Slow Violin' },\r\n  { number: 42, subnumber: 0, group: 'Strings', label: 'Viola' },\r\n  { number: 43, subnumber: 0, group: 'Strings', label: 'Cello' },\r\n  { number: 44, subnumber: 0, group: 'Strings', label: 'Contrabass' },\r\n  { number: 45, subnumber: 0, group: 'Strings', label: 'Tremolo Strings' },\r\n  { number: 46, subnumber: 0, group: 'Strings', label: 'Pizzicato Strings' },\r\n  { number: 47, subnumber: 0, group: 'Strings', label: 'Harp' },\r\n  { number: 47, subnumber: 1, group: 'Strings', label: 'Yang Qin' },\r\n  { number: 48, subnumber: 0, group: 'Strings', label: 'Timpani' },\r\n  { number: 49, subnumber: 0, group: 'Orchestral Ensemble', label: 'String Ensemble' },\r\n  { number: 49, subnumber: 1, group: 'Orchestral Ensemble', label: 'Orchestra Strings' },\r\n  { number: 49, subnumber: 2, group: 'Orchestral Ensemble', label: '60\\'s Strings' },\r\n  { number: 50, subnumber: 0, group: 'Orchestral Ensemble', label: 'Slow String Ensemble' },\r\n  { number: 51, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Strings 1' },\r\n  { number: 51, subnumber: 1, group: 'Orchestral Ensemble', label: 'Synth Strings 3' },\r\n  { number: 52, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Strings 2' },\r\n  { number: 53, subnumber: 0, group: 'Orchestral Ensemble', label: 'Choir Aahs' },\r\n  { number: 53, subnumber: 1, group: 'Orchestral Ensemble', label: 'Choir Aahs 2' },\r\n  { number: 54, subnumber: 0, group: 'Orchestral Ensemble', label: 'Voice Oohs' },\r\n  { number: 54, subnumber: 1, group: 'Orchestral Ensemble', label: 'Humming' },\r\n  { number: 55, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Voice' },\r\n  { number: 55, subnumber: 1, group: 'Orchestral Ensemble', label: 'Analog Voice' },\r\n  { number: 56, subnumber: 0, group: 'Orchestral Ensemble', label: 'Orchestra Hit' },\r\n  { number: 56, subnumber: 1, group: 'Orchestral Ensemble', label: 'Bass Hit' },\r\n  { number: 56, subnumber: 2, group: 'Orchestral Ensemble', label: '6th Hit' },\r\n  { number: 56, subnumber: 3, group: 'Orchestral Ensemble', label: 'Euro Hit' },\r\n  { number: 57, subnumber: 0, group: 'Brass', label: 'Trumpet' },\r\n  { number: 57, subnumber: 1, group: 'Brass', label: 'Dark Trumpet' },\r\n  { number: 58, subnumber: 0, group: 'Brass', label: 'Trombone' },\r\n  { number: 58, subnumber: 1, group: 'Brass', label: 'Trombone 2' },\r\n  { number: 58, subnumber: 2, group: 'Brass', label: 'Bright Trombone' },\r\n  { number: 59, subnumber: 0, group: 'Brass', label: 'Tuba' },\r\n  { number: 60, subnumber: 0, group: 'Brass', label: 'Muted Trumpet' },\r\n  { number: 60, subnumber: 1, group: 'Brass', label: 'Muted Trumpet 2' },\r\n  { number: 61, subnumber: 0, group: 'Brass', label: 'French Horn' },\r\n  { number: 61, subnumber: 1, group: 'Brass', label: 'French Horn 2' },\r\n  { number: 62, subnumber: 0, group: 'Brass', label: 'Brass Section' },\r\n  { number: 62, subnumber: 1, group: 'Brass', label: 'Brass Section' },\r\n  { number: 63, subnumber: 0, group: 'Brass', label: 'Synth Brass 1' },\r\n  { number: 63, subnumber: 1, group: 'Brass', label: 'Synth Brass 3' },\r\n  { number: 63, subnumber: 2, group: 'Brass', label: 'Analog Brass 1' },\r\n  { number: 63, subnumber: 3, group: 'Brass', label: 'Jump Brass' },\r\n  { number: 64, subnumber: 0, group: 'Brass', label: 'Synth Brass 2' },\r\n  { number: 64, subnumber: 1, group: 'Brass', label: 'Synth Brass 4' },\r\n  { number: 64, subnumber: 2, group: 'Brass', label: 'Analog Brass 2' },\r\n  { number: 65, subnumber: 0, group: 'Reed', label: 'Soprano Sax' },\r\n  { number: 66, subnumber: 0, group: 'Reed', label: 'Alto Sax' },\r\n  { number: 67, subnumber: 0, group: 'Reed', label: 'Tenor Sax' },\r\n  { number: 68, subnumber: 0, group: 'Reed', label: 'Baritone Sax' },\r\n  { number: 69, subnumber: 0, group: 'Reed', label: 'Oboe' },\r\n  { number: 70, subnumber: 0, group: 'Reed', label: 'English Horn' },\r\n  { number: 71, subnumber: 0, group: 'Reed', label: 'Bassoon' },\r\n  { number: 72, subnumber: 0, group: 'Reed', label: 'Clarinet' },\r\n  { number: 73, subnumber: 0, group: 'Wind', label: 'Piccolo' },\r\n  { number: 74, subnumber: 0, group: 'Wind', label: 'Flute' },\r\n  { number: 75, subnumber: 0, group: 'Wind', label: 'Recorder' },\r\n  { number: 76, subnumber: 0, group: 'Wind', label: 'Pan Flute' },\r\n  { number: 77, subnumber: 0, group: 'Wind', label: 'Blown Bottle' },\r\n  { number: 78, subnumber: 0, group: 'Wind', label: 'Shakuhachi' },\r\n  { number: 79, subnumber: 0, group: 'Wind', label: 'Whistle' },\r\n  { number: 80, subnumber: 0, group: 'Wind', label: 'Ocarina' },\r\n  { number: 81, subnumber: 0, group: 'Lead', label: 'Square Lead' },\r\n  { number: 81, subnumber: 1, group: 'Lead', label: 'Square Wave' },\r\n  { number: 81, subnumber: 2, group: 'Lead', label: 'Sine Wave' },\r\n  { number: 82, subnumber: 0, group: 'Lead', label: 'Saw Lead' },\r\n  { number: 82, subnumber: 1, group: 'Lead', label: 'Saw Wave' },\r\n  { number: 82, subnumber: 2, group: 'Lead', label: 'Doctor Solo' },\r\n  { number: 82, subnumber: 3, group: 'Lead', label: 'Natural Lead' },\r\n  { number: 82, subnumber: 4, group: 'Lead', label: 'Sequenced Saw' },\r\n  { number: 83, subnumber: 0, group: 'Lead', label: 'Synth Calliope' },\r\n  { number: 84, subnumber: 0, group: 'Lead', label: 'Chiffer Lead' },\r\n  { number: 85, subnumber: 0, group: 'Lead', label: 'Charang' },\r\n  { number: 85, subnumber: 1, group: 'Lead', label: 'Wire Lead' },\r\n  { number: 86, subnumber: 0, group: 'Lead', label: 'Solo Synth Vox' },\r\n  { number: 87, subnumber: 0, group: 'Lead', label: '5th Saw Wave' },\r\n  { number: 88, subnumber: 0, group: 'Lead', label: 'Bass & Lead' },\r\n  { number: 88, subnumber: 1, group: 'Lead', label: 'Delayed Lead' },\r\n  { number: 89, subnumber: 0, group: 'Synth Pad', label: 'Fantasia Pad' },\r\n  { number: 90, subnumber: 0, group: 'Synth Pad', label: 'Warm Pad' },\r\n  { number: 90, subnumber: 1, group: 'Synth Pad', label: 'Sine Pad' },\r\n  { number: 91, subnumber: 0, group: 'Synth Pad', label: 'Polysynth Pad' },\r\n  { number: 92, subnumber: 0, group: 'Synth Pad', label: 'Space Voice Pad' },\r\n  { number: 92, subnumber: 1, group: 'Synth Pad', label: 'Itopia' },\r\n  { number: 93, subnumber: 0, group: 'Synth Pad', label: 'Bowed Glass Pad' },\r\n  { number: 94, subnumber: 0, group: 'Synth Pad', label: 'Metal Pad' },\r\n  { number: 95, subnumber: 0, group: 'Synth Pad', label: 'Halo Pad' },\r\n  { number: 96, subnumber: 0, group: 'Synth Pad', label: 'Sweep Pad' },\r\n  { number: 97, subnumber: 0, group: 'Synth Effects', label: 'Ice Rain' },\r\n  { number: 98, subnumber: 0, group: 'Synth Effects', label: 'Soundtrack' },\r\n  { number: 99, subnumber: 0, group: 'Synth Effects', label: 'Crystal' },\r\n  { number: 99, subnumber: 1, group: 'Synth Effects', label: 'Synth Mallet' },\r\n  { number: 100, subnumber: 0, group: 'Synth Effects', label: 'Atmosphere' },\r\n  { number: 101, subnumber: 0, group: 'Synth Effects', label: 'Brightness' },\r\n  { number: 102, subnumber: 0, group: 'Synth Effects', label: 'Goblin' },\r\n  { number: 103, subnumber: 0, group: 'Synth Effects', label: 'Echo Drops' },\r\n  { number: 103, subnumber: 1, group: 'Synth Effects', label: 'Echo Bell' },\r\n  { number: 103, subnumber: 2, group: 'Synth Effects', label: 'Echo Pan' },\r\n  { number: 104, subnumber: 0, group: 'Synth Effects', label: 'Star Theme' },\r\n  { number: 105, subnumber: 0, group: 'Ethnic', label: 'Sitar' },\r\n  { number: 105, subnumber: 1, group: 'Ethnic', label: 'Sitar 2' },\r\n  { number: 106, subnumber: 0, group: 'Ethnic', label: 'Banjo' },\r\n  { number: 107, subnumber: 0, group: 'Ethnic', label: 'Shamisen' },\r\n  { number: 108, subnumber: 0, group: 'Ethnic', label: 'Koto' },\r\n  { number: 108, subnumber: 1, group: 'Ethnic', label: 'Taisho Koto' },\r\n  { number: 109, subnumber: 0, group: 'Ethnic', label: 'Kalimba' },\r\n  { number: 110, subnumber: 0, group: 'Ethnic', label: 'Bagpipe' },\r\n  { number: 111, subnumber: 0, group: 'Ethnic', label: 'Fiddle' },\r\n  { number: 112, subnumber: 0, group: 'Ethnic', label: 'Shanai' },\r\n  { number: 113, subnumber: 0, group: 'Percussive', label: 'Tinkle Bell' },\r\n  { number: 114, subnumber: 0, group: 'Percussive', label: 'Agogo' },\r\n  { number: 115, subnumber: 0, group: 'Percussive', label: 'Steel Drums' },\r\n  { number: 116, subnumber: 0, group: 'Percussive', label: 'Woodblock' },\r\n  { number: 116, subnumber: 1, group: 'Percussive', label: 'Castanets' },\r\n  { number: 117, subnumber: 0, group: 'Percussive', label: 'Taiko Drum' },\r\n  { number: 117, subnumber: 1, group: 'Percussive', label: 'Concert Bass Drum' },\r\n  { number: 118, subnumber: 0, group: 'Percussive', label: 'Melodic Tom 1' },\r\n  { number: 118, subnumber: 1, group: 'Percussive', label: 'Melodic Tom 2' },\r\n  { number: 119, subnumber: 0, group: 'Percussive', label: 'Synth Drum' },\r\n  { number: 119, subnumber: 1, group: 'Percussive', label: '808 Tom' },\r\n  { number: 119, subnumber: 2, group: 'Percussive', label: 'Electric Percussion' },\r\n  { number: 120, subnumber: 0, group: 'Percussive', label: 'Reverse Cymbal' },\r\n  { number: 121, subnumber: 0, group: 'Sound Effects', label: 'Guitar Fret Noise' },\r\n  { number: 121, subnumber: 1, group: 'Sound Effects', label: 'Guitar Cut Noise' },\r\n  { number: 121, subnumber: 2, group: 'Sound Effects', label: 'String Slap' },\r\n  { number: 122, subnumber: 0, group: 'Sound Effects', label: 'Breath Noise' },\r\n  { number: 122, subnumber: 1, group: 'Sound Effects', label: 'Flute Key Click' },\r\n  { number: 123, subnumber: 0, group: 'Sound Effects', label: 'Seashore' },\r\n  { number: 123, subnumber: 1, group: 'Sound Effects', label: 'Rain' },\r\n  { number: 123, subnumber: 2, group: 'Sound Effects', label: 'Thunder' },\r\n  { number: 123, subnumber: 3, group: 'Sound Effects', label: 'Wind' },\r\n  { number: 123, subnumber: 4, group: 'Sound Effects', label: 'Stream' },\r\n  { number: 123, subnumber: 5, group: 'Sound Effects', label: 'Bubble' },\r\n  { number: 124, subnumber: 0, group: 'Sound Effects', label: 'Bird Tweet' },\r\n  { number: 124, subnumber: 1, group: 'Sound Effects', label: 'Dog' },\r\n  { number: 124, subnumber: 2, group: 'Sound Effects', label: 'Horse Gallop' },\r\n  { number: 124, subnumber: 3, group: 'Sound Effects', label: 'Bird 2' },\r\n  { number: 125, subnumber: 0, group: 'Sound Effects', label: 'Telephone 1' },\r\n  { number: 125, subnumber: 1, group: 'Sound Effects', label: 'Telephone 2' },\r\n  { number: 125, subnumber: 2, group: 'Sound Effects', label: 'Door Creaking' },\r\n  { number: 125, subnumber: 3, group: 'Sound Effects', label: 'Door Closing' },\r\n  { number: 125, subnumber: 4, group: 'Sound Effects', label: 'Scratch' },\r\n  { number: 125, subnumber: 5, group: 'Sound Effects', label: 'Wind Chimes' },\r\n  { number: 126, subnumber: 0, group: 'Sound Effects', label: 'Helicopter' },\r\n  { number: 126, subnumber: 1, group: 'Sound Effects', label: 'Car Engine' },\r\n  { number: 126, subnumber: 2, group: 'Sound Effects', label: 'Car Stop' },\r\n  { number: 126, subnumber: 3, group: 'Sound Effects', label: 'Car Pass' },\r\n  { number: 126, subnumber: 4, group: 'Sound Effects', label: 'Car Crash' },\r\n  { number: 126, subnumber: 5, group: 'Sound Effects', label: 'Siren' },\r\n  { number: 126, subnumber: 6, group: 'Sound Effects', label: 'Train' },\r\n  { number: 126, subnumber: 7, group: 'Sound Effects', label: 'Jetplane' },\r\n  { number: 126, subnumber: 8, group: 'Sound Effects', label: 'Starship' },\r\n  { number: 126, subnumber: 9, group: 'Sound Effects', label: 'Burst Noise' },\r\n  { number: 127, subnumber: 0, group: 'Sound Effects', label: 'Applause' },\r\n  { number: 127, subnumber: 1, group: 'Sound Effects', label: 'Laughing' },\r\n  { number: 127, subnumber: 2, group: 'Sound Effects', label: 'Screaming' },\r\n  { number: 127, subnumber: 3, group: 'Sound Effects', label: 'Punch' },\r\n  { number: 127, subnumber: 4, group: 'Sound Effects', label: 'Heart Beat' },\r\n  { number: 127, subnumber: 5, group: 'Sound Effects', label: 'Footsteps' },\r\n  { number: 128, subnumber: 0, group: 'Sound Effects', label: 'Gun Shot' },\r\n  { number: 128, subnumber: 1, group: 'Sound Effects', label: 'Machine Gun' },\r\n  { number: 128, subnumber: 2, group: 'Sound Effects', label: 'Lasergun' },\r\n  { number: 128, subnumber: 3, group: 'Sound Effects', label: 'Explosion' }\r\n]\r\n\r\n/**\r\n * @type {Map<number,string>}\r\n */\r\nconst GENERAL_MIDI_DRUM_NOTE_NUMBERS = new Map([\r\n  [27, 'High Q(GM2)'],\r\n  [28, 'Slap(GM2)'],\r\n  [29, 'Scratch Push(GM2)'],\r\n  [30, 'Scratch Pull(GM2)'],\r\n  [31, 'Sticks(GM2)'],\r\n  [32, 'Square Click(GM2)'],\r\n  [33, 'Metronome Click(GM2)'],\r\n  [34, 'Metronome Bell(GM2)'],\r\n  [35, 'Bass Drum 2'],\r\n  [36, 'Bass Drum 1'],\r\n  [37, 'Side Stick'],\r\n  [38, 'Snare Drum 1'],\r\n  [39, 'Hand Clap'],\r\n  [40, 'Snare Drum 2'],\r\n  [41, 'Low Tom 2'],\r\n  [42, 'Closed Hi-hat'],\r\n  [43, 'Low Tom 1'],\r\n  [44, 'Pedal Hi-hat'],\r\n  [45, 'Mid Tom 2'],\r\n  [46, 'Open Hi-hat'],\r\n  [47, 'Mid Tom 1'],\r\n  [48, 'High Tom 2'],\r\n  [49, 'Crash Cymbal 1'],\r\n  [50, 'High Tom 1'],\r\n  [51, 'Ride Cymbal 1'],\r\n  [52, 'Chinese Cymbal'],\r\n  [53, 'Ride Bell'],\r\n  [54, 'Tambourine'],\r\n  [55, 'Splash Cymbal'],\r\n  [56, 'Cowbell'],\r\n  [57, 'Crash Cymbal 2'],\r\n  [58, 'Vibra Slap'],\r\n  [59, 'Ride Cymbal 2'],\r\n  [60, 'High Bongo'],\r\n  [61, 'Low Bongo'],\r\n  [62, 'Mute High Conga'],\r\n  [63, 'Open High Conga'],\r\n  [64, 'Low Conga'],\r\n  [65, 'High Timbale'],\r\n  [66, 'Low Timbale'],\r\n  [67, 'High Agogo'],\r\n  [68, 'Low Agogo'],\r\n  [69, 'Cabasa'],\r\n  [70, 'Maracas'],\r\n  [71, 'Short Whistle'],\r\n  [72, 'Long Whistle'],\r\n  [73, 'Short Guiro'],\r\n  [74, 'Long Guiro'],\r\n  [75, 'Claves'],\r\n  [76, 'High Wood Block'],\r\n  [77, 'Low Wood Block'],\r\n  [78, 'Mute Cuica'],\r\n  [79, 'Open Cuica'],\r\n  [80, 'Mute Triangle'],\r\n  [81, 'Open Triangle'],\r\n  [82, 'Shaker(GM2)'],\r\n  [83, 'Jingle Bell(GM2)'],\r\n  [84, 'Belltree(GM2)'],\r\n  [85, 'Castanets(GM2)'],\r\n  [86, 'Mute Surdo(GM2)'],\r\n  [87, 'Open Surdo(GM2)']\r\n])\r\n\r\n/**\r\n * @type {object[]}\r\n * @todo add instrument numbers\r\n * @todo This might be useful, e.g. to check which notes Player can play\r\n */\r\nexport const MIDI_NOTE_RANGES = [\r\n  // Strings\r\n  { instrNr: 40, nrL2: -1, subNrL2: -1, label: 'Violin', min: 55, max: 103 },\r\n  { instrNr: 41, nrL2: -1, subNrL2: -1, label: 'Viola', min: 48, max: 91 },\r\n  { instrNr: 42, nrL2: -1, subNrL2: -1, label: 'Cello', min: 36, max: 76 },\r\n  { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Double Bass', min: 28, max: 67 },\r\n  { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Bass Guitar', min: 28, max: 67 },\r\n  { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Acoustic Guitar', min: 40, max: 88 },\r\n  // Brass\r\n  { instrNr: 58, nrL2: 59, subNrL2: 0, label: 'Tuba', min: 28, max: 58 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Trombone', min: 34, max: 67 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'French Horn', min: 34, max: 77 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Trombone', min: 40, max: 72 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Trumpet', min: 55, max: 82 },\r\n  // Woodwinds\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Piccolo', min: 74, max: 102 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Flute', min: 60, max: 96 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Oboe', min: 58, max: 91 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Flute', min: 55, max: 91 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Cor Anglais (English Horn)', min: 52, max: 81 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Clarinet', min: 50, max: 94 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Clarinet', min: 38, max: 77 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bassoon', min: 34, max: 75 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Contrabassoon', min: 22, max: 53 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Soprano Recorder', min: 72, max: 98 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Recorder', min: 65, max: 91 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tenor Recorder', min: 60, max: 86 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Recorder', min: 53, max: 79 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Baritone Sax', min: 36, max: 69 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tenor Sax', min: 44, max: 76 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Sax', min: 49, max: 81 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Soprano Sax', min: 56, max: 88 },\r\n  // Tuned Percussion\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Glockenspiel', min: 79, max: 108 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Xylophone', min: 65, max: 108 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Vibraphone', min: 53, max: 89 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Marimba', min: 45, max: 96 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Marimba', min: 33, max: 81 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Celeste', min: 60, max: 108 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tubular Bells', min: 60, max: 77 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Timpani', min: 40, max: 55 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Harpsichord', min: 29, max: 89 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Kalimba', min: 60, max: 88 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Harp', min: 24, max: 103 }\r\n]\r\n\r\n// Build lookup maps\r\nfor (const note of MIDI_NOTES) {\r\n  MidiNoteByPitch.set(note.pitch, note)\r\n  MidiNoteByLabel.set(note.label, note)\r\n}\r\nfor (const instrument of MIDI_INSTRUMENTS) {\r\n  MidiInstrumentByNumber.set(instrument.number, instrument)\r\n}\r\nfor (const instrument of MIDI_INSTRUMENTS_LEV2) {\r\n  const key = `${instrument.number}-${instrument.subnumber}`\r\n  MidiInstrumentByNumberLev2.set(key, instrument)\r\n}\r\n", "import { getMidiNoteByLabel, getMidiNoteByNr } from '../fileFormats/Midi.js'\r\n\r\n/**\r\n * Note class that reflects MIDI properties but has\r\n * absolute start and end times in seconds.\r\n */\r\nclass Note {\r\n  /**\r\n     * Creates a new Note. Note.from() is preferred over using the constructor.\r\n     *\r\n     * @param {number} pitch pitch\r\n     * @param {number} start start time in seconds\r\n     * @param {number} velocity velocity\r\n     * @param {number} channel MIDI channel\r\n     * @param {number} end end time in seconds\r\n     */\r\n  constructor (\r\n    pitch = 0,\r\n    start = 0,\r\n    velocity = 127,\r\n    channel = 0,\r\n    end = null\r\n  ) {\r\n    // Get note name, e.g. C#4\r\n    if (pitch < 0 || pitch > 127) {\r\n      throw new Error(`Invalid pitch ${pitch}`)\r\n    }\r\n    try {\r\n      this.name = getMidiNoteByNr(pitch).label\r\n    } catch {\r\n      throw new Error(`Invalid pitch ${pitch}`)\r\n    }\r\n    this.pitch = pitch\r\n    this.start = start\r\n    this.velocity = velocity\r\n    this.channel = channel\r\n    this.end = end\r\n    // TODO: breaks tests\r\n    // const duration = end - start;\r\n    // this.duration = Number.isNaN(duration) ? null : duration;\r\n  }\r\n\r\n  /**\r\n     * Creates a Note object from an object via destructuring.\r\n     * Use either 'end' or 'duration', if both are specified, end will be used.\r\n     *\r\n     * @example <caption>Using end</caption>\r\n     *  const n = Note.from({\r\n     *      pitch: 'C#4',     // e.g. 12 or C#4\r\n     *      start: 0.5,       // start time in seconds\r\n     *      end: 1.5,         // end time in seconds\r\n     *      velocity: 127,    // MIDI velocity\r\n     *      channel: 0,       // MIDI channel\r\n     *  });\r\n     * @example <caption>Using duration</caption>\r\n     *  const n = Note.from({\r\n     *      pitch: 'C#4',\r\n     *      start: 0.5,\r\n     *      duration: 1.2,\r\n     *  });\r\n     * @param {object} object object with at least {pitch}\r\n     * @param {number|string} object.pitch e.G. 12 or C#4\r\n     * @param {number} object.start start time in seconds\r\n     * @param {number} object.end end time in seconds\r\n     * @param {number} object.duration duration in seconds\r\n     * @param {number} object.velocity MIDI velocity\r\n     * @param {number} object.channel MIDI channel\r\n     * @returns {Note} new note\r\n     * @throws {Error} when pitch is invalid\r\n     */\r\n  static from (object) {\r\n    let {\r\n      pitch = 0,\r\n      start = 0,\r\n      velocity = 127,\r\n      channel = 0,\r\n      end = null,\r\n      duration = null\r\n    } = object\r\n    // Pitch can either be a number or a string\r\n    if ((typeof pitch === 'string') && Number.isNaN(+pitch)) {\r\n      const note = getMidiNoteByLabel(pitch)\r\n      if (note === null || note === undefined) {\r\n        throw new Error('Invalid pitch for Note.from()')\r\n      }\r\n      pitch = note.pitch\r\n    }\r\n    // Use either end or duration\r\n    if (\r\n      (end === undefined || end === null) &&\r\n            duration !== null &&\r\n            !Number.isNaN(duration)\r\n    ) {\r\n      end = start + duration\r\n    }\r\n    return new Note(pitch, start, velocity, channel, end)\r\n  }\r\n\r\n  /**\r\n     * Returns a copy of the Note object\r\n     *\r\n     * @returns {Note} new note\r\n     */\r\n  clone () {\r\n    return new Note(\r\n      this.pitch,\r\n      this.start,\r\n      this.velocity,\r\n      this.channel,\r\n      this.end\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Returns the duration of this note in seconds\r\n     *\r\n     * @returns {number} note duration\r\n     */\r\n  getDuration () {\r\n    if (this.end === null) {\r\n      return 0\r\n    }\r\n    return this.end - this.start\r\n  }\r\n\r\n  /**\r\n     * Returns the note's name and octave, e.g. 'C#3'\r\n     *\r\n     * @returns {string} note name as string\r\n     */\r\n  getName () {\r\n    return this.name\r\n  }\r\n\r\n  /**\r\n     * Returns the note's name WITHOUT the octave, e.g. 'C#'\r\n     *\r\n     * @returns {string} note name as string\r\n     */\r\n  getLetter () {\r\n    return getMidiNoteByNr(this.pitch).name\r\n  }\r\n\r\n  /**\r\n     * Returns the note's octave\r\n     *\r\n     * @returns {number} the note's octave\r\n     */\r\n  getOctave () {\r\n    return getMidiNoteByNr(this.pitch).octave\r\n  }\r\n\r\n  /**\r\n     * Returns a new Note where start and end are multiplied by factor\r\n     *\r\n     * @param {number} addedSeconds seconds to be added to start and end\r\n     * @returns {Note} new note\r\n     */\r\n  shiftTime (addedSeconds) {\r\n    const n = this.clone()\r\n    n.start += addedSeconds\r\n    n.end = n.end === null ? null : n.end + addedSeconds\r\n    return n\r\n  }\r\n\r\n  /**\r\n     * Returns a new Note where start and end are multiplied by factor\r\n     *\r\n     * @param {number} factor factor to scale start and end with\r\n     * @returns {Note} new note\r\n     */\r\n  scaleTime (factor) {\r\n    const n = this.clone()\r\n    n.start *= factor\r\n    n.end = n.end === null ? null : n.end * factor\r\n    return n\r\n  }\r\n\r\n  /**\r\n     * Returns true, if this Note and otherNote overlap in time.\r\n     *\r\n     * @param {Note} otherNote another Note\r\n     * @returns {boolean} true if they overlap\r\n     */\r\n  overlapsInTime (otherNote) {\r\n    return (this.start >= otherNote.start && this.start <= otherNote.end) ||\r\n            (this.end >= otherNote.start && this.end <= otherNote.end)\r\n  }\r\n\r\n  /**\r\n     * Returns the amount of seconds this Note and otherNote overlap in time.\r\n     *\r\n     * @param {Note} otherNote another Note\r\n     * @returns {number} seconds of overlap\r\n     */\r\n  overlapInSeconds (otherNote) {\r\n    if (!this.overlapsInTime(otherNote)) {\r\n      return 0\r\n    }\r\n    const laterStart = Math.max(this.start, otherNote.start)\r\n    const earlierEnd = Math.min(this.end, otherNote.end)\r\n    return earlierEnd - laterStart\r\n  }\r\n\r\n  /**\r\n     * Returns true if this note and otherNote have equal attributes.\r\n     *\r\n     * @param {Note} otherNote another Note\r\n     * @returns {boolean} true if equal\r\n     */\r\n  equals (otherNote) {\r\n    if (!(otherNote instanceof Note)) {\r\n      return false\r\n    }\r\n    return (\r\n      this.pitch === otherNote.pitch &&\r\n            this.start === otherNote.start &&\r\n            this.velocity === otherNote.velocity &&\r\n            this.channel === otherNote.channel &&\r\n            this.end === otherNote.end\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Human-readable string representation of this Note\r\n     *\r\n     * @param {boolean} short if true, attribute names will be shortened\r\n     * @returns {string} string representation\r\n     */\r\n  toString (short = false) {\r\n    if (short) {\r\n      return `Note(n: ${this.name}, p: ${this.pitch}, s: ${this.start}, e: ${this.end}, v: ${this.velocity}, c: ${this.channel})`\r\n    }\r\n    return `Note(name: ${this.name}, pitch: ${this.pitch}, start: ${this.start}, end: ${this.end}, velocity: ${this.velocity}, channel: ${this.channel})`\r\n  }\r\n}\r\n\r\nexport default Note\r\n", "import { getMidiNoteByLabel } from '../fileFormats/Midi.js'\nimport Note from './Note.js'\n\n/**\n * Guitar note class that reflects MIDI properties but has\n * absolute start and end times in seconds and\n * information on how to play it.\n *\n * @augments Note\n */\nclass GuitarNote extends Note {\n  /**\n     * Creates a new Note\n     *\n     * @param {number} pitch pitch\n     * @param {number} start start time in seconds\n     * @param {number} velocity velocity\n     * @param {number} channel MIDI channel\n     * @param {number} end end time in seconds\n     * @param {number} string guitar string\n     * @param {number} fret guitar fret\n     */\n  constructor (\n    pitch = 0,\n    start = 0,\n    velocity = 127,\n    channel = 0,\n    end = null,\n    // This is different to the base Note class\n    string = null,\n    fret = null\n  ) {\n    super(pitch, start, velocity, channel, end)\n    this.string = string\n    this.fret = fret\n  }\n\n  /**\n     * Creates a GuitarNote object from an object via destructuring\n     *\n     * @param {object} object object with at least {pitch}\n     *  {\n     *      pitch: number|string    e.g. 12 or C#4\n     *      start: number           start time in seconds\n     *      end: number             end time in seconds\n     *      velocity: number        MIDI velocity\n     *      channel: number         MIDI channel\n     *      string: number          guitar string\n     *      fret: number            guitar fret\n     *  }\n     * @returns {GuitarNote} new note\n     * @throws {Error} when pitch is invalid\n     */\n  static from (object) {\n    let {\n      pitch = 0,\n      start = 0,\n      velocity = 127,\n      channel = 0,\n      end = null,\n      // This is different to the base Note class\n      string = null,\n      fret = null\n    } = object\n    if (typeof pitch === 'string' && Number.isNaN(+pitch)) {\n      const note = getMidiNoteByLabel(pitch)\n      if (note === null || note === undefined) {\n        throw new Error('Invalid pitch for GuitarNote.from()')\n      }\n      pitch = note.pitch\n    }\n    return new GuitarNote(\n      pitch,\n      start,\n      velocity,\n      channel,\n      end,\n      string,\n      fret\n    )\n  }\n\n  /**\n     * Converts a Note to a GuitarNote\n     *\n     * @param {Note} note note\n     * @param {number} string string\n     * @param {number} fret fret\n     * @returns {GuitarNote} guitar note\n     */\n  static fromNote (note, string, fret) {\n    return new GuitarNote(\n      note.pitch,\n      note.start,\n      note.velocity,\n      note.channel,\n      note.end,\n      string,\n      fret\n    )\n  }\n\n  /**\n     * Simplifies the GuitarNote to a Note\n     *\n     * @returns {Note} note\n     */\n  toNote () {\n    return new Note(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end\n    )\n  }\n\n  /**\n     * Returns a copy of the Note object\n     *\n     * @returns {GuitarNote} new note\n     */\n  clone () {\n    return new GuitarNote(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end,\n      // This is different to the base Note class\n      this.string,\n      this.fret\n    )\n  }\n\n  /**\n     * Returns true if this note and otherNote have equal attributes.\n     *\n     * @param {GuitarNote} otherNote another GuitarNote\n     * @returns {boolean} true if equal\n     */\n  equals (otherNote) {\n    if (!(otherNote instanceof GuitarNote)) {\n      return false\n    }\n    return (\n      this.pitch === otherNote.pitch &&\n            this.start === otherNote.start &&\n            this.velocity === otherNote.velocity &&\n            this.channel === otherNote.channel &&\n            this.end === otherNote.end &&\n            // This is different to the base Note class\n            this.string === otherNote.string &&\n            this.fret === otherNote.fret\n    )\n  }\n\n  /**\n     * Human-readable string representation of this GuitarNote\n     *\n     * @param {boolean} short if true, attribute names will be shortened\n     * @returns {string} string representation\n     */\n  toString (short = false) {\n    if (short) {\n      return `GuitarNote(n: ${this.name}, p: ${this.pitch}, s: ${this.start}, e: ${this.end}, v: ${this.velocity}, c: ${this.channel}, s: ${this.string}, f: ${this.fret})`\n    }\n    return `GuitarNote(name: ${this.name}, pitch: ${this.pitch}, start: ${this.start}, end: ${this.end}, velocity: ${this.velocity}, channel: ${this.channel}, string: ${this.string}, fret: ${this.fret})`\n  }\n}\n\nexport default GuitarNote\n", "import { getMidiNoteByLabel } from '../fileFormats/Midi.js'\nimport Note from './Note.js'\n\n/**\n * Harmonica note class that reflects MIDI properties but has\n * absolute start and end times in seconds and\n * information on how to play it.\n *\n * @augments Note\n */\nclass HarmonicaNote extends Note {\n  /**\n     * Creates a new Note\n     *\n     * @param {number} pitch pitch\n     * @param {number} start start time in seconds\n     * @param {number} velocity velocity\n     * @param {number} channel MIDI channel\n     * @param {number} end end time in seconds\n     * @param {number} hole harmonica hole\n     * @param {'blow'|'draw'|'bend'|'overblow'} instruction instruction, e.g., blow or draw\n     */\n  constructor (\n    pitch = 0,\n    start = 0,\n    velocity = 127,\n    channel = 0,\n    end = null,\n    // This is different to the base Note class\n    hole = null,\n    instruction = null\n  ) {\n    super(pitch, start, velocity, channel, end)\n    this.hole = hole\n    this.instruction = instruction\n  }\n\n  /**\n     * Creates a HarmonicaNote object from an object via destructuring\n     *\n     * @param {object} object object with at least {pitch}\n     *  {\n     *      pitch: number|string    e.g. 12 or C#4\n     *      start: number           start time in seconds\n     *      end: number             end time in seconds\n     *      velocity: number        MIDI velocity\n     *      channel: number         MIDI channel\n     *      hole: number            harmonica hole\n     *      instruction: string     instruction, e.g., blow or draw\n     *  }\n     * @returns {HarmonicaNote} new note\n     * @throws {Error} when pitch is invalid\n     */\n  static from (object) {\n    let {\n      pitch = 0,\n      start = 0,\n      velocity = 127,\n      channel = 0,\n      end = null,\n      // This is different to the base Note class\n      hole = null,\n      instruction = null\n    } = object\n    if (typeof pitch === 'string' && Number.isNaN(+pitch)) {\n      const note = getMidiNoteByLabel(pitch)\n      if (note === null || note === undefined) {\n        throw new Error('Invalid pitch for HarmonicaNote.from()')\n      }\n      pitch = note.pitch\n    }\n    return new HarmonicaNote(\n      pitch,\n      start,\n      velocity,\n      channel,\n      end,\n      hole,\n      instruction\n    )\n  }\n\n  /**\n     * Converts a Note to a Harmonica\n     *\n     * @param {Note} note note\n     * @param {number} hole harmonica hole\n     * @param {'blow'|'draw'|'bend'|'overblow'} instruction instruction, e.g., blow or draw\n     * @returns {HarmonicaNote} harmonica note\n     */\n  static fromNote (note, hole, instruction) {\n    return new HarmonicaNote(\n      note.pitch,\n      note.start,\n      note.velocity,\n      note.channel,\n      note.end,\n      hole,\n      instruction\n    )\n  }\n\n  /**\n     * Simplifies the HarmonicaNote to a Note\n     *\n     * @returns {Note} note\n     */\n  toNote () {\n    return new Note(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end\n    )\n  }\n\n  /**\n     * Returns a copy of the Note object\n     *\n     * @returns {GuitarNote} new note\n     */\n  clone () {\n    return new HarmonicaNote(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end,\n      // This is different to the base Note class\n      this.hole,\n      this.instruction\n    )\n  }\n\n  /**\n     * Returns true if this note and otherNote have equal attributes.\n     *\n     * @param {GuitarNote} otherNote another GuitarNote\n     * @returns {boolean} true if equal\n     */\n  equals (otherNote) {\n    if (!(otherNote instanceof HarmonicaNote)) {\n      return false\n    }\n    return (\n      this.pitch === otherNote.pitch &&\n            this.start === otherNote.start &&\n            this.velocity === otherNote.velocity &&\n            this.channel === otherNote.channel &&\n            this.end === otherNote.end &&\n            // This is different to the base Note class\n            this.hole === otherNote.hole &&\n            this.instruction === otherNote.instruction\n    )\n  }\n\n  /**\n     * Human-readable string representation of this HarmonicaNote\n     *\n     * @param {boolean} short if true, attribute names will be shortened\n     * @returns {string} string representation\n     */\n  toString (short = false) {\n    if (short) {\n      return `HarmonicaNote(n: ${this.name}, p: ${this.pitch}, s: ${this.start}, e: ${this.end}, v: ${this.velocity}, c: ${this.channel}, h: ${this.hole}, i: ${this.instruction})`\n    }\n    return `HarmonicaNote(name: ${this.name}, pitch: ${this.pitch}, start: ${this.start}, end: ${this.end}, velocity: ${this.velocity}, channel: ${this.channel}, hole: ${this.hole}, instruction: ${this.instruction})`\n  }\n}\n\nexport default HarmonicaNote\n", "export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending.js\";\n\nexport default function(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n", "export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n", "import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n", "export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n", "import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n", "export default function(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n", "export class InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nexport class InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(value);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n", "export default function(x) {\n  return x;\n}\n", "import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n", "export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n", "import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n", "import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n", "export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n", "import quantile from \"./quantile.js\";\n\nexport default function(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n", "export default function minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n", "export default function difference(values, ...others) {\n  values = new Set(values);\n  for (const other of others) {\n    for (const value of other) {\n      values.delete(value);\n    }\n  }\n  return values;\n}\n", "export default function set(values) {\n  return values instanceof Set ? values : new Set(values);\n}\n", "import set from \"./set.js\";\n\nexport default function intersection(values, ...others) {\n  values = new Set(values);\n  others = others.map(set);\n  out: for (const value of values) {\n    for (const other of others) {\n      if (!other.has(value)) {\n        values.delete(value);\n        continue out;\n      }\n    }\n  }\n  return values;\n}\n", "export default function union(...others) {\n  const set = new Set();\n  for (const other of others) {\n    for (const o of other) {\n      set.add(o);\n    }\n  }\n  return set;\n}\n", "var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n", "export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n", "import namespaces from \"./namespaces.js\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n", "import namespace from \"./namespace.js\";\nimport {xhtml} from \"./namespaces.js\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n", "function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n", "import {Selection} from \"./index.js\";\nimport selector from \"../selector.js\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n", "export default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n", "function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n", "import {Selection} from \"./index.js\";\nimport array from \"../array.js\";\nimport selectorAll from \"../selectorAll.js\";\n\nfunction arrayAll(select) {\n  return function() {\n    var group = select.apply(this, arguments);\n    return group == null ? [] : array(group);\n  };\n}\n\nexport default function(select) {\n  if (typeof select === \"function\") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n", "export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nexport function childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n", "import {childMatcher} from \"../matcher.js\";\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\nexport default function(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n}\n", "import {childMatcher} from \"../matcher.js\";\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return this.children;\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\nexport default function(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n}\n", "import {Selection} from \"./index.js\";\nimport matcher from \"../matcher.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n", "export default function(update) {\n  return new Array(update.length);\n}\n", "import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport array from \"../array.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don\u2019t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = array(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n", "import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n", "export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n  if (onupdate != null) update = onupdate(update);\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n", "import {Selection} from \"./index.js\";\n\nexport default function(selection) {\n  if (!(selection instanceof Selection)) throw new Error(\"invalid merge\");\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n", "export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n", "import {Selection} from \"./index.js\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n", "export default function() {\n  return Array.from(this);\n}\n", "export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n", "export default function() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n", "export default function() {\n  return !this.node();\n}\n", "export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n", "import namespace from \"../namespace.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n", "export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n", "import defaultView from \"../window.js\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n", "function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n", "function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n", "function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n", "function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n", "function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n", "function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n", "import creator from \"../creator.js\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n", "import creator from \"../creator.js\";\nimport selector from \"../selector.js\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n", "function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n", "function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n", "export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n", "function contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, options) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n", "import defaultView from \"../window.js\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n", "export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n", "import selection_select from \"./select.js\";\nimport selection_selectAll from \"./selectAll.js\";\nimport selection_selectChild from \"./selectChild.js\";\nimport selection_selectChildren from \"./selectChildren.js\";\nimport selection_filter from \"./filter.js\";\nimport selection_data from \"./data.js\";\nimport selection_enter from \"./enter.js\";\nimport selection_exit from \"./exit.js\";\nimport selection_join from \"./join.js\";\nimport selection_merge from \"./merge.js\";\nimport selection_order from \"./order.js\";\nimport selection_sort from \"./sort.js\";\nimport selection_call from \"./call.js\";\nimport selection_nodes from \"./nodes.js\";\nimport selection_node from \"./node.js\";\nimport selection_size from \"./size.js\";\nimport selection_empty from \"./empty.js\";\nimport selection_each from \"./each.js\";\nimport selection_attr from \"./attr.js\";\nimport selection_style from \"./style.js\";\nimport selection_property from \"./property.js\";\nimport selection_classed from \"./classed.js\";\nimport selection_text from \"./text.js\";\nimport selection_html from \"./html.js\";\nimport selection_raise from \"./raise.js\";\nimport selection_lower from \"./lower.js\";\nimport selection_append from \"./append.js\";\nimport selection_insert from \"./insert.js\";\nimport selection_remove from \"./remove.js\";\nimport selection_clone from \"./clone.js\";\nimport selection_datum from \"./datum.js\";\nimport selection_on from \"./on.js\";\nimport selection_dispatch from \"./dispatch.js\";\nimport selection_iterator from \"./iterator.js\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  selectChild: selection_selectChild,\n  selectChildren: selection_selectChildren,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  selection: selection_selection,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: selection_iterator\n};\n\nexport default selection;\n", "export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n", "import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy: function(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\")\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n      + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\")\n        + (this.h || 0) + \", \"\n        + (this.s || 0) * 100 + \"%, \"\n        + (this.l || 0) * 100 + \"%\"\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n", "export const radians = Math.PI / 180;\nexport const degrees = 180 / Math.PI;\n", "import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n", "export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n", "import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n", "export default x => () => x;\n", "import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n", "import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n", "export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n", "import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n", "export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n", "export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n", "import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n", "import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n", "import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n", "export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n", "var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n", "import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n", "import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n", "import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n", "var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we\u2019ve set an alarm, if we haven\u2019t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n", "import {Timer} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n", "import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n", "import {STARTING, ENDING, ENDED} from \"./transition/schedule.js\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n", "import interrupt from \"../interrupt.js\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n", "import {get, set} from \"./schedule.js\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n", "import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n", "import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n", "import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n", "import {get, init} from \"./schedule.js\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n", "import {get, set} from \"./schedule.js\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n", "import {get, set} from \"./schedule.js\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n", "import {set} from \"./schedule.js\";\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== \"function\") throw new Error;\n    set(this, id).ease = v;\n  };\n}\n\nexport default function(value) {\n  if (typeof value !== \"function\") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n", "import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n", "import {Transition} from \"./index.js\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n", "import {get, set, init} from \"./schedule.js\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n", "function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n", "import {selector} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n", "import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n", "import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n", "import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule.js\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n", "function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n", "import {tweenValue} from \"./tween.js\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n", "function textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(value) {\n  var key = \"text\";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, textTween(value));\n}\n", "import {Transition, newId} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n", "import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we\u2019re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n", "import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr.js\";\nimport transition_attrTween from \"./attrTween.js\";\nimport transition_delay from \"./delay.js\";\nimport transition_duration from \"./duration.js\";\nimport transition_ease from \"./ease.js\";\nimport transition_easeVarying from \"./easeVarying.js\";\nimport transition_filter from \"./filter.js\";\nimport transition_merge from \"./merge.js\";\nimport transition_on from \"./on.js\";\nimport transition_remove from \"./remove.js\";\nimport transition_select from \"./select.js\";\nimport transition_selectAll from \"./selectAll.js\";\nimport transition_selection from \"./selection.js\";\nimport transition_style from \"./style.js\";\nimport transition_styleTween from \"./styleTween.js\";\nimport transition_text from \"./text.js\";\nimport transition_textTween from \"./textTween.js\";\nimport transition_transition from \"./transition.js\";\nimport transition_tween from \"./tween.js\";\nimport transition_end from \"./end.js\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  easeVarying: transition_easeVarying,\n  end: transition_end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n", "export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n", "import {Transition, newId} from \"../transition/index.js\";\nimport schedule from \"../transition/schedule.js\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n", "import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt.js\";\nimport selection_transition from \"./transition.js\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n", "import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {pointer, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport BrushEvent from \"./event.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: \"x\",\n  handles: [\"w\", \"e\"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\n// Like d3.local, but with the name \u201C__brush\u201D rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .on(\"mousedown.brush\", started)\n      .filter(touchable)\n        .on(\"touchstart.brush\", started)\n        .on(\"touchmove.brush\", touchmoved)\n        .on(\"touchend.brush touchcancel.brush\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  brush.move = function(group, selection) {\n    if (group.tween) {\n      group\n          .on(\"start.brush\", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on(\"interrupt.brush end.brush\", function(event) { emitter(this, arguments).end(event); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start().brush().end();\n          });\n    }\n  };\n\n  brush.clear = function(group) {\n    brush.move(group, null);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit(\"start\", event, mode);\n      else this.emit(\"brush\", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit(\"brush\", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    if (type === \"overlay\") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move();\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n      if (keys) view\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move();\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n", "export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, \u00B1Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n", "import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n", "export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n", "export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n", "// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n", "// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n", "import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n", "import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n", "import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n", "export default function(x) {\n  return x;\n}\n", "import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\u00B5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"\u2212\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer \u201Cvalue\u201D part that can be\n        // grouped, and fractional or exponential \u201Csuffix\u201D part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n", "import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n", "import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n", "import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n", "import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n", "export default Math.random;\n", "import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomUniform(source) {\n  function randomUniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return source() * max + min;\n    };\n  }\n\n  randomUniform.source = sourceRandomUniform;\n\n  return randomUniform;\n})(defaultSource);\n", "import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomInt(source) {\n  function randomInt(min, max) {\n    if (arguments.length < 2) max = min, min = 0;\n    min = Math.floor(min);\n    max = Math.floor(max) - min;\n    return function() {\n      return Math.floor(source() * max + min);\n    };\n  }\n\n  randomInt.source = sourceRandomInt;\n\n  return randomInt;\n})(defaultSource);\n", "import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomNormal(source) {\n  function randomNormal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = source() * 2 - 1;\n        y = source() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  randomNormal.source = sourceRandomNormal;\n\n  return randomNormal;\n})(defaultSource);\n", "// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst mul = 0x19660D;\nconst inc = 0x3C6EF35F;\nconst eps = 1 / 0x100000000;\n\nexport default function lcg(seed = Math.random()) {\n  let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;\n  return () => (state = mul * state + inc | 0, eps * (state >>> 0));\n}\n", "export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n", "export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function number(x) {\n  return +x;\n}\n", "import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n", "import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n", "import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n", "export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n", "import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar c = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n}\n", "import colors from \"../colors.js\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n", "export function Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\nTransform.prototype = {\n  constructor: Transform,\n  scale: function(k) {\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n  }\n};\n\nexport var identity = new Transform(1, 0, 0);\n\ntransform.prototype = Transform.prototype;\n\nexport default function transform(node) {\n  while (!node.__zoom) if (!(node = node.parentNode)) return identity;\n  return node.__zoom;\n}\n", "import * as d3 from 'd3'\n\n/**\n * @module utils/MathUtils\n */\n\n/**\n * Generates a random float in [min, max)\n *\n * @param {number} min minimum\n * @param {number} max maximum\n * @returns {number} random float\n */\nexport function randFloat (min = 0, max = 1) {\n  return Math.random() * (max - min) + min\n}\n\n/**\n * Returns a random element from the given array.\n *\n * @param {Array} array an array\n * @returns {any} random element from the array\n */\nexport function choose (array) {\n  const index = d3.randomInt(0, array.length)()\n  return array[index]\n}\n\n/**\n * Shortcut for Math.max(minValue, Math.min(maxValue, value))\n *\n * @param {number} value value\n * @param {number} minValue lower limit\n * @param {number} maxValue upper limit\n * @returns {number} clipped number\n */\nexport function clipValue (value, minValue, maxValue) {\n  return Math.max(minValue, Math.min(maxValue, value))\n}\n\n/**\n * Rounds a number to a given number of decimals\n *\n * @param {number} number a number\n * @param {number} n number of digits\n * @returns {number} rounded number\n */\nexport function roundToNDecimals (number, n) {\n  return +number.toFixed(n)\n}\n\n/**\n * Swaps two numbers if the first is larger than the second\n *\n * @param {number} x a number\n * @param {number} y a number\n * @returns {number[]} array with the smaller number first\n */\nexport function swapSoSmallerFirst (x, y) {\n  if (x <= y) {\n    return [x, y]\n  }\n  return [y, x]\n}\n\n/**\n * Counts the number of 1s in a binary number, e.g 100101 has 3 1s\n *\n * @see https://prismoskills.appspot.com/lessons/Bitwise_Operators/Count_ones_in_an_integer.jsp\n * @param {number} integer an integer number\n * @returns {number} number of 1s\n */\nexport function countOnesOfBinary (integer) {\n  let count = 0\n  while (integer !== 0) {\n    // eslint-disable-next-line no-bitwise\n    integer = integer & (integer - 1)\n    count++\n  }\n  return count\n}\n\n/**\n * Local maxima are found by looking at entries that are higher than their left\n * and right neighbor, or higher than their only neighbor if they are at the\n * boundary.\n * IMPORTANT: does not find plateaus\n *\n * @param {number[]} array array\n * @returns {number[]} array with indices of maxima\n */\nexport function findLocalMaxima (array) {\n  if (array.length <= 1) { return [] }\n  if (array.length === 2) {\n    if (array[0] > array[1]) { return [0] }\n    if (array[1] > array[0]) { return [1] }\n    return []\n  }\n  // General case with 3 or more\n  const maximaIndices = []\n  if (array[0] > array[1]) {\n    maximaIndices.push(0)\n  }\n  let last = array[0]\n  let current = array[1]\n  for (let index = 1; index < array.length - 1; index++) {\n    const next = array[index + 1]\n    if (current > last && current > next) {\n      maximaIndices.push(index)\n    }\n    last = current\n    current = next\n  }\n  const lastIndex = array.length - 1\n  if (array[lastIndex] > array[lastIndex - 1]) {\n    maximaIndices.push(array.length - 1)\n  }\n  return maximaIndices\n}\n", "import { min } from 'd3'\r\nimport Note from './Note.js'\r\nimport GuitarNote from './GuitarNote.js'\r\nimport { clipValue } from '../utils/MathUtils.js'\r\n\r\n/**\r\n * This class represents an array of note objects.\r\n * It can be used to simplify operations on a track.\r\n *\r\n * @example\r\n *   const notes = [\r\n *       // Some Note objects\r\n *   ];\r\n *   const noteArr = new NoteArray(notes)\r\n *       // Add more notes (all notes will be sorted by time by default after this)\r\n *       .addNotes([])\r\n *       // Scale all note's sart and end time to make a track slower or faster\r\n *       .scaleTime(0.5)\r\n *       // Do more ...\r\n *       // This class also mirrors many functions from the Array class\r\n *       .sort(sortFunction).filter(filterFunction).map(mapFunction).slice(0, 20)\r\n *\r\n *   // Get Note objects back in a simple Array\r\n *   const transformedNotes = noteArr.getNotes();\r\n *   // [Note, Note, Note, ...]\r\n *\r\n *   // Or use an iterator\r\n *   for (const note of noteArr) {\r\n *       console.log(note);\r\n *   }\r\n */\r\nclass NoteArray {\r\n  /**\r\n       * Creates a new NoteArray,\r\n       * will make a copy of the passed array and cast all notes\r\n       *\r\n       * @param {Note[]} [notes=[]] notes\r\n       * @param {boolean} [reUseNotes=false] if true, will directly use the passed notes.\r\n       *      This can be dangerous if you do not want them to change.\r\n       */\r\n  constructor (notes = [], reUseNotes = false) {\r\n    if (reUseNotes) {\r\n      this._notes = notes\r\n    } else {\r\n      // Parse notes\r\n      this._notes = notes.map(d => {\r\n        if (d.string !== undefined && d.fret !== undefined) {\r\n          return GuitarNote.from(d)\r\n        }\r\n        return Note.from(d)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n       * Returns a simple array with all Note objects.\r\n       *\r\n       * @returns {Note[]} array with Note objects\r\n       * @example <caption>Getting notes as simple Note[]</caption>\r\n       *      const na = new NoteArray(someNotes);\r\n       *      const notes = na.getNotes();\r\n       * @example <caption>Using an iterator instead</caption>\r\n       *      const na = new NoteArray(someNotes);\r\n       *      for (const note of na) {\r\n       *          console.log(note);\r\n       *      }\r\n       *      // Or copy all Notes to an array with\r\n       *      const array = [...na];\r\n       */\r\n  getNotes () {\r\n    return this._notes\r\n  }\r\n\r\n  /**\r\n       * Overwrite the NoteArray's notes with another Array of Notes\r\n       *\r\n       * @param {Note[]} notes notes\r\n       * @returns {NoteArray} itself\r\n       */\r\n  setNotes (notes) {\r\n    this._notes = notes\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Makes this class iterable\r\n       *\r\n       * @yields {Note} note\r\n       * @example <caption>Using an iterator for NoteArray</caption>\r\n       *      const na = new NoteArray(someNotes);\r\n       *      for (const note of na) {\r\n       *          console.log(note);\r\n       *      }\r\n       */\r\n  * [Symbol.iterator] () {\r\n    for (const note of this._notes) {\r\n      yield note\r\n    }\r\n  }\r\n\r\n  /**\r\n       * Appends notes to this NoteArray\r\n       *\r\n       * @param {Note[]} notes notes\r\n       * @param {boolean} sort iff ture, sorts notes by start timeafter adding\r\n       *      the new ones (default:true)\r\n       * @returns {NoteArray} itself\r\n       */\r\n  addNotes (notes, sort = true) {\r\n    this._notes = [...this._notes, ...notes]\r\n    if (sort) {\r\n      this.sortByTime()\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Adds the notes from another NoteArray to this NoteArray\r\n       * IMPORTANT: this does not change the notes or sort them!\r\n       * Take a look at NoteArray.append() if you want to extend\r\n       * a track at its end.\r\n       *\r\n       * @param {NoteArray} noteArray another NoteArray\r\n       * @returns {NoteArray} itself\r\n       */\r\n  concat (noteArray) {\r\n    this._notes = [...this._notes, ...noteArray._notes]\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Appends notes to the end of this NoteArray, after shifting them by its\r\n       * duration. Set gap to something != 0 to create a gap or overlap.\r\n       *\r\n       * @param {NoteArray} noteArray another NoteArray\r\n       * @param {number} gap in seconds between the two parts\r\n       * @returns {NoteArray} itself\r\n       */\r\n  append (noteArray, gap = 0) {\r\n    const duration = this.getDuration()\r\n    const clone = noteArray.clone()\r\n    clone.shiftTime(duration + gap)\r\n    this._notes = [...this._notes, ...clone._notes]\r\n    this.sortByTime()\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Repeats the notes of this array by concatenating a time-shifted copy\r\n       *\r\n       * @param {number} times number of times to repeat it\r\n       * @returns {NoteArray} a new NoteArray with the repeated note sequence\r\n       */\r\n  repeat (times) {\r\n    const result = this.clone()\r\n    if (times < 1) {\r\n      return new NoteArray()\r\n    }\r\n    if (times === 1) {\r\n      return result\r\n    }\r\n    const copy = this.clone()\r\n    const duration = this.getDuration()\r\n    for (let index = 1; index < times; index++) {\r\n      // Shift notes in time\r\n      copy.shiftTime(duration)\r\n      // Result is a NoteArray so use .concat\r\n      result.concat(copy)\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n       * Returns the number of Note objects in this NoteArray\r\n       *\r\n       * @returns {number} note count\r\n       */\r\n  length () {\r\n    return this._notes.length\r\n  }\r\n\r\n  /**\r\n       * Returns the start time of the earliest note in this NoteArray\r\n       *\r\n       * @returns {number} start time\r\n       */\r\n  getStartTime () {\r\n    return min(this._notes, d => d.start)\r\n  }\r\n\r\n  /**\r\n       * Returns the duration of this note array in seconds from 0 to the end of\r\n       * the latest note.\r\n       *\r\n       * @returns {number} duration\r\n       */\r\n  getDuration () {\r\n    let duration = 0\r\n    for (const note of this._notes) {\r\n      const noteEnd = note.end === null ? note.start : note.end\r\n      if (noteEnd > duration) {\r\n        duration = noteEnd\r\n      }\r\n    }\r\n    return duration\r\n  }\r\n\r\n  /**\r\n       * Scales the time of each note by factor\r\n       *\r\n       * @param {number} factor factor\r\n       * @returns {NoteArray} itself\r\n       */\r\n  scaleTime (factor) {\r\n    this._notes = this._notes.map(n => n.scaleTime(factor))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Adds the speicifed number of seconds to each note\r\n       *\r\n       * @param {number} addedSeconds time to add in seconds\r\n       * @returns {NoteArray} itself\r\n       */\r\n  shiftTime (addedSeconds) {\r\n    this._notes = this._notes.map(n => n.shiftTime(addedSeconds))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Moves all notes s.t. the first starts at <start>\r\n       * Will sort the notes by start time.\r\n       *\r\n       * @param {number} startTime the new start time for the earliest note\r\n       * @returns {NoteArray} itself\r\n       */\r\n  shiftToStartAt (startTime) {\r\n    this.sortByTime()\r\n    const firstNoteStart = this._notes[0].start\r\n    const offset = firstNoteStart - startTime\r\n    this._notes.forEach(n => {\r\n      n.start -= offset\r\n      if (n.end !== null) {\r\n        n.end -= offset\r\n      }\r\n    })\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Similar to Array.forEach\r\n       *\r\n       * @param {Function} func a function\r\n       * @returns {NoteArray} this\r\n       */\r\n  forEach (func) {\r\n    this._notes.forEach(\r\n      (element, index, array) => func(element, index, array)\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Sorts the notes\r\n       *\r\n       * @param {Function} sortFunction sort function, e.g. (a, b)=>a.start-b.start\r\n       * @returns {NoteArray} itself\r\n       */\r\n  sort (sortFunction) {\r\n    this._notes = this._notes.sort(sortFunction)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Sorts the notes by start time\r\n       *\r\n       * @returns {NoteArray} itself\r\n       */\r\n  sortByTime () {\r\n    this._notes = this._notes.sort((a, b) => a.start - b.start)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Maps the notes using some mapping function\r\n       *\r\n       * @param {Function} mapFunction mapping function with same signature as\r\n       *      Array.map()\r\n       * @returns {NoteArray} itself\r\n       */\r\n  map (mapFunction) {\r\n    this._notes = this._notes.map(\r\n      (element, index, array) => mapFunction(element, index, array)\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Slices the notes by index, like Array.slice()\r\n       *\r\n       * @param {number} start start index\r\n       * @param {number} end end index\r\n       * @returns {NoteArray} itself\r\n       */\r\n  slice (start, end) {\r\n    this._notes = this._notes.slice(start, end)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Slices the notes by time.\r\n       * The modes 'end' and 'contained' will remove all notes with end === null!\r\n       * Notes will not be changed, e.g. start time will remain the same.\r\n       *\r\n       * @param {number} startTime start of the filter range in seconds\r\n       * @param {number} endTime end of the filter range in seconds (exclusive)\r\n       * @param {string} [mode=contained] controls which note time to consider,\r\n       *      one of:\r\n       *      - start: note.start must be inside range\r\n       *      - end: note.end must be inside range\r\n       *      - contained: BOTH note.start and note.end must be inside range\r\n       *      - touched: EITHER start or end (or both) must be inside range)\r\n       *      - touched-included: like touched, but also includes notes where\r\n       *          neither start nor end inside range, but range is completely\r\n       *          inside the note\r\n       *      (contained is default)\r\n       * @returns {NoteArray} itself\r\n       * @throws {'Invalid slicing mode'} When slicing mode is not one of the\r\n       *      above values\r\n       */\r\n  sliceTime (startTime, endTime, mode = 'contained') {\r\n    const start = startTime\r\n    const end = endTime\r\n    let filterFunc\r\n    if (mode === 'start') {\r\n      filterFunc = n => n.start >= start && n.start < end\r\n    } else if (mode === 'end') {\r\n      filterFunc = n => n.end !== null && n.end >= start && n.end < end\r\n    } else if (mode === 'contained') {\r\n      filterFunc = n => n.end !== null && n.start >= start && n.end < end\r\n    } else if (mode === 'touched') {\r\n      filterFunc = n =>\r\n        (n.start >= start && n.start <= end) ||\r\n                (n.end !== null && n.end >= start && n.end <= end)\r\n    } else if (mode === 'touched-included') {\r\n      filterFunc = n =>\r\n      // like touched\r\n        (n.start >= start && n.start <= end) ||\r\n                (n.end !== null && n.end >= start && n.end <= end) ||\r\n                // filter range inside note range\r\n                (n.end !== null && n.start <= start && n.end >= end)\r\n    } else {\r\n      throw new Error('Invalid slicing mode')\r\n    }\r\n    this._notes = this._notes.filter(filterFunc)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Slices this NoteArray into slices by the given times. Will not return\r\n       * NoteArrays but simple Note[][], where each item contains all notes of one\r\n       * time slice. Do not include 0, it will be assumed as first time to slice.\r\n       * To make sure notes are not contained twice in different slices use the\r\n       * mode 'start'.\r\n       *\r\n       * @param {number[]} times points of time at which to slice (in seconds)\r\n       * @param {string} mode see NoteArray.sliceTime()\r\n       * @returns {Note[][]} time slices\r\n       * @param {boolean} [reUseNotes=false] if true, will not clone notes.\r\n       *      This can be dangerous if you do not want them to change.\r\n       * @example\r\n       *      // Slice into 1 second slices\r\n       *      const slices = noteArray.sliceAtTimes([1, 2, 3], 'start)\r\n       */\r\n  sliceAtTimes (times, mode, reUseNotes = false) {\r\n    if (times.length === 0) {\r\n      return [this._notes]\r\n    }\r\n    // Make sure notes at the end are also in a slice\r\n    const duration = this.getDuration()\r\n    if (Math.max(...times) <= duration) {\r\n      times.push(duration + 1)\r\n    }\r\n    const slices = []\r\n    let lastTime = 0\r\n    for (const time of times) {\r\n      slices.push(\r\n        // this.clone()\r\n        new NoteArray(this._notes, reUseNotes)\r\n          .sliceTime(lastTime, time, mode)\r\n          .getNotes()\r\n      )\r\n      lastTime = time\r\n    }\r\n    return slices\r\n  }\r\n\r\n  /**\r\n       * Segments the NoteArray into smaller ones at times where no note occurs\r\n       * for a specified amount of time.\r\n       * This method is useful for segmenting a recording session into separate\r\n       * songs, riffs, licks, ...\r\n       *\r\n       * @param {number} gapDuration duration of seconds for a gap to be used as\r\n       *      segmenting time\r\n       * @param {'start-start'|'end-start'} mode gaps can either be considered as\r\n       *      the maximum time between two note's starts or the end of the first\r\n       *      and the start of the second note\r\n       * @returns {Note[][]} segments\r\n       */\r\n  segmentAtGaps (gapDuration, mode) {\r\n    if (this._notes.length < 2) {\r\n      return [this._notes]\r\n    }\r\n    if (mode === 'start-start') {\r\n      const notes = this.clone().sortByTime().getNotes()\r\n      const cuts = []\r\n      for (let index = 1; index < notes.length; index++) {\r\n        if (notes[index].start - notes[index - 1].start >= gapDuration) {\r\n          cuts.push(notes[index].start)\r\n        }\r\n      }\r\n      return this.sliceAtTimes(cuts, 'start')\r\n    } else {\r\n      // Get blocks of occupied time in the NoteArray's duration\r\n      const occupiedTimes = []\r\n      // TODO: can probably be made faster in the future\r\n      for (const note of this._notes) {\r\n        const { start, end } = note\r\n        // Check for collision\r\n        const collisions = []\r\n        for (let index = 0; index < occupiedTimes.length; index++) {\r\n          const [s, e] = occupiedTimes[index]\r\n          if (\r\n            (s >= start && s <= end) ||\r\n                        (e >= start && e <= end)\r\n          ) {\r\n            occupiedTimes.splice(index, 1)\r\n            collisions.push([s, e])\r\n          }\r\n        }\r\n        if (collisions.length === 0) {\r\n          // Just add note time span\r\n          occupiedTimes.push([start, end])\r\n        } else {\r\n          // Merge\r\n          const newStart = Math.min(start, ...collisions.map(d => d[0]))\r\n          const newEnd = Math.max(end, ...collisions.map(d => d[1]))\r\n          occupiedTimes.push([newStart, newEnd])\r\n        }\r\n      }\r\n      // Gaps are just between two following blocks of occupied time\r\n      if (occupiedTimes.length === 1) {\r\n        // One block, so no gaps\r\n        return [this._notes]\r\n      }\r\n      const cuts = []\r\n      for (let index = 1; index < occupiedTimes.length; index++) {\r\n        const currentStart = occupiedTimes[index][0]\r\n        const lastEnd = occupiedTimes[index - 1][1]\r\n        if (currentStart - lastEnd >= gapDuration) {\r\n          cuts.push(currentStart)\r\n        }\r\n      }\r\n      return this.sliceAtTimes(cuts, 'start')\r\n    }\r\n  }\r\n\r\n  /**\r\n       * Segments the NoteArray into Arrays of Notes at given indices\r\n       *\r\n       * @param {number[]} indices indices\r\n       * @returns {Note[][]} segments\r\n       * @example <caption>Get notes in partions of 4</caption>\r\n       *      const noteGroups = myNoteArray.segmentAtIndices([4, 8, 12, 16, 20]);\r\n       *      // noteGroups = [\r\n       *      //     Array(4),\r\n       *      //     Array(4),\r\n       *      //     Array(4),\r\n       *      // ]\r\n       */\r\n  segmentAtIndices (indices) {\r\n    const segments = []\r\n    let lastIndex = 0\r\n    for (const index of indices) {\r\n      segments.push(this._notes.slice(lastIndex, index))\r\n      lastIndex = index\r\n    }\r\n    return segments\r\n  }\r\n\r\n  /**\r\n       * Filters the NoteArray like you would filter via Array.filter().\r\n       *\r\n       * @param {Function} filterFunction filter function, same signature as\r\n       *      Array.filter()\r\n       * @returns {NoteArray} itself\r\n       * @example\r\n       *      // Only keep notes longer than 1 second\r\n       *      const filtered = noteArray.filter(note=>note.getDuration()>1);\r\n       */\r\n  filter (filterFunction) {\r\n    this._notes = this._notes.filter((element, index, array) => filterFunction(element, index, array))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Filters by pitch, keeping only pitches specified in <pitches>\r\n       *\r\n       * @param {number[]|Set<number>} pitches array or Set of pitches to keep\r\n       * @returns {NoteArray} itself\r\n       */\r\n  filterPitches (pitches) {\r\n    if (!(pitches instanceof Set)) {\r\n      pitches = new Set(pitches)\r\n    }\r\n    this._notes = this._notes.filter(n => pitches.has(n.pitch))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Transposes each note by <steps> semitones, will clip pitches to [0, 127]\r\n       *\r\n       * @param {number} steps number of semitones to transpose, can be negative\r\n       * @returns {NoteArray} itself\r\n       */\r\n  transpose (steps) {\r\n    this._notes = this._notes.map(n => Note.from({\r\n      ...n,\r\n      pitch: clipValue(n.pitch + steps, 0, 127)\r\n    }))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Will set the octave of all notes to -1.\r\n       * This might cause two notes to exist at the same time and pitch!\r\n       *\r\n       * @returns {NoteArray} itself\r\n       */\r\n  removeOctaves () {\r\n    this._notes = this._notes.map(note => Note.from({\r\n      ...note,\r\n      pitch: note.pitch % 12\r\n    }))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Reverses the note array, such that it can be played backwards.\r\n       *\r\n       * @returns {NoteArray} itself\r\n       */\r\n  reverse () {\r\n    // Update note start and end times\r\n    const duration = this.getDuration()\r\n    this._notes = this._notes.map(n => {\r\n      const newNote = n.clone()\r\n      newNote.start = duration - n.end\r\n      newNote.end = newNote.start + n.getDuration()\r\n      return newNote\r\n    })\r\n    // Sort by time\r\n    this.sortByTime()\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Returns true if this NoteArray and otherNoteArray have equal attributes.\r\n       *\r\n       * @param {NoteArray} otherNoteArray another NoteArray\r\n       * @returns {boolean} true if equal\r\n       */\r\n  equals (otherNoteArray) {\r\n    if (!(otherNoteArray instanceof NoteArray)) {\r\n      return false\r\n    }\r\n    const notes = otherNoteArray.getNotes()\r\n    if (this._notes.length !== notes.length) {\r\n      return false\r\n    }\r\n    for (const [index, note] of notes.entries()) {\r\n      if (!this._notes[index].equals(note)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n       * Deep clone, all contained notes are cloned as well.\r\n       *\r\n       * @returns {NoteArray} clone\r\n       */\r\n  clone () {\r\n    return new NoteArray(this._notes)\r\n  }\r\n}\r\n\r\nexport default NoteArray\r\n", "/**\r\n * @module utils/ArrayUtils\r\n */\r\n\r\nimport * as d3 from 'd3'\r\n\r\n/**\r\n * Shallow compares two arrays\r\n *\r\n * @param {Array} a an array\r\n * @param {Array} b another array\r\n * @returns {boolean} true iff equal\r\n */\r\nexport function arrayShallowEquals (a, b) {\r\n  if (a.length !== b.length) {\r\n    return false\r\n  }\r\n  for (const [index, element] of a.entries()) {\r\n    if (element !== b[index]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Checks if two arrays contain the same elements,\r\n * ignoring their ordering in each array.\r\n *\r\n * @param {Array} a an array\r\n * @param {Array} b another array\r\n * @param {boolean} checkLength also checks if arrays have the same length\r\n * @returns {boolean} true iff arrays contain same elements\r\n */\r\nexport function arrayHasSameElements (a, b, checkLength = true) {\r\n  if (checkLength && a.length !== b.length) {\r\n    return false\r\n  }\r\n  const setA = new Set(a)\r\n  const setB = new Set(b)\r\n  for (const element of setA) {\r\n    if (!setB.has(element)) {\r\n      return false\r\n    }\r\n  }\r\n  for (const element of setB) {\r\n    if (!setA.has(element)) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Jaccard index calulates the similarity of the sets as the size of the set\r\n * interaction divided by the size of the set union:\r\n * jackard_index = |intersection| / |union|\r\n *\r\n * @see https://en.wikipedia.org/wiki/Jaccard_index\r\n * @param {number[]} set1 set 1\r\n * @param {number[]} set2 set 2\r\n * @returns {number} similarity in [0, 1]\r\n */\r\nexport function jaccardIndex (set1, set2) {\r\n  if (set1.length === 0 && set2.length === 0) {\r\n    return 1\r\n  }\r\n  return d3.intersection(set1, set2).size / d3.union(set1, set2).size\r\n}\r\n\r\n/**\r\n * Kendall Tau distance\r\n *\r\n * @see https://en.wikipedia.org/wiki/Kendall_tau_distance\r\n * @todo naive implementation, can be sped up with hints on Wikipedia,\r\n *    see also https://stackoverflow.com/questions/6523712/calculating-the-number-of-inversions-in-a-permutation/6523781#6523781\r\n * @param {number[]} ranking1 a ranking, i.e. for each entry the rank\r\n * @param {number[]} ranking2 a ranking, i.e. for each entry the rank\r\n * @param {boolean} [normalize=true] normalize to [0, 1]?\r\n * @returns {number} Kendall tau distance\r\n * @throws {'Ranking length must be equal'} if rankings don't have euqal length\r\n */\r\nexport function kendallTau (ranking1, ranking2, normalize = true) {\r\n  if (ranking1.length !== ranking2.length) {\r\n    throw new Error('Ranking length must be equal')\r\n  }\r\n  if (ranking1.length === 0) {\r\n    return 0\r\n  }\r\n  let inversions = 0\r\n  const n = ranking1.length\r\n  for (let a = 0; a < n; a++) {\r\n    for (let b = a + 1; b < n; b++) {\r\n      const r1smaller = ranking1[a] < ranking1[b]\r\n      const r2smaller = ranking2[a] < ranking2[b]\r\n      if (r1smaller !== r2smaller) {\r\n        inversions++\r\n      }\r\n    }\r\n  }\r\n  if (normalize) {\r\n    inversions /= n * (n - 1) / 2\r\n  }\r\n  return inversions\r\n}\r\n\r\n/**\r\n * Removes duplicates from an Array by converting to a Set and back\r\n *\r\n * @param {Array} array an array\r\n * @returns {Array} array without duplicates\r\n */\r\nexport function removeDuplicates (array) {\r\n  return [...new Set(array)]\r\n}\r\n\r\n/**\r\n * Checks whether the array a contains the array b, i.e. whether the first\r\n * b.length elements are the same.\r\n *\r\n * @todo rename to arrayStartsWithArray\r\n * @param {Array} a an array\r\n * @param {Array} b a shorter array\r\n * @returns {boolean} true iff a contains b\r\n */\r\nexport function arrayContainsArray (a, b) {\r\n  if (a.length < b.length) {\r\n    return false\r\n  }\r\n  for (const [index, element] of b.entries()) {\r\n    if (a[index] !== element) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Compares a slice of a with a slice of b.\r\n * Slices start at startA and startB and have the same length\r\n *\r\n * @param {Array} a an Array\r\n * @param {Array} b an Array\r\n * @param {number} length slice length\r\n * @param {number} [startA=0] start index for the slice in a to compare\r\n * @param {number} [startB=0] start index for the slice in b to compare\r\n * @returns {boolean} true if slices are equal\r\n * @throws {'undefined length'} length is undefined\r\n * @throws {'start < 0'} when start is negative\r\n */\r\nexport function arraySlicesEqual (a, b, length, startA = 0, startB = 0) {\r\n  if (length === null || length === undefined) {\r\n    throw new Error('undefined length')\r\n  }\r\n  if (startA < 0 || startB < 0) {\r\n    throw new Error('start < 0')\r\n  }\r\n  if (a.length < startA + length || b.length < startB + length) {\r\n    // Array(s) too small for slicing with this start and length\r\n    return false\r\n  }\r\n  for (let offset = 0; offset < length; offset++) {\r\n    if (a[startA + offset] !== b[startB + offset]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Finds an array in another array, only shallow comparison\r\n *\r\n * @param {Array} haystack array to search in\r\n * @param {Array} needle array to search for\r\n * @param {number} [startIndex=0] index from which to start searching\r\n * @returns {number} index or -1 when not found\r\n */\r\nexport function arrayIndexOf (haystack, needle, startIndex = 0) {\r\n  if (needle.length === 0) { return -1 }\r\n  for (\r\n    let index = startIndex;\r\n    index < haystack.length - needle.length + 1;\r\n    ++index\r\n  ) {\r\n    if (haystack[index] === needle[0]) {\r\n      let found = true\r\n      for (let offset = 1; offset < needle.length; ++offset) {\r\n        if (haystack[index + offset] !== needle[offset]) {\r\n          found = false\r\n          break\r\n        }\r\n      }\r\n      if (found) {\r\n        return index\r\n      }\r\n    }\r\n  }\r\n  return -1\r\n}\r\n\r\n/**\r\n * Returns the maximum numerical value from an array of arrays with arbitrary\r\n * depth and structure.\r\n *\r\n * @param {Array} array array\r\n * @returns {number} maximum value\r\n */\r\nexport function getArrayMax (array) {\r\n  return d3.max(array.flat(Number.POSITIVE_INFINITY))\r\n}\r\n\r\n/**\r\n * Normalizes by dividing all entries by the maximum.\r\n * Only for positive values!\r\n *\r\n * @param {Array} array nD array with arbitrary depth and structure\r\n * @returns {Array} normalized array\r\n */\r\nexport function normalizeNdArray (array) {\r\n  const max = d3.max(array.flat(Number.POSITIVE_INFINITY))\r\n  const normalize = (array_, maxValue) =>\r\n    array_.map((d) => {\r\n      return d.length !== undefined ? normalize(d, maxValue) : d / maxValue\r\n    })\r\n  return normalize(array, max)\r\n}\r\n\r\n/**\r\n * Assumes same shape of matrices.\r\n *\r\n * @param {number[][]} matrixA a matrix\r\n * @param {number[][]} matrixB a matrix\r\n * @returns {number} Euclidean distance of the two matrices\r\n */\r\nexport function euclideanDistance (matrixA, matrixB) {\r\n  const valuesA = matrixA.flat()\r\n  const valuesB = matrixB.flat()\r\n  const diffs = valuesA.map((d, i) => d - valuesB[i])\r\n  return Math.hypot(...diffs)\r\n}\r\n\r\n/**\r\n * Stringifies a 2D array / matrix for logging onto the console.\r\n *\r\n * @param {any[][]} matrix the matrix\r\n * @param {string} colSeparator column separator\r\n * @param {string} rowSeparator row separator\r\n * @param {Function} formatter formatting for each element\r\n * @returns {string} stringified matrix\r\n */\r\nexport function formatMatrix (matrix, colSeparator = ', ', rowSeparator = '\\n', formatter) {\r\n  if (!matrix || matrix.length === 0) { return '' }\r\n  if (formatter) {\r\n    matrix = matrix.map(row => row.map(value => formatter(value)))\r\n  }\r\n  return matrix.map(row => row.join(colSeparator)).join(rowSeparator)\r\n}\r\n\r\n/**\r\n * Returns the value in array that is closest to value.\r\n * Array MUST be sorted ascending.\r\n *\r\n * @param {Array} array array\r\n * @param {*} value value\r\n * @param {Function} accessor accessor\r\n * @returns {*} value in array closest to value\r\n */\r\nexport function binarySearch (array, value, accessor = d => d) {\r\n  // Handle short arrays\r\n  if (array.length <= 3) {\r\n    let closest = null\r\n    let diff = Number.POSITIVE_INFINITY\r\n    for (const element of array) {\r\n      const value_ = accessor(element)\r\n      const diff2 = Math.abs(value - value_)\r\n      if (diff2 < diff) {\r\n        closest = element\r\n        diff = diff2\r\n      }\r\n    }\r\n    return closest\r\n  }\r\n  // Split longer array in two for binary search\r\n  const pivotPosition = Math.floor(array.length / 2)\r\n  const pivotElement = array[pivotPosition]\r\n  const pivotValue = accessor(pivotElement)\r\n  if (value === pivotValue) {\r\n    return pivotElement\r\n  }\r\n  if (value < pivotValue) {\r\n    return binarySearch(array.slice(0, pivotPosition + 1), value, accessor)\r\n  }\r\n  if (value > pivotValue) {\r\n    return binarySearch(array.slice(pivotPosition - 1), value, accessor)\r\n  }\r\n}\r\n\r\n/**\r\n * Finds streaks of values in an array.\r\n *\r\n * @param {Array} values array\r\n * @param {Function} accessor value to compare\r\n * @param {Function} equality comparator for equality of two values\r\n * @returns {object[]} {startIndex, endIndex, length}[]\r\n * @example\r\n *   const arr = [1, 1, 2, 3, 3, 3];\r\n *   const streaks = findStreaks(arr);\r\n */\r\nexport function findStreaks (\r\n  values,\r\n  accessor = (d) => d,\r\n  equality = (a, b) => a === b\r\n) {\r\n  let startIndex = 0\r\n  const result = []\r\n  let startValue = accessor(values[0])\r\n  for (const [index, value] of values.entries()) {\r\n    const v = accessor(value)\r\n    if (!equality(startValue, v)) {\r\n      result.push({\r\n        startIndex,\r\n        endIndex: index - 1,\r\n        length: index - startIndex\r\n      })\r\n      startIndex = index\r\n      startValue = v\r\n    }\r\n  }\r\n  // Finish last streak\r\n  if (values.length > 0) {\r\n    result.push({\r\n      startIndex,\r\n      endIndex: values.length - 1,\r\n      length: values.length - startIndex\r\n    })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * For each element in a sequence, finds the lowest index where an equal element\r\n * occurs.\r\n *\r\n * @param {Array} sequence an Array\r\n * @param {Function} equals euqality function\r\n * @returns {number[]} result\r\n */\r\nexport function findRepeatedIndices (sequence, equals = (a, b) => a === b) {\r\n  return sequence.map((element) => {\r\n    for (const [index2, element2] of sequence.entries()) {\r\n      if (equals(element, element2)) {\r\n        return index2\r\n      }\r\n    }\r\n    return null\r\n  })\r\n}\r\n", "import NoteArray from './NoteArray.js'\r\nimport { arrayShallowEquals } from '../utils/ArrayUtils.js'\r\n\r\n/**\r\n * Class for storing recorded notes alongside meta information.\r\n */\r\nclass Recording extends NoteArray {\r\n  /**\r\n     * Creates a new Recording\r\n     *\r\n     * @param {string} name name if the song\r\n     * @param {Date} date date of the recording\r\n     * @param {Note[]} notes array of Note objects\r\n     * @param {number} [speed=1] relative speed compared to ground truth,\r\n     *      e.g. 0.5 for half as fast\r\n     * @param {number} [selectedTrack=0] track number of the ground truth to which\r\n     *      this recording belongs\r\n     * @param {number[]|null} [timeSelection=null] time selection of the ground\r\n     *      truth to which this recording belongs, or null if full duration\r\n     * @param {string} [comment=''] a free-text comment for the user to annotate\r\n     *      the recording\r\n     */\r\n  constructor (name, date, notes, speed = 1, selectedTrack = 0, timeSelection = null, comment = '') {\r\n    super(notes)\r\n    this.name = name\r\n    this.date = date\r\n    // Save formatted date for faster access\r\n    this.dateString = date.toISOString()\r\n      .slice(0, 19)\r\n      .replace('T', ' ')\r\n    this.speed = +speed\r\n    this.selectedTrack = +selectedTrack\r\n    this.timeSelection = timeSelection\r\n    this.comment = comment\r\n    this.sortByTime()\r\n  }\r\n\r\n  /**\r\n     * Returns a copy of the Note object\r\n     *\r\n     * @returns {Recording} new recording\r\n     */\r\n  clone () {\r\n    return new Recording(\r\n      this.name,\r\n      this.date,\r\n      this.getNotes().map(d => d.clone()),\r\n      this.speed,\r\n      this.selectedTrack,\r\n      this.timeSelection === null ? null : [...this.timeSelection],\r\n      this.comment\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Returns true if this Recording and otherRecording have equal attributes.\r\n     *\r\n     * @param {Recording} otherRecording another Recording\r\n     * @returns {boolean} true if equal\r\n     */\r\n  equals (otherRecording) {\r\n    if (!(otherRecording instanceof Recording)) { return false }\r\n    if (this.name !== otherRecording.name) { return false }\r\n    if (this.date.getTime() !== otherRecording.date.getTime()) { return false }\r\n    if (this.speed !== otherRecording.speed) { return false }\r\n    if (this.selectedTrack !== otherRecording.selectedTrack) { return false }\r\n    if (this.timeSelection !== otherRecording.timeSelection) {\r\n      if (this.timeSelection === null || otherRecording.timeSelection === null) {\r\n        return false\r\n      }\r\n      if (!arrayShallowEquals(this.timeSelection, otherRecording.timeSelection)) {\r\n        return false\r\n      }\r\n    }\r\n    // Below is the same as NoteArray\r\n    const notes1 = this.getNotes()\r\n    const notes2 = otherRecording.getNotes()\r\n    if (notes1.length !== notes2.length) {\r\n      return false\r\n    }\r\n    for (const [index, element] of notes1.entries()) {\r\n      if (!element.equals(notes2[index])) {\r\n        return false\r\n      }\r\n    }\r\n    if (this.comment !== otherRecording.comment) { return false }\r\n    return true\r\n  }\r\n\r\n  /**\r\n     * Turns the recoring into a simple object with the same properties\r\n     *\r\n     * @returns {object} simple object representation of the recording\r\n     */\r\n  toSimpleObject () {\r\n    return {\r\n      name: this.name,\r\n      date: this.date,\r\n      notes: this.getNotes(),\r\n      speed: this.speed,\r\n      selectedTrack: this.selectedTrack,\r\n      timeSelection: this.timeSelection,\r\n      comment: this.comment\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Creates a Note object from an object via destructuring\r\n     *\r\n     * @param {object} object object with at least {name, date, notes, speed}\r\n     * @returns {Recording} new note\r\n     * @throws {Error} when name, date, or notes are missing\r\n     */\r\n  static from (object) {\r\n    let { name, date, notes } = object\r\n    // Check for undefined\r\n    const values = [name, date, notes]\r\n    const names = ['name', 'date', 'notes']\r\n    for (const [index, value] of values.entries()) {\r\n      if (value === undefined || value === null) {\r\n        throw new Error(`Cannot create Recording with undefined ${names[index]}`)\r\n      }\r\n    }\r\n    // Parse date if it is a string\r\n    if (typeof (date) === 'string') {\r\n      date = new Date(Date.parse(date))\r\n    }\r\n    const { speed, selectedTrack, timeSelection, comment } = object\r\n    return new Recording(\r\n      name,\r\n      date,\r\n      notes,\r\n      speed,\r\n      selectedTrack,\r\n      timeSelection,\r\n      comment\r\n    )\r\n  }\r\n}\r\n\r\nexport default Recording\r\n", "import * as midiParser from 'midi-parser-js'\r\nimport Note from './Note.js'\r\nimport { preprocessMusicXmlData } from '../fileFormats/MusicXmlParser.js'\r\nimport { preprocessMidiFileData } from '../fileFormats/MidiParser.js'\r\nimport NoteArray from './NoteArray.js'\r\nimport GuitarNote from './GuitarNote.js'\r\n\r\n/**\r\n * Represents a parsed MIDI or MusicXML file in a uniform format.\r\n */\r\nclass MusicPiece {\r\n  /**\r\n     * Do not use this constructor, but the static methods MusicPiece.fromMidi\r\n     * and MusicPiece.fromMusicXml instead.\r\n     *\r\n     * @param {string} name name (e.g. file name or piece name)\r\n     * @param {TempoDefinition[]} tempos tempos\r\n     * @param {TimeSignature[]} timeSignatures time signatures\r\n     * @param {KeySignature[]} keySignatures key signatures\r\n     * @param {number[]} measureTimes time in seconds for each measure line\r\n     * @param {Track[]} tracks tracks\r\n     * @throws {'No or invalid tracks given!'} when invalid tracks are given\r\n     */\r\n  constructor (name, tempos, timeSignatures, keySignatures, measureTimes, tracks) {\r\n    if (!tracks || tracks.length === 0) {\r\n      throw new Error('No or invalid tracks given! Use .fromMidi or .fromMusicXml?')\r\n    }\r\n    this.name = name\r\n    this.measureTimes = measureTimes\r\n    this.tracks = tracks\r\n    this.duration = Math.max(...this.tracks.map(d => d.duration))\r\n    // Filter multiple identical consecutive infos\r\n    this.tempos = tempos.slice(0, 1)\r\n    let currentTempo = tempos[0]\r\n    for (const tempo of tempos) {\r\n      if (tempo.string !== currentTempo.string) {\r\n        currentTempo = tempo\r\n        this.tempos.push(tempo)\r\n      }\r\n    }\r\n    this.timeSignatures = timeSignatures.slice(0, 1)\r\n    let currentTimeSig = timeSignatures[0]\r\n    for (const timeSignature of timeSignatures) {\r\n      if (timeSignature.string !== currentTimeSig.string) {\r\n        currentTimeSig = timeSignature\r\n        this.timeSignatures.push(timeSignature)\r\n      }\r\n    }\r\n    this.keySignatures = keySignatures.slice(0, 1)\r\n    let currentKeySig = keySignatures[0]\r\n    for (const keySignature of keySignatures) {\r\n      if (keySignature.string !== currentKeySig.string) {\r\n        currentKeySig = keySignature\r\n        this.keySignatures.push(keySignature)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Creates a MusicPiece object from a MIDI file binary\r\n     *\r\n     * @param {string} name name\r\n     * @param {ArrayBuffer} midiFile MIDI file\r\n     * @returns {MusicPiece} new MusicPiece\r\n     * @throws {'No MIDI file content given'} when MIDI file is undefined or null\r\n     * @example <caption>In Node.js</caption>\r\n     *      const file = path.join(directory, fileName);\r\n     *      const data = fs.readFileSync(file, 'base64');\r\n     *      const mp = MusicPiece.fromMidi(fileName, data);\r\n     * @example <caption>In the browser</caption>\r\n     *      const uintArray = new Uint8Array(midiBinary);\r\n     *      const MP = MusicPiece.fromMidi(filename, uintArray);\r\n     */\r\n  static fromMidi (name, midiFile) {\r\n    if (!midiFile) {\r\n      throw new Error('No MIDI file content given')\r\n    }\r\n    const midi = midiParser.parse(midiFile)\r\n    const parsed = preprocessMidiFileData(midi)\r\n    let tempos = []\r\n    let timeSignatures = []\r\n    let keySignatures = []\r\n    let measureTimes = []\r\n    if (parsed.tracks.length > 0) {\r\n      // Tempos\r\n      tempos = parsed.tempoChanges\r\n        .map(d => new TempoDefinition(d.time, d.tempo))\r\n      // Time signatures\r\n      timeSignatures = parsed.beatTypeChanges\r\n        .map(d => new TimeSignature(d.time, [d.beats, d.beatType]))\r\n      // Key signatures\r\n      keySignatures = parsed.keySignatureChanges\r\n        .map(d => new KeySignature(d.time, d.key, d.scale))\r\n      // Measure times\r\n      measureTimes = parsed.measureLinePositions\r\n    }\r\n    // Tracks\r\n    const tracks = parsed.tracks.map((track) => new Track(\r\n      track.trackName,\r\n      track.instrumentName,\r\n      track.noteObjs,\r\n      null,\r\n      track.measureIndices,\r\n      new Map(),\r\n      new Map()\r\n    ))\r\n    return new MusicPiece(\r\n      name,\r\n      tempos,\r\n      timeSignatures,\r\n      keySignatures,\r\n      measureTimes,\r\n      tracks\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Creates a MusicPiece object from a MIDI file binary\r\n     *\r\n     * @deprecated This is not fully implemented yet\r\n     * @todo on hold until @tonejs/midi adds time in seconds for meta events\r\n     * @todo use @tonejs/midi for parsing, but the same information as with\r\n     * MusicPiece.fromMidi()\r\n     * @see https://github.com/Tonejs/Midi\r\n     * @param {string} name name\r\n     * @param {ArrayBuffer} midiFile MIDI file\r\n     * @returns {MusicPiece} new MusicPiece\r\n     * @throws {'No MIDI file content given'} when MIDI file is undefined or null\r\n     * @example <caption>In Node.js</caption>\r\n     *      const file = path.join(directory, fileName);\r\n     *      const data = fs.readFileSync(file);\r\n     *      const mp = MusicPiece.fromMidi(fileName, data);\r\n     * @example <caption>In the browser</caption>\r\n     *      const uintArray = new Uint8Array(midiBinary);\r\n     *      const MP = MusicPiece.fromMidi(filename, uintArray);\r\n     */\r\n  // static fromMidi2 (name, midiFile) {\r\n  //   if (!midiFile) {\r\n  //     throw new Error('No MIDI file content given')\r\n  //   }\r\n\r\n  //   const parsed = new Midi(midiFile)\r\n  //   // const uintArray = new Uint8Array(midiFile);\r\n  //   // const parsed = new Midi(uintArray);\r\n\r\n  //   // Tracks\r\n  //   const tracks = []\r\n  //   for (const track of parsed.tracks) {\r\n  //     if (track.notes.length === 0) { continue }\r\n  //     const notes = track.notes.map(note => Note.from({\r\n  //       pitch: note.midi,\r\n  //       start: note.time,\r\n  //       end: note.time + note.duration,\r\n  //       velocity: Math.round(note.velocity * 127),\r\n  //       channel: track.channel\r\n  //     }))\r\n  //     tracks.push(\r\n  //       Track.fromMidi(\r\n  //         track.trackName,\r\n  //         track.instrumentName,\r\n  //         notes\r\n  //       )\r\n  //     )\r\n  //   }\r\n\r\n  //   // TODO: convert ticks to seconds\r\n  //   let tempos = []\r\n  //   let timeSignatures = []\r\n  //   let keySignatures = []\r\n  //   let measureTimes = []\r\n  //   if (parsed.tracks.length > 0) {\r\n  //     // tempos\r\n  //     tempos = parsed.header.tempos\r\n  //       .map(d => new TempoDefinition(d.time, d.tempo))\r\n  //     // time signatures\r\n  //     timeSignatures = parsed.header.timeSignatures\r\n  //       .map(d => new TimeSignature(d.time, [d.beats, d.beatType]))\r\n  //     // key signatures\r\n  //     keySignatures = parsed.header.keySignatures\r\n  //       .map(d => new KeySignature(d.time, d.key, d.scale))\r\n  //     // measure times\r\n  //     measureTimes = parsed.measureLinePositions\r\n  //   }\r\n  //   return new MusicPiece(\r\n  //     name,\r\n  //     tempos,\r\n  //     timeSignatures,\r\n  //     keySignatures,\r\n  //     measureTimes,\r\n  //     tracks\r\n  //   )\r\n  // }\r\n\r\n  /**\r\n     * Creates a MusicPiece object from a MusicXML string\r\n     *\r\n     * @param {string} name name\r\n     * @param {string|object} xmlFile MusicXML file content as string or object\r\n     *      If it is an object, it must behave like a DOM, e.g. provide methods\r\n     *      such as .querySelectorAll()\r\n     * @returns {MusicPiece} new MusicPiece\r\n     * @throws {'No MusicXML file content given'} when MusicXML file is\r\n     *  undefined or null\r\n     * @example Parsing a MusicPiece in Node.js\r\n     *    const jsdom = require('jsdom');\r\n     *    const xmlFile = fs.readFileSync('My Song.musicxml');\r\n     *    const dom = new jsdom.JSDOM(xmlFile);\r\n     *    const xmlDocument = dom.window.document;\r\n     *    const mp = musicvislib.MusicPiece.fromMusicXml('My Song', xmlDocument);\r\n     */\r\n  static fromMusicXml (name, xmlFile) {\r\n    if (!xmlFile) {\r\n      throw new Error('No MusicXML file content given')\r\n    }\r\n    let xmlDocument = xmlFile\r\n    if (typeof xmlDocument === 'string') {\r\n      const parser = new DOMParser()\r\n      xmlDocument = parser.parseFromString(xmlFile, 'text/xml')\r\n    }\r\n    const parsed = preprocessMusicXmlData(xmlDocument)\r\n    let tempos = []\r\n    let timeSignatures = []\r\n    let keySignatures = []\r\n    if (parsed.parts.length > 0) {\r\n      // Tempos\r\n      tempos = parsed.parts[0].tempoChanges\r\n        .map(d => new TempoDefinition(d.time, d.tempo))\r\n      // Time signatures\r\n      timeSignatures = parsed.parts[0].beatTypeChanges\r\n        .map(d => new TimeSignature(d.time, [d.beats, d.beatType]))\r\n      // Key signatures\r\n      keySignatures = parsed.parts[0].keySignatureChanges\r\n        .map(d => new KeySignature(d.time, d.key, d.scale))\r\n    }\r\n    // Measure times\r\n    let measureTimes = []\r\n    if (parsed.parts.length > 0) {\r\n      measureTimes = parsed.parts[0].measureLinePositions\r\n    }\r\n    // Tracks\r\n    const tracks = parsed.parts\r\n      .map((track, index) => {\r\n        for (const n of track.noteObjs) {\r\n          n.channel = index\r\n        }\r\n        return new Track(\r\n          parsed.partNames[index],\r\n          parsed.instruments[index],\r\n          track.noteObjs,\r\n          track.tuning,\r\n          track.measureIndices,\r\n          track.measureRehearsalMap,\r\n          track.noteLyricsMap,\r\n          track.xmlNoteIndices\r\n        )\r\n      })\r\n    return new MusicPiece(\r\n      name,\r\n      tempos,\r\n      timeSignatures,\r\n      keySignatures,\r\n      measureTimes,\r\n      tracks\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Allows to get a MusicPiece from JSON after doing JSON.stringify()\r\n     *\r\n     * @param {string|object} json JSON\r\n     * @returns {MusicPiece} new MusicPiece\r\n     * @example\r\n     *      const jsonString = mp.toJson();\r\n     *      const recovered = MusicPiece.fromJson(jsonString);\r\n     */\r\n  static fromJson (json) {\r\n    json = (typeof json === 'string') ? JSON.parse(json) : json\r\n    const name = json.name\r\n    const tempos = json.tempos.map(d => new TempoDefinition(d.time, d.bpm))\r\n    const timeSignatures = json.timeSignatures.map(d => new TimeSignature(d.time, d.signature))\r\n    const keySignatures = json.keySignatures.map(d => new KeySignature(d.time, d.key, d.scale))\r\n    const measureTimes = json.measureTimes\r\n    const tracks = json.tracks.map(track => Track.from(track))\r\n    return new MusicPiece(name, tempos, timeSignatures, keySignatures, measureTimes, tracks)\r\n  }\r\n\r\n  /**\r\n     * Returns a JSON-serialized representation\r\n     *\r\n     * @param {boolean} pretty true for readable (prettified) JSON\r\n     * @returns {string} JSON as string\r\n     * @example\r\n     *      const jsonString = mp.toJson();\r\n     *      const recovered = MusicPiece.fromJson(jsonString);\r\n     */\r\n  toJson (pretty = false) {\r\n    const _this = {\r\n      ...this,\r\n      tracks: this.tracks.map(d => d.toObject())\r\n    }\r\n    return JSON.stringify(_this, undefined, pretty ? 2 : 0)\r\n  }\r\n\r\n  /**\r\n     * Returns an array with all notes from all tracks.\r\n     *\r\n     * @deprecated use getNotesFromTracks('all') instead.\r\n     * @param {boolean} sortByTime true: sort notes by time\r\n     * @returns {Note[]} all notes of this piece\r\n     */\r\n  getAllNotes (sortByTime = false) {\r\n    const notes = this.tracks.flatMap(t => t.notes)\r\n    if (sortByTime) {\r\n      notes.sort((a, b) => a.start - b.start)\r\n    }\r\n    return notes\r\n  }\r\n\r\n  /**\r\n     * Returns an array with notes from the specified tracks.\r\n     *\r\n     * @param {'all'|number|number[]} indices either 'all', a number, or an\r\n     *      Array with numbers\r\n     * @param {boolean} sortByTime true: sort notes by time (not needed for a\r\n     *      single track)\r\n     * @returns {Note[]} Array with all notes from the specified tracks\r\n     */\r\n  getNotesFromTracks (indices = 'all', sortByTime = false) {\r\n    let notes = []\r\n    if (indices === 'all') {\r\n      // Return all notes from all tracks\r\n      notes = this.tracks.flatMap(t => t.notes)\r\n    } else if (Array.isArray(indices)) {\r\n      // Return notes from some tracks\r\n      notes = this.tracks\r\n        .filter((d, i) => indices.includes(i))\r\n        .flatMap(t => t.notes)\r\n    } else {\r\n      // Return notes from a single track\r\n      notes = this.tracks[indices].notes\r\n      // Notes in each tracks are already sorted\r\n      sortByTime = false\r\n    }\r\n    if (sortByTime) {\r\n      notes.sort((a, b) => a.start - b.start)\r\n    }\r\n    return notes\r\n  }\r\n\r\n  /**\r\n     * Transposes all or only the specified tracks by the specified number of\r\n     * (semitone) steps.\r\n     * Will return a new MusicPiece instance.\r\n     * Note pitches will be clipped to [0, 127].\r\n     * Will not change playing instructions such as string and fret.\r\n     *\r\n     * @param {number} steps number of semitones to transpose (can be negative)\r\n     * @param {'all'|number|number[]} tracks tracks to transpose\r\n     * @returns {MusicPiece} a new, transposed MusicPiece\r\n     */\r\n  transpose (steps = 0, tracks = 'all') {\r\n    const newTracks = this.tracks.map((track, index) => {\r\n      const change = (\r\n        tracks === 'all' ||\r\n        (Array.isArray(tracks) && tracks.includes(index)) ||\r\n        tracks === index\r\n      )\r\n      const na = new NoteArray(track.notes)\r\n      let tuning = track.tuningPitches\r\n      if (change) {\r\n        // Transpose notes and tuning pitches\r\n        na.transpose(steps)\r\n        tuning = track.tuningPitches.map(d => d + steps)\r\n      }\r\n      return new Track(\r\n        track.name,\r\n        track.instrument,\r\n        na.getNotes(),\r\n        tuning,\r\n        track.measureIndices\r\n      )\r\n    })\r\n    return new MusicPiece(\r\n      this.name,\r\n      [...this.tempos],\r\n      [...this.timeSignatures],\r\n      [...this.keySignatures],\r\n      [...this.measureTimes],\r\n      newTracks\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Used by MusicPiece, should not be used directly\r\n */\r\nexport class Track {\r\n  /**\r\n     * Do not use this constructor, but the static methods Track.fromMidi\r\n     * and Track.fromMusicXml instead.\r\n     *\r\n     * Notes will be sorted by start time.\r\n     *\r\n     * @param {string} name name\r\n     * @param {string} instrument instrument name\r\n     * @param {Note[]} notes notes\r\n     * @param {number[]} [tuningPitches=null] MIDI note numbers of the track's\r\n     *  tuning\r\n     * @param {number[]} [measureIndices=null] note indices where new measures\r\n     *  start\r\n     * @param {Map<number,object>} measureRehearsalMap maps measure index to\r\n     *  rehearsal marks\r\n     * @param {Map<number,object>} noteLyricsMap maps note index to lyrics text\r\n     * @param {number[][]} xmlNoteIndices for each parsed note, the indices of\r\n     *  the XML note elements that correspond to it\r\n     * @throws {'Notes are undefined or not an array'} for invalid notes\r\n     */\r\n  constructor (\r\n    name,\r\n    instrument,\r\n    notes,\r\n    tuningPitches = null,\r\n    measureIndices = null,\r\n    measureRehearsalMap,\r\n    noteLyricsMap,\r\n    xmlNoteIndices = null\r\n  ) {\r\n    name = !name?.length ? 'unnamed' : name.replace('\\u0000', '')\r\n    this.name = name\r\n    this.instrument = instrument\r\n    if (!notes || notes.length === undefined) {\r\n      throw new Error('Notes are undefined or not an array')\r\n    }\r\n    this.notes = notes.sort((a, b) => a.start - b.start)\r\n    this.tuningPitches = tuningPitches\r\n    this.measureIndices = measureIndices\r\n    this.measureRehearsalMap = measureRehearsalMap\r\n    this.noteLyricsMap = noteLyricsMap\r\n    this.xmlNoteIndices = xmlNoteIndices\r\n    // Computed properties\r\n    this.duration = new NoteArray(notes).getDuration()\r\n    this.hasStringFret = false\r\n    for (const note of notes) {\r\n      if (note.string !== undefined && note.fret !== undefined) {\r\n        this.hasStringFret = true\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Returns an object representation of this Track, turns Maps into Arrays\r\n     *  to work with JSON.stringify\r\n     *\r\n     * @returns {object} object represntation\r\n     */\r\n  toObject () {\r\n    return {\r\n      ...this,\r\n      measureRehearsalMap: [...this.measureRehearsalMap],\r\n      noteLyricsMap: [...this.noteLyricsMap]\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Parses an object into a Track, must have same format as the result of\r\n     * Track.toObject().\r\n     *\r\n     * @param {object} object object represntation of a Track\r\n     * @returns {Track} track\r\n     */\r\n  static from (object) {\r\n    const notes = object.notes.map(note => {\r\n      return note.string !== undefined && note.fret !== undefined\r\n        ? GuitarNote.from(note)\r\n        : Note.from(note)\r\n    })\r\n    const measureRehearsalMap = new Map(object.measureRehearsalMap)\r\n    const noteLyricsMap = new Map(object.noteLyricsMap)\r\n    return new Track(\r\n      object.name,\r\n      object.instrument,\r\n      notes,\r\n      object.tuningPitches,\r\n      object.measureIndices,\r\n      measureRehearsalMap,\r\n      noteLyricsMap,\r\n      object.xmlNoteIndices\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Tempo definition\r\n */\r\nexport class TempoDefinition {\r\n  /**\r\n     * @param {number} time in seconds\r\n     * @param {number} bpm tempo in seconds per beat\r\n     */\r\n  constructor (time, bpm) {\r\n    this.time = time\r\n    this.bpm = bpm\r\n    this.string = `${bpm} bpm`\r\n  }\r\n}\r\n\r\n/**\r\n * Time signature definition\r\n */\r\nexport class TimeSignature {\r\n  /**\r\n     * @param {number} time in seconds\r\n     * @param {number[]} signature time signature as [beats, beatType]\r\n     */\r\n  constructor (time, signature) {\r\n    this.time = time\r\n    this.signature = signature\r\n    this.string = signature.join('/')\r\n  }\r\n}\r\n\r\n/**\r\n * Key signature definition\r\n */\r\nexport class KeySignature {\r\n  /**\r\n     * @param {number} time in seconds\r\n     * @param {string} key key e.g. 'C'\r\n     * @param {string} scale scale e.g. 'major'\r\n     */\r\n  constructor (time, key, scale) {\r\n    this.time = time\r\n    this.key = key\r\n    this.scale = scale\r\n    this.string = `${key} ${scale}`\r\n  }\r\n}\r\n\r\nexport default MusicPiece\r\n", "import { max } from 'd3'\r\nimport Note from '../types/Note.js'\r\nimport GuitarNote from '../types/GuitarNote.js'\r\nimport { getMidiNoteByNameAndOctave } from './Midi.js'\r\nimport { roundToNDecimals } from '../utils/MathUtils.js'\r\n// import DrumNote from '../types/DrumNote.js';\r\n\r\n/**\r\n * @module fileFormats/MusicXmlParser\r\n */\r\n\r\n// Precision in number of digits when rounding seconds\r\nconst ROUNDING_PRECISION = 5\r\n\r\n/**\r\n * Converts a collection of MusicXML measures to JavaScript Objects with timing information in seconds.\r\n * Also calculates the position of measure lines and the total time in seconds.\r\n *\r\n * @param {XMLDocument} xml MusicXML document\r\n * @param {boolean} log set to true to log results etc. to the console\r\n * @returns {object} parsed document\r\n */\r\nexport function preprocessMusicXmlData (xml, log = false) {\r\n  if (log) {\r\n    console.groupCollapsed('[MusicXmlParser] Parsing MusicXML')\r\n    console.log(xml)\r\n  }\r\n  // Get part and instrument names\r\n  const partNameElements = xml.querySelectorAll('part-name')\r\n  const instruments = xml.querySelectorAll('score-instrument')\r\n  const partNames = []\r\n  const instrumentNames = []\r\n  for (const p of partNameElements) {\r\n    partNames.push(p.innerHTML)\r\n  }\r\n  for (const index of instruments) {\r\n    instrumentNames.push(index.children[0].innerHTML)\r\n  }\r\n  // Get instrument definitions\r\n  const drumInstrumentMap = getDrumInstrumentMap(xml)\r\n  // Preprocess notes\r\n  const parts = xml.querySelectorAll('part')\r\n  const parsedParts = []\r\n  for (const part of parts) {\r\n    parsedParts.push(preprocessMusicXmlPart(part, drumInstrumentMap))\r\n  }\r\n  const result = {\r\n    parts: parsedParts,\r\n    partNames,\r\n    instruments: instrumentNames,\r\n    totalTime: max(parsedParts, d => d.totalTime)\r\n  }\r\n  if (log) {\r\n    console.log(result)\r\n    console.groupEnd()\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Converts a collection of MusicXML measures to JavaScript Objects with timing information in seconds.\r\n * Also calculates the position of measure lines and the total time in seconds.\r\n *\r\n * @private\r\n * @param {HTMLElement} part MusicXML part\r\n * @param {Map} drumInstrumentMap midiPitch = map.get(partId).get(instrId)\r\n * @returns {object} parsed measures\r\n */\r\nfunction preprocessMusicXmlPart (part, drumInstrumentMap) {\r\n  // Handle Guitar sheets with stave and tab (so dublicate notes)\r\n  part = handleStaveAndTab(part)\r\n  // Handle repetitions by duplicating measures\r\n  let measures = part.children\r\n  measures = duplicateRepeatedMeasures(measures)\r\n\r\n  // For each parsed note, store the corresponding XML notes\r\n  const xmlNotes = part.querySelectorAll('note')\r\n  const xmlNoteIndexMap = new Map([...xmlNotes].map((d, i) => [d, i]))\r\n  const xmlNoteIndices = []\r\n\r\n  let currentTime = 0\r\n  let divisions\r\n  let tempo = 120\r\n  let beats = 4\r\n  let beatType = 4\r\n  // Default velocity is 90 https://www.musicxml.com/tutorial/the-midi-compatible-part/sound-suggestions/\r\n  const defaultVelocity = 90\r\n  const velocityFactor = 64 / 71\r\n  let velocity = Math.round(defaultVelocity * velocityFactor)\r\n\r\n  // Handle changing tempo and beat type\r\n  const tempoChanges = []\r\n  const beatTypeChanges = []\r\n  const keySignatureChanges = []\r\n  const noteObjs = []\r\n  const measureRehearsalMap = new Map()\r\n  const noteLyricsMap = new Map()\r\n  // Time in seconds of the start of new measures\r\n  const measureLinePositions = []\r\n  // Indices of notes where a new measure starts\r\n  const measureIndices = []\r\n  for (const measure of measures) {\r\n    const currentTimeRounded = roundToNDecimals(currentTime, ROUNDING_PRECISION)\r\n    // Try to update metrics (if they are not set, keep the old ones)\r\n    try {\r\n      const soundElements = measure.querySelectorAll('sound')\r\n      // eslint-disable-next-line\r\n      for (const element of soundElements) {\r\n        const tempoValue = element.getAttribute('tempo')\r\n        if (tempoValue !== null) {\r\n          tempo = roundToNDecimals(+tempoValue, 3)\r\n          tempoChanges.push({\r\n            time: currentTimeRounded,\r\n            tempo\r\n          })\r\n        }\r\n        // TODO: this only support one tempo change per measure!\r\n        // TODO: tempo changes that are not at the measure start will be false\r\n        // TODO: solution: go trough all children of measure: notes and other children\r\n        // notes will update the time\r\n        break\r\n      }\r\n    } catch { }\r\n    try {\r\n      divisions = +measure.querySelectorAll('divisions')[0].innerHTML\r\n    } catch { }\r\n    try {\r\n      beats = +measure.querySelectorAll('beats')[0].innerHTML\r\n      beatType = +measure.querySelectorAll('beat-type')[0].innerHTML\r\n      beatTypeChanges.push({\r\n        time: currentTimeRounded,\r\n        beats,\r\n        beatType\r\n      })\r\n    } catch { }\r\n    const secondsPerBeat = 1 / (tempo / 60)\r\n    try {\r\n      const fifths = +measure.querySelectorAll('fifths')[0].innerHTML\r\n      const { key, scale } = keySignatureMap.get(fifths)\r\n      keySignatureChanges.push({\r\n        time: currentTimeRounded,\r\n        key,\r\n        scale\r\n      })\r\n    } catch { }\r\n\r\n    // If measure is empty, still increase currentTime\r\n    if (measure.querySelectorAll('note').length === 0) {\r\n      const measureDuration = beats * (beatType / 4) * secondsPerBeat\r\n      currentTime += measureDuration\r\n    }\r\n\r\n    // Read notes\r\n    let lastNoteDuration = 0\r\n    for (const child of measure.children) {\r\n      if (child.nodeName === 'backup') {\r\n        // Handle backup, which reduces the current time to handle multiple staves\r\n        const duration = +child.querySelectorAll('duration')[0].innerHTML\r\n        const durationInSeconds = getDurationInSeconds(duration, divisions, secondsPerBeat)\r\n        currentTime -= durationInSeconds\r\n      } else if (child.nodeName === 'forward') {\r\n        // Forward is inverse of backward\r\n        const duration = +child.querySelectorAll('duration')[0].innerHTML\r\n        const durationInSeconds = getDurationInSeconds(duration, divisions, secondsPerBeat)\r\n        currentTime += durationInSeconds\r\n      } else if (child.nodeName === 'direction') {\r\n        // Handle directions such as dynamics\r\n        for (const direction of child.children) {\r\n          if (direction.nodeName === 'sound' && direction.getAttribute('dynamics')) {\r\n            // Dynamics: convert number...\r\n            // https://www.musicxml.com/tutorial/the-midi-compatible-part/sound-suggestions/\r\n            velocity = Math.round(velocityFactor * +direction.getAttribute('dynamics'))\r\n          }\r\n          if (child.querySelectorAll('rehearsal').length > 0) {\r\n            // Reheasal marks (used as section indicators by GuitarPro)\r\n            const rehearsals = child.querySelectorAll('rehearsal')\r\n            const marks = []\r\n            for (const r of rehearsals) {\r\n              if (r.textContent !== '') {\r\n                marks.push(r.textContent)\r\n              }\r\n            }\r\n            if (marks.length > 0) {\r\n              let text = marks.join(' ')\r\n              const measureIndex = measureIndices.length\r\n              if (measureRehearsalMap.has(measureIndex)) {\r\n                const oldText = measureRehearsalMap.get(measureIndex)\r\n                text = `${oldText} ${text}`\r\n              }\r\n              measureRehearsalMap.set(measureIndex, text)\r\n            }\r\n          }\r\n          // TODO: handle others, e.g. tempo\r\n          // if (direction.nodeName === 'sound' && direction.getAttribute('tempo')) {\r\n          //     const tempoValue = Math.round(+direction.getAttribute('tempo'));\r\n          //     tempo = roundToNDecimals(tempoValue, 3);\r\n          //     tempoChanges.push({\r\n          //         time: roundToNDecimals(currentTime, ROUNDING_PRECISION),\r\n          //         tempo,\r\n          //     });\r\n          // }\r\n        }\r\n      } else if (child.nodeName === 'note') {\r\n        const note = child\r\n\r\n        try {\r\n          // Get note duration in seconds\r\n          let durationInSeconds\r\n          // Handle grace notes\r\n          if (note.querySelectorAll('grace').length > 0) {\r\n            // Take duration from type\r\n            const type = note.querySelectorAll('type').textContent\r\n            if (type === '64th') {\r\n              durationInSeconds = secondsPerBeat / 16\r\n            } else if (type === '32nd') {\r\n              durationInSeconds = secondsPerBeat / 8\r\n            } else if (type === '16th') {\r\n              durationInSeconds = secondsPerBeat / 4\r\n            } else if (type === 'eighth') {\r\n              durationInSeconds = secondsPerBeat / 2\r\n            } else if (type === 'quarter') {\r\n              durationInSeconds = secondsPerBeat\r\n            } else if (type === 'half') {\r\n              durationInSeconds = secondsPerBeat * 2\r\n            } else {\r\n              // TODO: better fallback solution?\r\n              durationInSeconds = 0.01\r\n            }\r\n          } else {\r\n            const duration = +note.querySelectorAll('duration')[0].innerHTML\r\n            durationInSeconds = getDurationInSeconds(duration, divisions, secondsPerBeat)\r\n          }\r\n\r\n          // Do not create note object for rests, only increase time\r\n          const isRest = note.querySelectorAll('rest').length > 0\r\n          if (isRest) {\r\n            currentTime += durationInSeconds\r\n            continue\r\n          }\r\n          const isUnpitched = note.querySelectorAll('unpitched').length > 0\r\n          let pitch\r\n          if (isUnpitched) {\r\n            // Handle drum notes\r\n            const instrumentId = note.querySelectorAll('instrument')[0].id\r\n            pitch = drumInstrumentMap.get(part.id).get(instrumentId)\r\n          } else {\r\n            // Get MIDI pitch\r\n            // Handle <alter> tag for accidentals\r\n            const alter = +(note.querySelectorAll('alter')[0]?.innerHTML ?? 0)\r\n            const step = note.querySelectorAll('step')[0].innerHTML\r\n            const octave = +note.querySelectorAll('octave')[0].innerHTML\r\n            pitch = getMidiNoteByNameAndOctave(step, octave).pitch + alter\r\n          }\r\n          // TODO: Handle dynamics defined as tag inside a note\r\n          const dynamicsTag = note.querySelectorAll('dynamics')[0]?.children[0]\r\n          if (dynamicsTag) {\r\n            velocity = dynamicsMap.get(dynamicsTag.nodeName)\r\n          }\r\n\r\n          // Is this a chord?\r\n          // https://www.musicxml.com/tutorial/the-midi-compatible-part/chords/\r\n          const isChord = note.querySelectorAll('chord').length > 0\r\n          if (isChord) {\r\n            currentTime -= lastNoteDuration\r\n          }\r\n          // Is this note tied?\r\n          const tieElement = note.querySelectorAll('tie')[0]\r\n          if (tieElement && tieElement.getAttribute('type') === 'stop') {\r\n            const noteEnd = currentTime + durationInSeconds\r\n            // Find last note with this pitch and update end\r\n            for (let index = noteObjs.length - 1; index > 0; index--) {\r\n              const noteObject = noteObjs[index]\r\n              if (noteObject.pitch === pitch) {\r\n                noteObject.end = noteEnd\r\n                // Read lyrics and add to note\r\n                const lyrics = getLyricsFromNote(note)\r\n                if (lyrics.length > 0) {\r\n                  const oldLyrics = noteLyricsMap.get(index) ?? ''\r\n                  const newLyrics = `${oldLyrics} ${lyrics}`\r\n                  noteLyricsMap.set(index, newLyrics)\r\n                }\r\n                // Save XML note index\r\n                xmlNoteIndices[index].push(xmlNoteIndexMap.get(note))\r\n                break\r\n              }\r\n            }\r\n          } else {\r\n            // Save XML note index\r\n            xmlNoteIndices.push([xmlNoteIndexMap.get(note)])\r\n            // Staff is used as note's channel for non-guitar notes\r\n            const staff = +(note.querySelectorAll('staff')[0]?.innerHTML ?? 1)\r\n            // TODO: use xml note type?\r\n            // const type = note.getElementsByTagName('type')[0].innerHTML;\r\n            const startTime = roundToNDecimals(currentTime, ROUNDING_PRECISION)\r\n            const endTime = roundToNDecimals(currentTime + durationInSeconds, ROUNDING_PRECISION)\r\n            // Try to get guitar specific data\r\n            let string = null\r\n            let fret = null\r\n            try {\r\n              fret = +note.querySelectorAll('fret')[0].innerHTML\r\n              string = +note.querySelectorAll('string')[0].innerHTML\r\n            } catch { }\r\n            if (string !== null && fret !== null) {\r\n              noteObjs.push(new GuitarNote(\r\n                pitch,\r\n                startTime,\r\n                velocity,\r\n                string,\r\n                endTime,\r\n                string,\r\n                fret\r\n              ))\r\n              // TODO: use drum notes and store part name and action directly\r\n              // } else if (isUnpitched) {\r\n              //     const part = '';\r\n              //     const action = '';\r\n              //     noteObjs.push(new DrumNote(\r\n              //         pitch,\r\n              //         startTime,\r\n              //         velocity,\r\n              //         staff - 1,\r\n              //         endTime,\r\n              //         part,\r\n              //         action,\r\n              //     ));\r\n            } else {\r\n              noteObjs.push(new Note(\r\n                pitch,\r\n                startTime,\r\n                velocity,\r\n                // MusicXML starts with 1 but MIDI with 0\r\n                staff - 1,\r\n                endTime\r\n              ))\r\n            }\r\n            // Read lyrics\r\n            const lyrics = getLyricsFromNote(note)\r\n            if (lyrics.length > 0) {\r\n              noteLyricsMap.set(noteObjs.length - 1, lyrics)\r\n            }\r\n          }\r\n          lastNoteDuration = durationInSeconds\r\n          currentTime += durationInSeconds\r\n        } catch (error) {\r\n          console.warn('[MusicXmlParser] Cannot parse MusicXML note', error, note)\r\n        }\r\n      }\r\n    }\r\n    // Add measure line position\r\n    measureLinePositions.push(roundToNDecimals(currentTime, ROUNDING_PRECISION))\r\n    measureIndices.push(noteObjs.length)\r\n  }\r\n  // Defaults\r\n  if (tempoChanges.length === 0 || tempoChanges[0].time > 0) {\r\n    tempoChanges.unshift({ tempo: 120, time: 0 })\r\n  }\r\n  if (beatTypeChanges.length === 0 || beatTypeChanges[0].time > 0) {\r\n    beatTypeChanges.unshift({ beats: 4, beatType: 4, time: 0 })\r\n  }\r\n  if (keySignatureChanges.length === 0 || keySignatureChanges[0].time > 0) {\r\n    keySignatureChanges.unshift({ key: 'C', scale: 'major', time: 0 })\r\n  }\r\n  // TODO: Remove duplicates from measureRehearsalMap\r\n\r\n  const result = {\r\n    noteObjs: noteObjs,\r\n    totalTime: currentTime,\r\n    measureLinePositions,\r\n    measureIndices,\r\n    measureRehearsalMap,\r\n    xmlNoteIndices,\r\n    tempoChanges,\r\n    beatTypeChanges,\r\n    keySignatureChanges,\r\n    tuning: getTuningPitches(measures),\r\n    noteLyricsMap\r\n  }\r\n  // console.log('[MusicXmlParser] Parsed part: ', result);\r\n  return result\r\n}\r\n\r\n/**\r\n * Reads lyrics from a note element\r\n *\r\n * @param {HTMLElement} note note element\r\n * @returns {string} lyrics for this note\r\n */\r\nfunction getLyricsFromNote (note) {\r\n  const lyric = note.querySelectorAll('lyric')\r\n  const texts = []\r\n  for (const l of lyric) {\r\n    texts.push(l.querySelectorAll('text')[0].textContent)\r\n  }\r\n  const text = texts.join(' ')\r\n  return text\r\n}\r\n\r\n/**\r\n * Calculates the duration in seconds of a note, rest or backup\r\n *\r\n * @private\r\n * @param {number} duration duration of the event in divisions\r\n * @param {number} divisions MusicXML time divisions value\r\n * @param {number} secondsPerBeat seconds per beat\r\n * @returns {number} duration in seconds\r\n */\r\nfunction getDurationInSeconds (duration, divisions, secondsPerBeat) {\r\n  const durationInBeats = duration / divisions\r\n  const durationInSeconds = durationInBeats * secondsPerBeat\r\n  return durationInSeconds\r\n}\r\n\r\n/**\r\n * Resolves repetitions by simply duplicating repeated measures.\r\n * Handles volta lines (ending one, ending two).\r\n *\r\n * @todo handle 3x etc\r\n * @todo write tests\r\n * @see https://www.musicxml.com/tutorial/the-midi-compatible-part/repeats/\r\n * @private\r\n * @param {HTMLCollection} measures measures\r\n * @returns {HTMLAllCollection[]} processed measures\r\n */\r\nfunction duplicateRepeatedMeasures (measures) {\r\n  let resultMeasures = []\r\n  let currentRepeatedSection = []\r\n  let isAlternativeEndingOne = false\r\n  for (const measure of measures) {\r\n    // Check if this is the first measure of an volta ending 1\r\n    const endingMarks = measure.querySelectorAll('ending')\r\n    if (\r\n      +(endingMarks[0]?.getAttribute('number')) === 1 &&\r\n      endingMarks[0]?.getAttribute('type') === 'start'\r\n    ) {\r\n      isAlternativeEndingOne = true\r\n    }\r\n    // Handle repetition marks\r\n    const repetitionMarks = measure.querySelectorAll('repeat')\r\n    if (repetitionMarks.length === 2) {\r\n      // Only this measure is repeated\r\n      // TODO: volta endings don't make sense here so no need to handle?\r\n      const times = repetitionMarks[1].getAttribute('times') || 2\r\n      const repetition = Array.from({ length: +times }).fill(measure)\r\n      if (currentRepeatedSection.length === 0) {\r\n        resultMeasures = [...resultMeasures, ...repetition]\r\n      } else {\r\n        currentRepeatedSection = [...currentRepeatedSection, ...repetition]\r\n      }\r\n    } else if (repetitionMarks.length === 1) {\r\n      // Repetition either starts or ends here\r\n      const direction = repetitionMarks[0].getAttribute('direction')\r\n      if (direction === 'forward') {\r\n        // Start new repetition\r\n        currentRepeatedSection.push(measure)\r\n      } else if (direction === 'backward') {\r\n        const times = repetitionMarks[0].getAttribute('times') || 2\r\n        if (currentRepeatedSection.length > 0) {\r\n          // Finish current repetition\r\n          if (!isAlternativeEndingOne) {\r\n            currentRepeatedSection.push(measure)\r\n            for (let index = 0; index < times; index++) {\r\n              resultMeasures = [...resultMeasures, ...currentRepeatedSection]\r\n            }\r\n          } else {\r\n            // Only include ending 1 in first repetition\r\n            const firstRepetition = [...currentRepeatedSection, measure]\r\n            resultMeasures = [...resultMeasures, ...firstRepetition]\r\n            for (let index = 1; index < times; index++) {\r\n              resultMeasures = [...resultMeasures, ...currentRepeatedSection]\r\n            }\r\n          }\r\n          currentRepeatedSection = []\r\n        } else {\r\n          // Repetition started at the start of the piece, repeat all\r\n          // we have until here\r\n          const allMeasuresUntilHere = [...resultMeasures]\r\n          for (let index = 1; index < times; index++) {\r\n            resultMeasures = [...resultMeasures, ...allMeasuresUntilHere]\r\n          }\r\n          // resultMeasures = [...resultMeasures, ...resultMeasures];\r\n        }\r\n      }\r\n    } else {\r\n      if (!isAlternativeEndingOne) {\r\n        // Measure without repetition marks, but might still be inside a\r\n        // repetition\r\n        if (currentRepeatedSection.length === 0) {\r\n          resultMeasures.push(measure)\r\n        } else {\r\n          currentRepeatedSection.push(measure)\r\n        }\r\n      }\r\n    }\r\n    // Check if this is the last measure of a volta ending 1\r\n    if (isAlternativeEndingOne) {\r\n      for (const endingMark of endingMarks) {\r\n        if (\r\n          +(endingMark.getAttribute('number')) === 1 &&\r\n          endingMark.getAttribute('type') === 'stop'\r\n        ) {\r\n          isAlternativeEndingOne = false\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return resultMeasures\r\n}\r\n\r\n/**\r\n * Handles MusicXML measures that contain both a stave and a tab. Since every\r\n * note is described twice, we just need to remove those without string, fret\r\n * information\r\n * This function also removes <backup> tags which should not be necessary after\r\n * removing dublicate notes (only if string, fret notes were found).\r\n *\r\n * @private\r\n * @param {HTMLElement} track a MusicXML track, i.e. its measures\r\n * @returns {HTMLCollection} cleaned-up MusicXML measure\r\n */\r\nfunction handleStaveAndTab (track) {\r\n  const notes = track.querySelectorAll('note')\r\n  // Check whether this file has notes with string, fret information\r\n  let hasStringFretNotes = false\r\n  for (const note of notes) {\r\n    if (\r\n      note.querySelectorAll('string').length > 0 &&\r\n      note.querySelectorAll('fret').length > 0\r\n    ) {\r\n      hasStringFretNotes = true\r\n      break\r\n    }\r\n  }\r\n  // If some notes have string and fret information, remove all the others\r\n  // Do *not* remove all rests, keep the one in the first voice!\r\n  if (hasStringFretNotes) {\r\n    for (const note of notes) {\r\n      const voice = +(note.querySelectorAll('voice')[0].innerHTML ?? 1)\r\n      const isFirstVoiceRest = note.querySelectorAll('rest').length > 0 &&\r\n        voice === 1\r\n      if (\r\n        !isFirstVoiceRest &&\r\n        note.querySelectorAll('fret').length === 0\r\n      ) {\r\n        note.remove()\r\n      }\r\n    }\r\n    // Also remove <backup> tags which were only there due to having two\r\n    // staves\r\n    const backups = track.querySelectorAll('backup')\r\n    for (const backup of backups) {\r\n      backup.remove()\r\n    }\r\n  }\r\n  return track\r\n}\r\n\r\n/**\r\n * Gets the tuning for a MusicXML part\r\n *\r\n * @private\r\n * @param {HTMLCollection} measures the measures of the parts\r\n * @returns {number[]} pitches of the tuning or [] if none is found\r\n */\r\nfunction getTuningPitches (measures) {\r\n  for (const measure of measures) {\r\n    try {\r\n      const tuningPitches = []\r\n      const staffTunings = measure.querySelectorAll('staff-tuning')\r\n      for (const st of staffTunings) {\r\n        const tuningNote = st.querySelectorAll('tuning-step')[0].innerHTML\r\n        const tuningOctave = +st.querySelectorAll('tuning-octave')[0].innerHTML\r\n        // let line = +st.getAttribute('line');\r\n        // console.log(`String ${line} is tuned to ${tuningNote}${tuningOctave}`);\r\n        tuningPitches.push(getMidiNoteByNameAndOctave(tuningNote, tuningOctave).pitch)\r\n      }\r\n      return tuningPitches\r\n    } catch { }\r\n  }\r\n  return []\r\n}\r\n\r\n/**\r\n * Extracts information about the XML's parts for different instruments\r\n *\r\n * @param {XMLDocument} xml MusicXML\r\n * @returns {object[]} part definitions\r\n */\r\n// function getPartDefinitions (xml) {\r\n//   const partDefinitions = xml.querySelectorAll('score-part')\r\n//   const result = []\r\n//   for (const partDefinition of partDefinitions) {\r\n//     // Instruments (e.g., drum parts have multiple)\r\n//     const instruments = new Map()\r\n//     const instrDefs = partDefinition.querySelectorAll('score-instrument')\r\n//     for (const instrumentDefinition of instrDefs) {\r\n//       const id = instrumentDefinition.getAttribute('id')\r\n//       instruments.set(id, {\r\n//         id,\r\n//         name: instrumentDefinition.querySelectorAll('instrument-name')[0].textContent\r\n//       })\r\n//     }\r\n//     const instrMidiDefs = partDefinition.querySelectorAll('midi-instrument')\r\n//     for (const instrumentDefinition of instrMidiDefs) {\r\n//       const midiNote = instrumentDefinition.querySelectorAll('midi-unpitched')[0]?.textContent\r\n//       if (!midiNote) {\r\n//         continue\r\n//       }\r\n//       const id = instrumentDefinition.getAttribute('id')\r\n//       instruments.get(id).midiNote = +midiNote\r\n//     }\r\n//     // Parsed part definitions\r\n//     result.push({\r\n//       id: partDefinition.getAttribute('id'),\r\n//       name: partDefinition.querySelectorAll('part-name')[0].textContent,\r\n//       abbr: partDefinition.querySelectorAll('part-abbreviation')[0].textContent,\r\n//       instruments: instruments.size > 0 ? instruments : null\r\n//     })\r\n//   }\r\n//   return result\r\n// }\r\n\r\n/**\r\n * Returns a map containing maps, such that result.get(partId).get(instrId)\r\n * gives you the instrument with the ID instrId as defined in the part partId.\r\n *\r\n * This is needed to map drum notes to MIDI pitches.\r\n *\r\n * @param {XMLDocument} xml MusicXML\r\n * @returns {Map} map with structure result.get(partId).get(instrId)\r\n */\r\nfunction getDrumInstrumentMap (xml) {\r\n  const partMap = new Map()\r\n  const scoreParts = xml.querySelectorAll('part-list')[0]?.querySelectorAll('score-part')\r\n  if (!scoreParts) { return partMap }\r\n  for (const scorePart of scoreParts) {\r\n    const partId = scorePart.id\r\n    const instruMap = new Map()\r\n    const midiInstrs = scorePart.querySelectorAll('midi-instrument')\r\n    for (const midiInstr of midiInstrs) {\r\n      const instrId = midiInstr.id\r\n      const pitch = midiInstr.querySelectorAll('midi-unpitched')[0]?.innerHTML\r\n      if (pitch) {\r\n        instruMap.set(instrId, +pitch)\r\n      }\r\n    }\r\n    partMap.set(partId, instruMap)\r\n  }\r\n  return partMap\r\n}\r\n\r\n/**\r\n * Checks whether a note is palm-muted\r\n *\r\n * @param {HTMLElement} note note element\r\n * @returns {boolean} true if note is palm-muted\r\n */\r\n// function isPalmMuted (note) {\r\n//   const mute = note.querySelectorAll('mute')\r\n//   if (mute.length > 0 && mute[0].textContent === 'palm') {\r\n//     return true\r\n//   }\r\n//   return false\r\n// }\r\n\r\n/**\r\n * Checks whether a note is hammer-on\r\n *\r\n * @param {HTMLElement} note note element\r\n * @returns {boolean} true if note is hammer-on\r\n */\r\n// function isHammeron (note) {\r\n//   return note.querySelectorAll('hammer-on').length > 0\r\n// }\r\n\r\n/**\r\n * Map from fiths to key signature\r\n *\r\n * @type {Map<number,object>}\r\n */\r\nconst keySignatureMap = new Map([\r\n  [-7, { key: 'Cb', scale: 'major' }],\r\n  [-6, { key: 'Gb', scale: 'major' }],\r\n  [-5, { key: 'Db', scale: 'major' }],\r\n  [-4, { key: 'Ab', scale: 'major' }],\r\n  [-3, { key: 'Eb', scale: 'major' }],\r\n  [-2, { key: 'Bb', scale: 'major' }],\r\n  [-1, { key: 'F', scale: 'major' }],\r\n  [0, { key: 'C', scale: 'major' }],\r\n  [1, { key: 'G', scale: 'major' }],\r\n  [2, { key: 'D', scale: 'major' }],\r\n  [3, { key: 'A', scale: 'major' }],\r\n  [4, { key: 'E', scale: 'major' }],\r\n  [5, { key: 'B', scale: 'major' }],\r\n  [6, { key: 'F#', scale: 'major' }],\r\n  [7, { key: 'C#', scale: 'major' }]\r\n])\r\n\r\n/**\r\n * Maps dynamics to MIDI velocity numbers, i.e. 'ff' to 102\r\n *\r\n * @type {Map<string,number>}\r\n */\r\nconst dynamicsMap = new Map([\r\n  ['ppp', 25],\r\n  ['pp', 38],\r\n  ['p', 51],\r\n  ['mp', 64],\r\n  ['mf', 76],\r\n  ['f', 89],\r\n  ['ff', 102],\r\n  ['fff', 114]\r\n])\r\n", "import { countOnesOfBinary, roundToNDecimals } from './MathUtils.js'\r\nimport { binarySearch } from './ArrayUtils.js'\r\n\r\n/**\r\n * @module utils/MusicUtils\r\n */\r\n\r\n/**\r\n * Converts beats per minute to seconds per beat\r\n *\r\n * @param {number} bpm tempo in beats per minute\r\n * @returns {number} seconds per beat\r\n */\r\nexport function bpmToSecondsPerBeat (bpm) {\r\n  return 1 / (bpm / 60)\r\n}\r\n\r\n/**\r\n * Maps any frequency (in Hz) to an approximate MIDI note number. Result can be\r\n * rounded to get to the closest MIDI note or used as is for a sound in between\r\n * two notes.\r\n *\r\n * @param {number} frequency a frequency in Hz\r\n * @returns {number} MIDI note number (not rounded)\r\n */\r\nexport function freqToApproxMidiNr (frequency) {\r\n  return 12 * Math.log2(frequency / 440) + 69\r\n}\r\n\r\n/**\r\n * Maps any MIDI number (can be in-between, like 69.5 for A4 + 50 cents) to its\r\n * frequency.\r\n *\r\n * @param {number} midi MIDI note number\r\n * @returns {number} frequency in Hz\r\n */\r\nexport function midiToFrequency (midi) {\r\n  return 2 ** ((midi - 69) / 12) * 440\r\n}\r\n\r\n/**\r\n * Turns a chord into an integer that uniquely describes the occuring chroma.\r\n * If the same chroma occurs twice this will not make a difference\r\n * (e.g. [C4, E4, G4, C5] will equal [C4, E4, G4])\r\n *\r\n * How it works:\r\n * Chord has C, E, and G\r\n * x = 000010010001\r\n *         G  E   C\r\n *\r\n * @param {Note[]} notes notes\r\n * @returns {number} an integer that uniquely identifies this chord's chroma\r\n */\r\nexport function chordToInteger (notes) {\r\n  let value = 0x0\r\n  for (const note of notes) {\r\n    const chroma = note.pitch % 12\r\n    // eslint-disable-next-line no-bitwise\r\n    const noteInteger = 1 << chroma\r\n    // eslint-disable-next-line no-bitwise\r\n    value = value | noteInteger\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Takes two chord integer representations from chordToInteger() and computes\r\n * the Jaccard index\r\n *\r\n * @param {number} chord1 chord as integer representation\r\n * @param {number} chord2 chord as integer representation\r\n * @returns {number} Jackard index, from 0 for different to 1 for identical\r\n */\r\nexport function chordIntegerJaccardIndex (chord1, chord2) {\r\n  if (chord1 === chord2) {\r\n    return 1\r\n  }\r\n  // eslint-disable-next-line no-bitwise\r\n  const intersection = chord1 & chord2\r\n  // eslint-disable-next-line no-bitwise\r\n  const union = chord1 | chord2\r\n  const intersectionSize = countOnesOfBinary(intersection)\r\n  const unionSize = countOnesOfBinary(union)\r\n  return intersectionSize / unionSize\r\n}\r\n\r\n/*\r\n * noteTypeDurationRatios\r\n * 1 = whole note, 1/2 = half note, ...\r\n *\r\n * With added dots:\r\n * o. has duration of 1.5, o.. 1.75, ...\r\n */\r\nconst noteTypeDurationRatios = []\r\nconst baseDurations = [2, 1, 1 / 2, 1 / 4, 1 / 8, 1 / 16, 1 / 32, 1 / 64]\r\nfor (const d of baseDurations) {\r\n  for (let dots = 0; dots < 4; dots++) {\r\n    let duration = d\r\n    let toAdd = d\r\n    for (let dot = 0; dot < dots; dot++) {\r\n      // Each dot after the note adds half of the one before\r\n      toAdd /= 2\r\n      duration += toAdd\r\n    }\r\n    noteTypeDurationRatios.push({\r\n      type: d,\r\n      dots,\r\n      duration\r\n    })\r\n  }\r\n}\r\nnoteTypeDurationRatios.sort((a, b) => a.duration - b.duration)\r\n\r\n/**\r\n * Estimates the note type (whole, quarter, ...) and number of dots for dotted\r\n * notes\r\n *\r\n * @todo test if corrrectly 'calibrated'\r\n * @param {number} duration duration of a note\r\n * @param {number} bpm tempo of the piece in bpm\r\n * @returns {object} note type and number of dots\r\n *      e.g. { \"dots\": 0, \"duration\": 1, \"type\": 1 } for a whole note\r\n *      e.g. { \"dots\": 1, \"duration\": 1.5, \"type\": 1 } for a dotted whole note\r\n */\r\nexport function noteDurationToNoteType (duration, bpm) {\r\n  const quarterDuration = bpmToSecondsPerBeat(bpm)\r\n  const ratio = duration / quarterDuration / 4\r\n  // TODO: round to finest representable step?\r\n\r\n  // Binary search\r\n  return binarySearch(noteTypeDurationRatios, ratio, d => d.duration)\r\n}\r\n\r\n/**\r\n * Circle of 5ths as\r\n * [midiNr, noteAsSharp, noteAsFlat, numberOfSharps, numberOfFlats]\r\n *\r\n * @see https://en.wikipedia.org/wiki/Circle_of_fifths\r\n * @type {any[][]}\r\n */\r\nexport const CIRCLE_OF_5THS = [\r\n  [0, 'C', 'C', 0, 0],\r\n  [7, 'G', 'G', 1, 0],\r\n  [2, 'D', 'D', 2, 0],\r\n  [9, 'A', 'A', 3, 0],\r\n  [4, 'E', 'E', 4, 0],\r\n  [11, 'B', 'B', 5, 7],\r\n  [6, 'F#', 'Gb', 6, 6],\r\n  [1, 'C#', 'Db', 7, 5],\r\n  [8, 'G#', 'Ab', 0, 4],\r\n  [3, 'D#', 'Eb', 0, 3],\r\n  [10, 'A#', 'Bb', 0, 2],\r\n  [5, 'F', 'F', 0, 1]\r\n]\r\n\r\n/**\r\n * Maps number of semitones to interval name\r\n * m - minor\r\n * M - major\r\n * P - perfect\r\n * aug - augmented\r\n *\r\n * @type {Map<number,string>}\r\n */\r\nexport const INTERVALS = new Map([\r\n  [1, 'unison'],\r\n  [1, 'm2'],\r\n  [2, 'M2'],\r\n  [3, 'm3'],\r\n  [4, 'M3'],\r\n  [5, 'P4'],\r\n  [6, 'aug4'],\r\n  [7, 'P5'],\r\n  [8, 'm6'],\r\n  [9, 'M6'],\r\n  [10, 'm7'],\r\n  [11, 'M7'],\r\n  [12, 'P8']\r\n])\r\n\r\n/**\r\n * Estimates a difficulty score for playing a set of notes.\r\n * Can be used for an entire piece or measure-by-measure.\r\n *\r\n * @todo different modi, e.g. for piano or guitar (fingering is different)\r\n * @param {Note[]} notes notes\r\n * @param {string} mode mode\r\n * @param {number[]} fingering finger as number for each note, same order\r\n * @returns {number} difficulty, can range within [0, infinity)\r\n * @throws {'Invalid mode parameter'} when mode is invalid\r\n */\r\n// export function estimateDifficulty(notes, mode, fingering) {\r\n//     if (mode === 'noteDensity') {\r\n//         // Naive mode, only look at density of notes\r\n//         const startTimeExtent = extent(notes, d => d.start);\r\n//         return notes.length / startTimeExtent;\r\n//     } else if (mode === 'fingering') {\r\n//         // TODO: check complexity of fingering\r\n//     }\r\n//     throw new Error('Invalid mode parameter');\r\n// }\r\n\r\n/**\r\n * Creates a track of metronome ticks for a given tempo and meter.\r\n *\r\n * @param {number} tempo tempo in bpm, e.g. 120\r\n * @param {number[]} meter e.g. [4, 4]\r\n * @param {number} duration duration of the resulting track in seconds\r\n * @returns {object[]} metronome track with {time: number, accent: boolean}\r\n */\r\nexport function metronomeTrackFromTempoAndMeter (tempo = 120, meter = [4, 4], duration = 60) {\r\n  const track = []\r\n  const secondsPerBeat = bpmToSecondsPerBeat(tempo) / (meter[1] / 4)\r\n  let currentTime = 0\r\n  while (currentTime <= duration) {\r\n    for (let beat = 0; beat < meter[0]; beat++) {\r\n      track.push({\r\n        time: roundToNDecimals(currentTime, 4),\r\n        accent: beat % meter[0] === 0\r\n      })\r\n      currentTime += secondsPerBeat\r\n      if (currentTime > duration) {\r\n        return track\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a track of metronome ticks for a given music piece.\r\n *\r\n * @param {MusicPiece} musicPiece music piece\r\n * @param {number} [tempoFactor=1] rescale the tempo of the metronome, e.g. 2\r\n *      for twice the speed\r\n * @returns {object[]} metronome track with {time: number, accent: boolean}\r\n */\r\nexport function metronomeTrackFromMusicPiece (musicPiece, tempoFactor = 1) {\r\n  const { duration, tempos, timeSignatures } = musicPiece\r\n  const track = []\r\n  let currentTime = 0\r\n  // Time signatures\r\n  const initialTimeSig = timeSignatures[0].signature ?? [4, 4]\r\n  let [beatCount, beatType] = initialTimeSig\r\n  const timeSigsTodo = timeSignatures.slice(1)\r\n  // Tempi\r\n  const initialTempo = tempos[0].bpm ?? 120\r\n  let secondsPerBeat = bpmToSecondsPerBeat(initialTempo) / (beatType / 4)\r\n  const temposTodo = tempos.slice(1)\r\n  while (currentTime <= duration) {\r\n    // Always use the most recent tempo and meter\r\n    const lookahead = currentTime + secondsPerBeat\r\n    if (timeSigsTodo.length > 0 && timeSigsTodo[0].time <= lookahead) {\r\n      // console.log(\r\n      //     'timesig change to', timeSigsTodo[0].signature,\r\n      //     'after', track.length,\r\n      //     'beeps, at', currentTime);\r\n      [beatCount, beatType] = timeSigsTodo[0].signature\r\n      timeSigsTodo.shift()\r\n    }\r\n    if (temposTodo.length > 0 && temposTodo[0].time <= lookahead) {\r\n      // console.log(\r\n      //     'tempo change to', temposTodo[0].bpm,\r\n      //     'after', track.length,\r\n      //     'beeps, at', currentTime);\r\n      secondsPerBeat = bpmToSecondsPerBeat(temposTodo[0].bpm) / (beatType / 4)\r\n      temposTodo.shift()\r\n    }\r\n    for (let beat = 0; beat < beatCount; beat++) {\r\n      track.push({\r\n        time: roundToNDecimals(currentTime / tempoFactor, 3),\r\n        accent: beat === 0\r\n      })\r\n      currentTime += secondsPerBeat\r\n      if (currentTime > duration) {\r\n        return track\r\n      }\r\n    }\r\n  }\r\n  return track\r\n}\r\n", "import { group, max } from 'd3'\r\nimport Note from '../types/Note.js'\r\nimport { bpmToSecondsPerBeat } from '../utils/MusicUtils.js'\r\nimport { roundToNDecimals } from '../utils/MathUtils.js'\r\n\r\n/**\r\n * @module fileFormats/MidiParser\r\n * @todo parse pitch bends\r\n * @todo after tempo changes notes and measure time do not align,\r\n *       see \"[Test] Tempo change.mid\"\r\n */\r\n\r\n// Precision in number of digits when rounding seconds\r\nconst ROUNDING_PRECISION = 5\r\n\r\n/**\r\n * Parses a MIDI JSON file to get Note objects with absolute time in seconds.\r\n *\r\n * @see https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * @param {object} data MIDI data in JSON format\r\n * @param {boolean} splitFormat0IntoTracks split MIDI format 0 data into tracks\r\n *      instead of using channels?\r\n * @param {boolean} log set to true to log results etc. to the console\r\n * @returns {object} including an array of note objects and meta information\r\n */\r\nexport function preprocessMidiFileData (data, splitFormat0IntoTracks = true, log = false) {\r\n  if (data === null || data === undefined) {\r\n    return\r\n  }\r\n  if (!data.track) {\r\n    console.warn('[MidiParser] MIDI data has no track')\r\n    return\r\n  }\r\n  if (log) {\r\n    console.groupCollapsed('[MidiParser] Preprocessing MIDI file data')\r\n  }\r\n  // Parse notes\r\n  let parsedTracks = []\r\n  const { tempoChanges, beatTypeChanges, keySignatureChanges } = getSignatureChanges(data.track)\r\n  for (const track of data.track) {\r\n    const t = parseMidiTrack(\r\n      track,\r\n      data.timeDivision,\r\n      tempoChanges,\r\n      beatTypeChanges,\r\n      keySignatureChanges,\r\n      log\r\n    )\r\n    if (t !== null) {\r\n      parsedTracks.push(t)\r\n    }\r\n  }\r\n  // Split MIDI format 0 data into tracks instead of having channels\r\n  if (data.formatType === 0 && splitFormat0IntoTracks && parsedTracks.length === 1) {\r\n    parsedTracks = splitFormat0(parsedTracks)\r\n  }\r\n  // Generate measure lines from tempo and beat type changes\r\n  const totalTime = max(parsedTracks, d => d?.totalTime ?? 0)\r\n  const measureLinePositions = getMeasureLines(tempoChanges, beatTypeChanges, totalTime)\r\n  // Get measure indices, the note's index where a new measure starts, for each track\r\n  for (const track of parsedTracks) {\r\n    track.measureIndices = getMeasureIndices(track.noteObjs, measureLinePositions)\r\n  }\r\n  // Resulting track\r\n  const result = {\r\n    tracks: parsedTracks,\r\n    totalTime,\r\n    tempoChanges,\r\n    beatTypeChanges,\r\n    keySignatureChanges,\r\n    measureLinePositions\r\n  }\r\n  if (log) {\r\n    console.log(`Got ${parsedTracks.length} MIDI tracks`, result)\r\n    console.groupEnd()\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Parses a single MIDI track and pushes it to parsedTracks if it contains notes\r\n *\r\n * @private\r\n * @param {object} track a MIDI track\r\n * @param {number} timeDivision MIDI time division\r\n * @param {object[]} tempoChanges array with tempo change events\r\n * @param {object[]} beatTypeChanges array with beat type change events\r\n * @param {object[]} keySignatureChanges array with key signature change events\r\n * @param {boolean} log if true, debug info will be logged to the console\r\n * @returns {object} parsed track\r\n */\r\nfunction parseMidiTrack (track, timeDivision, tempoChanges, beatTypeChanges, keySignatureChanges, log) {\r\n  const notes = []\r\n  let tempo = tempoChanges[0]?.tempo ?? 120\r\n  let currentTick = 0\r\n  let currentTime\r\n  let milliSecondsPerTick = getMillisecondsPerTick(tempo, timeDivision)\r\n  let tickOfLastTempoChange = 0\r\n  let timeOfLastTempoChange = 0\r\n  // This map stores note-on note that have not yet been finished by a note-off\r\n  const unfinishedNotes = new Map()\r\n  for (const event of track.event) {\r\n    const type = event.type\r\n    // Ignore delta time if it is a meta event (fixes some parsing issues)\r\n    if (type === EVENT_TYPES.meta) {\r\n      continue\r\n    }\r\n    currentTick += event.deltaTime\r\n    // Update beat type change times\r\n    for (const btc of beatTypeChanges) {\r\n      if (btc.time === undefined && btc.tick <= currentTick) {\r\n        const t = (btc.tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n        btc.time = roundToNDecimals(t, ROUNDING_PRECISION)\r\n      }\r\n    }\r\n    // Update key signature change times\r\n    for (const ksc of keySignatureChanges) {\r\n      if (ksc.time === undefined && ksc.tick <= currentTick) {\r\n        const t = (ksc.tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n        ksc.time = roundToNDecimals(t, ROUNDING_PRECISION)\r\n      }\r\n    }\r\n    // Handle last tempo change in track differently\r\n    let mostRecentTempoChange\r\n    if (tempoChanges.length > 0 && currentTick > tempoChanges[tempoChanges.length - 1].tick) {\r\n      mostRecentTempoChange = tempoChanges[tempoChanges.length - 1]\r\n    }\r\n    // Get current tempo, as soon as we are too far, 1 step back\r\n    for (let index = 1; index < tempoChanges.length; index++) {\r\n      const tick = tempoChanges[index].tick\r\n      if (tick > currentTick) {\r\n        const change = tempoChanges[index - 1]\r\n        mostRecentTempoChange = change\r\n        break\r\n      }\r\n    }\r\n    // React to tempo changes\r\n    if (mostRecentTempoChange && mostRecentTempoChange.tempo !== tempo) {\r\n      const tick = mostRecentTempoChange.tick\r\n      timeOfLastTempoChange = (tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n      tickOfLastTempoChange = tick\r\n      mostRecentTempoChange.time = roundToNDecimals(timeOfLastTempoChange, ROUNDING_PRECISION)\r\n      tempo = mostRecentTempoChange.tempo\r\n      milliSecondsPerTick = getMillisecondsPerTick(tempo, timeDivision)\r\n    }\r\n    // Update current time in seconds\r\n    currentTime = (currentTick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n    // Skip events that are neither note-on nor note-off\r\n    if (type !== EVENT_TYPES.noteOn && type !== EVENT_TYPES.noteOff) {\r\n      continue\r\n    }\r\n    const [pitch, velocity] = event.data\r\n    const channel = event.channel\r\n    const key = `${pitch} ${channel}`\r\n    if (type === EVENT_TYPES.noteOff || (type === EVENT_TYPES.noteOn && velocity === 0)) {\r\n      // Handle note-off\r\n      if (unfinishedNotes.has(key)) {\r\n        unfinishedNotes.get(key).end = roundToNDecimals(currentTime, ROUNDING_PRECISION)\r\n        unfinishedNotes.delete(key)\r\n      } else {\r\n        if (log) {\r\n          console.warn('Did not find an unfinished note for note-off event!')\r\n          console.log(event)\r\n        }\r\n      }\r\n    } else if (type === EVENT_TYPES.noteOn) {\r\n      // Handle note-on\r\n      const newNote = new Note(\r\n        pitch,\r\n        roundToNDecimals(currentTime, ROUNDING_PRECISION),\r\n        velocity,\r\n        channel\r\n      )\r\n      notes.push(newNote)\r\n      unfinishedNotes.set(key, newNote)\r\n    } else {\r\n      continue\r\n    }\r\n  }\r\n  // Fix missing note ends\r\n  const neededToFix = []\r\n  for (const note of notes) {\r\n    if (note.end === -1) {\r\n      note.end = roundToNDecimals(currentTime, ROUNDING_PRECISION)\r\n      neededToFix.push(note)\r\n    }\r\n  }\r\n  if (neededToFix.length > 0) {\r\n    console.warn(`had to fix ${neededToFix.length} notes`)\r\n    console.log(neededToFix)\r\n  }\r\n  // Save parsed track with meta information\r\n  const { trackName, instrument, instrumentName } = getInstrumentAndTrackName(track)\r\n  if (notes.length > 0) {\r\n    const parsedTrack = {\r\n      noteObjs: notes,\r\n      totalTime: currentTime,\r\n      trackName: trackName ?? 'Track',\r\n      instrument,\r\n      instrumentName: instrumentName ?? 'Unknown instrument'\r\n    }\r\n    return parsedTrack\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Finds out the name of the track and the instrument, if this data is available\r\n *\r\n * @private\r\n * @param {object} track MIDI track\r\n * @returns {{trackName, instrument, instrumentName}} meta data with either\r\n *      values or null when no information found\r\n */\r\nfunction getInstrumentAndTrackName (track) {\r\n  let trackName = null\r\n  let instrument = null\r\n  let instrumentName = null\r\n  for (const event of track.event) {\r\n    if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.trackName) {\r\n      trackName = event.data\r\n    }\r\n    if (event.type === EVENT_TYPES.programChange) {\r\n      instrument = event.data\r\n    }\r\n    if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.instrumentName) {\r\n      instrumentName = event.data\r\n    }\r\n  }\r\n  return {\r\n    trackName,\r\n    instrument,\r\n    instrumentName\r\n  }\r\n}\r\n\r\n/**\r\n * Caclulates the time positions of measure lines by looking at tempo and beat\r\n * type change events\r\n *\r\n * @private\r\n * @param {object[]} tempoChanges tempo change events\r\n * @param {object[]} beatTypeChanges beat type change events\r\n * @param {number} totalTime total time\r\n * @returns {number[]} measure line times in seconds\r\n */\r\nfunction getMeasureLines (tempoChanges, beatTypeChanges, totalTime) {\r\n  const measureLines = []\r\n  // Generate measure lines from tempo and beat type changes\r\n  let tempo = 120\r\n  let beats = 4\r\n  let beatType = 4\r\n  let currentTime = 0\r\n  let currentBeatsInMeasure = 0\r\n  let timeOfLastTempoChange = 0\r\n  let timeSinceLastTempoChange = 0\r\n  while (currentTime < totalTime) {\r\n    // Get current tempo and beat type\r\n    let mostRecentTempoChange\r\n    for (const t of tempoChanges) {\r\n      if (t.time <= currentTime) {\r\n        mostRecentTempoChange = t.tempo\r\n      }\r\n    }\r\n    if (mostRecentTempoChange && mostRecentTempoChange !== tempo) {\r\n      timeOfLastTempoChange = currentTime\r\n      timeSinceLastTempoChange = 0\r\n      tempo = mostRecentTempoChange\r\n    }\r\n    for (const b of beatTypeChanges) {\r\n      if (b.time <= currentTime) {\r\n        beats = b.beats\r\n        beatType = b.beatType\r\n      }\r\n    }\r\n    // Update time and beats\r\n    currentBeatsInMeasure++\r\n    const secondsPerBeat = bpmToSecondsPerBeat(tempo) / (beatType / 4)\r\n    timeSinceLastTempoChange += secondsPerBeat\r\n    currentTime = timeOfLastTempoChange + timeSinceLastTempoChange\r\n    if (currentBeatsInMeasure >= beats) {\r\n      // Measure is full\r\n      currentBeatsInMeasure = 0\r\n      measureLines.push(roundToNDecimals(currentTime, ROUNDING_PRECISION))\r\n    }\r\n  }\r\n  return measureLines\r\n}\r\n\r\n/**\r\n * For the notes of one track, computes the notes' indices where new measures\r\n * start.\r\n *\r\n * @param {Note[]} notes notes of a track\r\n * @param {numer[]} measureTimes times in seconds where new measures start\r\n * @returns {number[]} measure indices\r\n */\r\nfunction getMeasureIndices (notes, measureTimes) {\r\n  const measureIndices = []\r\n  const todo = [...measureTimes]\r\n  for (const [index, note] of notes.entries()) {\r\n    if (note.start >= todo[0]) {\r\n      todo.shift()\r\n      measureIndices.push(index)\r\n    }\r\n  }\r\n  return measureIndices\r\n}\r\n\r\n/**\r\n * Split MIDI format 0 data into tracks instead of having channels,\r\n * creates one track for each channel\r\n *\r\n * @private\r\n * @param {Note[][]} tracks parsed MIDI tracks\r\n * @returns {Note[][]} splitted tracks\r\n */\r\nfunction splitFormat0 (tracks) {\r\n  if (tracks.length > 1) {\r\n    console.warn('Splitting a format 0 file with more than 1 track will result in all but the first beeing lost!')\r\n  }\r\n  // console.log('Splitting format 0 file into tracks based on channel');\r\n  const grouped = group(tracks[0].noteObjs, d => d.channel)\r\n  // All tracks will share the meta infomation of the 0th track\r\n  // Assign the splitted-by-channel notes to their new tracks\r\n  const splittedTracks = []\r\n  for (const notes of grouped.values()) {\r\n    splittedTracks.push({\r\n      ...tracks[0],\r\n      noteObjs: notes\r\n    })\r\n  }\r\n  return splittedTracks\r\n}\r\n\r\n/**\r\n * Given the tempo and time division, returns the number of milliseconds\r\n * each MIDI time tick corresponds to\r\n *\r\n * @private\r\n * @param {number} tempo tempo\r\n * @param {number} timeDivision time division\r\n * @returns {number} milli seconds per tick\r\n */\r\nfunction getMillisecondsPerTick (tempo, timeDivision) {\r\n  const milliSecondsPerBeat = 1 / tempo * 60_000\r\n  const milliSecondsPerTick = milliSecondsPerBeat / timeDivision\r\n  return milliSecondsPerTick\r\n}\r\n\r\n/**\r\n * Retrieves all tempo and beat type changes from a MIDI file's tracks.\r\n *\r\n * @see https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * @private\r\n * @param {Array} tracks MIDI JSON file tracks\r\n * @returns {object} {tempoChanges, beatTypeChanges} as arrays of objects, which\r\n *      contain the MIDI tick and the new information\r\n */\r\nfunction getSignatureChanges (tracks) {\r\n  const tempoChanges = []\r\n  const beatTypeChanges = []\r\n  const keySignatureChanges = []\r\n  let currentTick = 0\r\n  let lastTempo = null\r\n  for (const track of tracks) {\r\n    for (const event of track.event) {\r\n      // Get timing of events\r\n      currentTick += event.deltaTime\r\n      // Tempo change\r\n      if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.setTempo) {\r\n        const milliSecondsPerQuarter = event.data / 1000\r\n        const tempo = Math.round(1 / (milliSecondsPerQuarter / 60_000))\r\n        // Ignore tempo changes that don't change the tempo\r\n        if (tempo !== lastTempo) {\r\n          tempoChanges.push({\r\n            tick: currentTick,\r\n            tempo,\r\n            time: currentTick === 0 ? 0 : undefined\r\n          })\r\n          lastTempo = tempo\r\n        }\r\n      }\r\n      // Beat type change\r\n      if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.timeSignature) {\r\n        const d = event.data\r\n        const beats = d[0]\r\n        const beatType = 2 ** d[1]\r\n        const newEntry = {\r\n          tick: currentTick,\r\n          beats,\r\n          beatType\r\n        }\r\n        if (beatTypeChanges.length === 0) {\r\n          beatTypeChanges.push(newEntry)\r\n        } else {\r\n          // If it id not change, do not add\r\n          const last = beatTypeChanges[beatTypeChanges.length - 1]\r\n          if (last.beats !== beats || last.beatType !== beatType) {\r\n            beatTypeChanges.push(newEntry)\r\n          }\r\n        }\r\n        // console.log(`Metro: ${d[2]}`);\r\n        // console.log(`32nds: ${d[3]}`);\r\n      }\r\n      // Key change\r\n      if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.keySignature) {\r\n        // console.log('keychange', event);\r\n        const d = event.data\r\n        if (!KEY_SIG_MAP.has(d)) {\r\n          console.warn('[MidiParser] Invalid key signature', d)\r\n        } else {\r\n          const { key, scale } = KEY_SIG_MAP.get(d)\r\n          const newEntry = {\r\n            tick: currentTick,\r\n            key,\r\n            scale\r\n          }\r\n          if (keySignatureChanges.length === 0) {\r\n            keySignatureChanges.push(newEntry)\r\n          } else {\r\n            // If it id not change, do not add\r\n            const last = keySignatureChanges[keySignatureChanges.length - 1]\r\n            if (last.key !== key || last.scale !== scale) {\r\n              keySignatureChanges.push(newEntry)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Default values\r\n  if (tempoChanges.length === 0 || tempoChanges[0].time > 0) {\r\n    tempoChanges.unshift({ tempo: 120, time: 0 })\r\n  }\r\n  if (beatTypeChanges.length === 0 || beatTypeChanges[0].time > 0) {\r\n    beatTypeChanges.unshift({ beats: 4, beatType: 4, time: 0 })\r\n  }\r\n  if (keySignatureChanges.length === 0 || keySignatureChanges[0].time > 0) {\r\n    keySignatureChanges.unshift({ key: 'C', scale: 'major', time: 0 })\r\n  }\r\n  return { tempoChanges, beatTypeChanges, keySignatureChanges }\r\n}\r\n\r\n/**\r\n * MIDI event types and meta types and their codes\r\n *\r\n * @see https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * Event Type         Value   Value decimal    Parameter 1         Parameter 2\r\n * Note Off           0x8       8              note number         velocity\r\n * Note On            0x9       9              note number         velocity\r\n * Note Aftertouch    0xA      10              note number         aftertouch value\r\n * Controller         0xB      11              controller number   controller value\r\n * Program Change     0xC      12              program number      not used\r\n * Channel Aftertouch 0xD      13              aftertouch value    not used\r\n * Pitch Bend         0xE      14              pitch value (LSB)   pitch value (MSB)\r\n * Meta               0xFF    255                 parameters depend on meta type\r\n * @type {object}\r\n */\r\nconst EVENT_TYPES = {\r\n  noteOff: 0x8,\r\n  noteOn: 0x9,\r\n  noteAftertouch: 0xA,\r\n  controller: 0xB,\r\n  programChange: 0xC,\r\n  channelAftertouch: 0xD,\r\n  pitchBend: 0xE,\r\n  meta: 0xFF\r\n}\r\n/**\r\n * @type {object}\r\n */\r\nconst META_TYPES = {\r\n  sequenceNumber: 0x0,\r\n  textEvent: 0x1,\r\n  copyright: 0x2,\r\n  trackName: 0x3,\r\n  instrumentName: 0x4,\r\n  lyrics: 0x5,\r\n  marker: 0x6,\r\n  cuePoint: 0x7,\r\n  channelPrefix: 0x20,\r\n  endOfTrack: 0x2F,\r\n  setTempo: 0x51,\r\n  smpteOffset: 0x54,\r\n  timeSignature: 0x58,\r\n  keySignature: 0x59,\r\n  sequencerSpecific: 0x7F\r\n}\r\n\r\n/**\r\n * Maps needed for key signature detection from number of sharps / flats\r\n *\r\n * @type {Map<number,object>}\r\n * @see https://www.recordingblogs.com/wiki/midi-key-signature-meta-message\r\n */\r\nconst KEY_SIG_MAP = new Map([\r\n  // major\r\n  [0xF9_00, { key: 'Cb', scale: 'major' }],\r\n  [0xFA_00, { key: 'Gb', scale: 'major' }],\r\n  [0xFB_00, { key: 'Db', scale: 'major' }],\r\n  [0xFC_00, { key: 'Ab', scale: 'major' }],\r\n  [0xFD_00, { key: 'Eb', scale: 'major' }],\r\n  [0xFE_00, { key: 'Bb', scale: 'major' }],\r\n  [0xFF_00, { key: 'F', scale: 'major' }],\r\n  [0x00_00, { key: 'C', scale: 'major' }],\r\n  [0x01_00, { key: 'G', scale: 'major' }],\r\n  [0x02_00, { key: 'D', scale: 'major' }],\r\n  [0x03_00, { key: 'A', scale: 'major' }],\r\n  [0x04_00, { key: 'E', scale: 'major' }],\r\n  [0x05_00, { key: 'B', scale: 'major' }],\r\n  [0x06_00, { key: 'F#', scale: 'major' }],\r\n  [0x07_00, { key: 'C#', scale: 'major' }],\r\n  // minor\r\n  [0xF9_01, { key: 'Ab', scale: 'minor' }],\r\n  [0xFA_01, { key: 'Eb', scale: 'minor' }],\r\n  [0xFB_01, { key: 'Bb', scale: 'minor' }],\r\n  [0xFC_01, { key: 'F', scale: 'minor' }],\r\n  [0xFD_01, { key: 'C', scale: 'minor' }],\r\n  [0xFE_01, { key: 'G', scale: 'minor' }],\r\n  [0xFF_01, { key: 'D', scale: 'minor' }],\r\n  [0x00_01, { key: 'A', scale: 'minor' }],\r\n  [0x01_01, { key: 'E', scale: 'minor' }],\r\n  [0x02_01, { key: 'B', scale: 'minor' }],\r\n  [0x03_01, { key: 'F#', scale: 'minor' }],\r\n  [0x04_01, { key: 'C#', scale: 'minor' }],\r\n  [0x05_01, { key: 'G#', scale: 'minor' }],\r\n  [0x06_01, { key: 'D#', scale: 'minor' }],\r\n  [0x07_01, { key: 'A#', scale: 'minor' }]\r\n])\r\n", "import { getMidiNoteByNr } from '../fileFormats/Midi.js'\n\n/**\n * Stores a sequence of pitches and provides some methods to simplify and\n * manipulate it.\n *\n * @todo implement keepOnlyHighestConcurrentNotes\n */\nclass PitchSequence {\n  /**\n     * @param {number[]} pitches pitches\n     */\n  constructor (pitches = []) {\n    this._pitches = pitches\n  }\n\n  /**\n     * Creates a pitch sequence from an array of Notes\n     *\n     * @param {Note[]} notes notes\n     * @returns {PitchSequence} pitch sequence\n     */\n  static fromNotes (notes = []) {\n    const pitches = [...notes]\n      .sort((a, b) => {\n        if (a.start === b.start) {\n          return a.pitch - b.pitch\n        }\n        return a.start - b.start\n      })\n      .map(d => d.pitch)\n    return new PitchSequence(pitches)\n  }\n\n  /**\n     * @param {string} string a string of Unicode characters\n     * @returns {PitchSequence} pitch sequence\n     */\n  static fromCharString (string) {\n    if (!string || string.length === 0) { return new PitchSequence() }\n    const pitches = [...string].map((d, index) => string.charCodeAt(index))\n    return new PitchSequence(pitches)\n  }\n\n  /**\n     * @returns {number[]} pitches\n     */\n  getPitches () {\n    return this._pitches\n  }\n\n  /**\n     * @returns {number} number of pitches\n     */\n  length () {\n    return this._pitches.length\n  }\n\n  /**\n     * Turns pitch sequence into a string by turning each  pitch into a character\n     * (based on Unicode index)\n     *\n     * @returns {string} string representation of note pitches\n     */\n  toCharString () {\n    if (!this._pitches || this._pitches.length === 0) {\n      return ''\n    }\n    return String.fromCharCode(...this._pitches)\n  }\n\n  /**\n     * @returns {string} a string with the notes' names\n     */\n  toNoteNameString () {\n    return this._pitches.map(p => getMidiNoteByNr(p).label).join(' ')\n  }\n\n  /**\n     * Reverses the order of pitches in this PitchSequence\n     *\n     * @returns {PitchSequence} this\n     */\n  reverse () {\n    this._pitches = this._pitches.reverse()\n    return this\n  }\n\n  /**\n     * Takes a sequence of MIDI pitches and nomralizes them to be in [0, 11]\n     *\n     * @returns {PitchSequence} this\n     */\n  removeOctaves () {\n    this._pitches = this._pitches.map(d => d % 12)\n    return this\n  }\n\n  /**\n     * Transforms note pitches to intervals, i.e. diffrences between to subsequent\n     * notes: C, C#, C, D => 1, -1, 2\n     *\n     * @returns {number[]} intervals\n     */\n  toIntervals () {\n    const p = this._pitches\n    if (!p || p.length === 0 || p.length < 2) {\n      return []\n    }\n    const result = Array.from({ length: p.length - 1 })\n    for (let index = 1; index < p.length; index++) {\n      result[index - 1] = p[index] - p[index - 1]\n    }\n    return result\n  }\n\n  /**\n     * @returns {PitchSequence} clone\n     */\n  clone () {\n    return new PitchSequence(this._pitches)\n  }\n\n  /**\n     * Returns true if this NoteArray and otherNoteArray have equal attributes.\n     *\n     * @param {NoteArray} otherPitchSequence another NoteArray\n     * @returns {boolean} true if equal\n     */\n  equals (otherPitchSequence) {\n    if (!(otherPitchSequence instanceof PitchSequence)) {\n      return false\n    }\n    const p = otherPitchSequence.getPitches()\n    if (this._pitches.length !== p.length) {\n      return false\n    }\n    for (const [index, element] of p.entries()) {\n      if (this._pitches[index] !== element) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport default PitchSequence\n", "import * as d3 from 'd3'\r\n\r\n/**\r\n * @module graphics/Canvas\r\n * @todo combine multiple canvases into one, by drawing over common background\r\n * @todo save canvas as file https://www.digitalocean.com/community/tutorials/js-canvas-toblob\r\n */\r\n\r\n/**\r\n * Sets up a canvas rescaled to device pixel ratio\r\n *\r\n * @param {HTMLCanvasElement} canvas canvas element\r\n * @returns {CanvasRenderingContext2D} canvas rendering context\r\n */\r\nexport function setupCanvas (canvas) {\r\n  // Fix issues when importing musicvis-lib in Node.js\r\n  if (!window) { return }\r\n  // Get the device pixel ratio, falling back to 1.\r\n  const dpr = window.devicePixelRatio || 1\r\n  // Get the size of the canvas in CSS pixels.\r\n  const rect = canvas.getBoundingClientRect()\r\n  // Give the canvas pixel dimensions of their CSS\r\n  // sizes times the device pixel ratio.\r\n  canvas.width = rect.width * dpr\r\n  canvas.height = rect.height * dpr\r\n  const context = canvas.getContext('2d')\r\n  // Scale all drawing operations by the dpr\r\n  context.scale(dpr, dpr)\r\n  return context\r\n}\r\n\r\n/**\r\n * Draws a stroked straight line.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the start\r\n * @param {number} y1 y coordinate of the start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @returns {void}\r\n * @example\r\n *      // Set the strokeStyle first\r\n *      context.strokeStyle = 'black';\r\n *      // Let's draw an X\r\n *      Canvas.drawLine(context, 0, 0, 50, 50);\r\n *      Canvas.drawLine(context, 0, 50, 50, 0);\r\n */\r\nexport function drawLine (context, x1, y1, x2, y2) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a stroked straight horizontal line.\r\n *\r\n * @deprecated Use context.fillRect(x1, y, x2-x1, strokeWidth)\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the start\r\n * @param {number} y y coordinate of the start\r\n * @param {number} x2 x coordinate of end\r\n * @returns {void}\r\n */\r\nexport function drawHLine (context, x1, y, x2) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y)\r\n  context.lineTo(x2, y)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a stroked straight vertical line.\r\n *\r\n * @deprecated Use context.fillRect(x1, y1, strokeWidth, y2-y1)\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of the start\r\n * @param {number} y1 y coordinate of the start\r\n * @param {number} y2 y coordinate of end\r\n * @returns {void}\r\n */\r\nexport function drawVLine (context, x, y1, y2) {\r\n  context.beginPath()\r\n  context.moveTo(x, y1)\r\n  context.lineTo(x, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a line that bows to the right in the direction of travel (looks like a\r\n * left turn), thereby encoding direction. Useful for node-link graphs.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the start\r\n * @param {number} y1 y coordinate of the start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {number} [strength=0.5] how much the bow deviates from a straight line\r\n *      towards the right, negative values will make bows to the left\r\n */\r\nexport function drawBowRight (context, x1, y1, x2, y2, strength = 0.5) {\r\n  const middleX = (x1 + x2) / 2\r\n  const middleY = (y1 + y2) / 2\r\n  const dx = x2 - x1\r\n  const dy = y2 - y1\r\n  const normalX = -dy\r\n  const normalY = dx\r\n  const cx = middleX + strength * normalX\r\n  const cy = middleY + strength * normalY\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.bezierCurveTo(cx, cy, cx, cy, x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a stroked circle.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} radius radius\r\n * @returns {void}\r\n */\r\nexport function drawCircle (context, x, y, radius) {\r\n  context.beginPath()\r\n  context.arc(x, y, radius, 0, 2 * Math.PI)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a filled circle.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} radius radius\r\n * @returns {void}\r\n */\r\nexport function drawFilledCircle (context, x, y, radius) {\r\n  context.beginPath()\r\n  context.arc(x, y, radius, 0, 2 * Math.PI)\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a filled triangle like this: /\\\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} halfSize half of the size\r\n * @returns {void}\r\n */\r\nexport function drawTriangle (context, x, y, halfSize) {\r\n  context.beginPath()\r\n  context.moveTo(x - halfSize, y + halfSize)\r\n  context.lineTo(x + halfSize, y + halfSize)\r\n  context.lineTo(x, y - halfSize)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a diamond like this: <>\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} halfSize half of the size\r\n * @returns {void}\r\n */\r\nexport function drawDiamond (context, x, y, halfSize) {\r\n  context.beginPath()\r\n  context.moveTo(x - halfSize, y)\r\n  context.lineTo(x, y - halfSize)\r\n  context.lineTo(x + halfSize, y)\r\n  context.lineTo(x, y + halfSize)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws an X\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} halfSize half of the size\r\n * @returns {void}\r\n */\r\nexport function drawX (context, x, y, halfSize) {\r\n  context.save()\r\n  context.lineWidth = 2\r\n  context.beginPath()\r\n  context.moveTo(x - halfSize, y - halfSize)\r\n  context.lineTo(x + halfSize, y + halfSize)\r\n  context.moveTo(x - halfSize, y + halfSize)\r\n  context.lineTo(x + halfSize, y - halfSize)\r\n  context.stroke()\r\n  context.restore()\r\n}\r\n\r\n/**\r\n * Draws a trapezoid that looks like a rectangle but gets narrower at the right\r\n * end, so better show where one ends and the next begins.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of top left\r\n * @param {number} y y coordinate of top left\r\n * @param {number} width width\r\n * @param {number} height height (of left side)\r\n * @param {number} height2 height (of right side)\r\n * @returns {void}\r\n */\r\nexport function drawNoteTrapezoid (context, x, y, width, height, height2) {\r\n  context.beginPath()\r\n  context.moveTo(x, y)\r\n  context.lineTo(x, y + height)\r\n  context.lineTo(x + width, y + (height / 2 + height2 / 2))\r\n  context.lineTo(x + width, y + (height / 2 - height2 / 2))\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a trapezoid that looks like a rectangle but gets narrower at the top\r\n * end, so better show where one ends and the next begins.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of bounding rect's top left\r\n * @param {number} y y coordinate of bounding rect's top left\r\n * @param {number} width width (of bounding rect / bottom side)\r\n * @param {number} height height\r\n * @param {number} width2 width (of top side)\r\n * @returns {void}\r\n */\r\nexport function drawNoteTrapezoidUpwards (context, x, y, width, height, width2) {\r\n  context.beginPath()\r\n  context.lineTo(x, y + height)\r\n  context.lineTo(x + width, y + height)\r\n  context.lineTo(x + (width / 2 + width2 / 2), y)\r\n  context.lineTo(x + (width / 2 - width2 / 2), y)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a rectangle with rounded corners, does not fill or stroke by itself\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of bounding rect's top left\r\n * @param {number} y y coordinate of bounding rect's top left\r\n * @param {number} width width\r\n * @param {number} height height\r\n * @param {number} radius rounding radius\r\n * @returns {void}\r\n */\r\nexport function drawRoundedRect (context, x, y, width, height, radius) {\r\n  if (width < 0) { return }\r\n  context.beginPath()\r\n  context.moveTo(x + radius, y)\r\n  context.lineTo(x + width - radius, y)\r\n  context.quadraticCurveTo(x + width, y, x + width, y + radius)\r\n  context.lineTo(x + width, y + height - radius)\r\n  context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\r\n  context.lineTo(x + radius, y + height)\r\n  context.quadraticCurveTo(x, y + height, x, y + height - radius)\r\n  context.lineTo(x, y + radius)\r\n  context.quadraticCurveTo(x, y, x + radius, y)\r\n  context.closePath()\r\n}\r\n\r\n/**\r\n * Draws a horizontal, then vertical line to connect two points (or the other\r\n * way round when xFirst == false)\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of start\r\n * @param {number} y1 y coordinate of start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {boolean} [xFirst=true] controls whether to go first in x or y direction\r\n */\r\nexport function drawCornerLine (context, x1, y1, x2, y2, xFirst = true) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  xFirst\r\n    ? context.lineTo(x2, y1)\r\n    : context.lineTo(x1, y2)\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a rounded version of drawCornerLine().\r\n * Only works for dendrograms drawn from top-dowm, use\r\n * drawRoundedCornerLineRightLeft for right-to-left dendrograms.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of start\r\n * @param {number} y1 y coordinate of start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {number} [maxRadius=25] maximum radius, fixes possible overlaps\r\n */\r\nexport function drawRoundedCornerLine (context, x1, y1, x2, y2, maxRadius = 25) {\r\n  const xDist = Math.abs(x2 - x1)\r\n  const yDist = Math.abs(y2 - y1)\r\n  const radius = Math.min(xDist, yDist, maxRadius)\r\n  const cx = x1 < x2 ? x2 - radius : x2 + radius\r\n  const cy = y1 < y2 ? y1 + radius : y1 - radius\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  if (x1 < x2) {\r\n    context.arc(cx, cy, radius, 1.5 * Math.PI, 2 * Math.PI)\r\n  } else {\r\n    context.arc(cx, cy, radius, 1.5 * Math.PI, Math.PI, true)\r\n  }\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a rounded version of drawRoundedCornerLine for right-to-left\r\n * dendrograms.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of start\r\n * @param {number} y1 y coordinate of start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {number} [maxRadius=25] maximum radius, fixes possible overlaps\r\n */\r\nexport function drawRoundedCornerLineRightLeft (\r\n  context,\r\n  x1,\r\n  y1,\r\n  x2,\r\n  y2,\r\n  maxRadius = 25\r\n) {\r\n  const xDist = Math.abs(x2 - x1)\r\n  const yDist = Math.abs(y2 - y1)\r\n  const radius = Math.min(xDist, yDist, maxRadius)\r\n  const cx = x1 < x2 ? x1 + radius : x1 - radius\r\n  const cy = y1 < y2 ? y2 - radius : y2 + radius\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  if (y1 < y2) {\r\n    context.arc(cx, cy, radius, 0, 0.5 * Math.PI)\r\n  } else {\r\n    context.arc(cx, cy, radius, 0, 1.5 * Math.PI, true)\r\n  }\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a hexagon, call context.fill() or context.stroke() afterwards.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} cx center x\r\n * @param {number} cy center y\r\n * @param {number} radius radius of the circle on which the points are placed\r\n */\r\nexport function drawHexagon (context, cx, cy, radius) {\r\n  context.beginPath()\r\n  for (let index = 0; index < 6; index++) {\r\n    // Start at 30\u00B0 TODO: allow to specify\r\n    const angle = (60 * index + 30) / 180 * Math.PI\r\n    const x = cx + Math.cos(angle) * radius\r\n    const y = cy + Math.sin(angle) * radius\r\n    if (index === 0) {\r\n      context.moveTo(x, y)\r\n    } else {\r\n      context.lineTo(x, y)\r\n    }\r\n  }\r\n  context.closePath()\r\n}\r\n\r\n/**\r\n * Draws a Bezier curve to connect to points in X direction.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the first point\r\n * @param {number} y1 y coordinate of the first point\r\n * @param {number} x2 x coordinate of the second point\r\n * @param {number} y2 y coordinate of the second point\r\n */\r\nexport function drawBezierConnectorX (context, x1, y1, x2, y2) {\r\n  const deltaX = (x2 - x1) / 2\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.bezierCurveTo(x1 + deltaX, y1, x1 + deltaX, y2, x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a Bezier curve to connect to points in Y direction.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the first point\r\n * @param {number} y1 y coordinate of the first point\r\n * @param {number} x2 x coordinate of the second point\r\n * @param {number} y2 y coordinate of the second point\r\n */\r\nexport function drawBezierConnectorY (context, x1, y1, x2, y2) {\r\n  const deltaY = (y2 - y1) / 2\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.bezierCurveTo(x1, y1 + deltaY, x2, y1 + deltaY, x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a rounded corner, requires x and y distances between points to be\r\n * equal.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the first point\r\n * @param {number} y1 y coordinate of the first point\r\n * @param {number} x2 x coordinate of the second point\r\n * @param {number} y2 y coordinate of the second point\r\n * @param {boolean} turnLeft true for left turn, false for right turn\r\n * @param {number} roundness corner roundness between 0 (sharp) and 1 (round)\r\n */\r\nexport function drawRoundedCorner (context, x1, y1, x2, y2, turnLeft = true, roundness = 1) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  if (x1 === x2 || y1 === y2) {\r\n    context.lineTo(x2, y2)\r\n    context.stroke()\r\n    return\r\n  }\r\n  const radius = Math.abs(x2 - x1) * roundness\r\n  let cx\r\n  let cy\r\n  if (turnLeft) {\r\n    if (x1 < x2 && y1 < y2) {\r\n      cx = x1 + radius\r\n      cy = y2 - radius\r\n      context.arc(cx, cy, radius, 1 * Math.PI, 0.5 * Math.PI, true)\r\n    } else if (x1 > x2 && y1 < y2) {\r\n      cx = x2 + radius\r\n      cy = y1 + radius\r\n      context.arc(cx, cy, radius, 1.5 * Math.PI, 1 * Math.PI, true)\r\n    } else if (x1 > x2 && y1 > y2) {\r\n      cx = x1 - radius\r\n      cy = y2 + radius\r\n      context.arc(cx, cy, radius, 0, 1.5 * Math.PI, true)\r\n    } else {\r\n      cx = x2 - radius\r\n      cy = y1 - radius\r\n      context.arc(cx, cy, radius, 0.5 * Math.PI, 0, true)\r\n    }\r\n  } else {\r\n    if (x1 < x2 && y1 < y2) {\r\n      cx = x2 - radius\r\n      cy = y1 + radius\r\n      context.arc(cx, cy, radius, 1.5 * Math.PI, 0)\r\n    } else if (x1 > x2 && y1 < y2) {\r\n      cx = x1 - radius\r\n      cy = y2 - radius\r\n      context.arc(cx, cy, radius, 0, 0.5 * Math.PI)\r\n    } else if (x1 > x2 && y1 > y2) {\r\n      cx = x2 + radius\r\n      cy = y1 - radius\r\n      context.arc(cx, cy, radius, 0.5 * Math.PI, 1 * Math.PI, false)\r\n    } else {\r\n      cx = x1 + radius\r\n      cy = y2 + radius\r\n      context.arc(cx, cy, radius, Math.PI, 1.5 * Math.PI, false)\r\n    }\r\n  }\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws an arc that connects similar parts.\r\n * Both parts must have the same width in pixels.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} startX1 x coordinate of the start of the first part\r\n * @param {number} startX2 x coordinate of the start of the second part\r\n * @param {number} length length in pixels of the parts\r\n * @param {number} yBottom bottom baseline y coordinate\r\n */\r\nexport function drawArc (context, startX1, startX2, length, yBottom) {\r\n  // Get center and radius\r\n  const radius = (startX2 - startX1) / 2\r\n  const cx = startX1 + radius + length / 2\r\n  context.lineWidth = length\r\n  context.beginPath()\r\n  context.arc(cx, yBottom, radius, Math.PI, 2 * Math.PI)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a more complex path and fills it.\r\n * Two arcs: One from startX1 to endX2 on the top, one from endX1 to startX2\r\n * below it.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} startX1 x coordinate of the start of the first part\r\n * @param {number} endX1 x coordinate of the end of the first part\r\n * @param {number} startX2 x coordinate of the start of the second part\r\n * @param {number} endX2 x coordinate of the end of the second part\r\n * @param {number} yBottom bottom baseline y coordinate\r\n */\r\nexport function drawAssymetricArc (context, startX1, endX1, startX2, endX2, yBottom) {\r\n  // Get center and radius\r\n  const radiusTop = (endX2 - startX1) / 2\r\n  if (radiusTop < 0) {\r\n    return\r\n  }\r\n  let radiusBottom = (startX2 - endX1) / 2\r\n  if (radiusBottom < 0) {\r\n    radiusBottom = 0\r\n  }\r\n  const cxTop = startX1 + radiusTop\r\n  const cxBottom = endX1 + radiusBottom\r\n  context.beginPath()\r\n  context.moveTo(startX1, yBottom)\r\n  context.arc(cxTop, yBottom, radiusTop, Math.PI, 2 * Math.PI)\r\n  context.lineTo(startX2, yBottom)\r\n  context.arc(cxBottom, yBottom, radiusBottom, 2 * Math.PI, Math.PI, true)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a horizontal bracket like this |_____| (bottom)\r\n * or this |\"\"\"\"\"\"| (top).\r\n * Use a positive h for bottom and a negative one for top.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x position of the bracket's horizontal lines\r\n * @param {number} y y position of the bracket's horizontal lines\r\n * @param {number} w width of the bracket's horizontal lines\r\n * @param {number} h height of the bracket's vertical ticks\r\n */\r\nexport function drawBracketH (context, x, y, w, h) {\r\n  context.beginPath()\r\n  context.moveTo(x, y + h)\r\n  context.lineTo(x, y)\r\n  context.lineTo(x + w, y)\r\n  context.lineTo(x + w, y + h)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a quadratic matrix onto a canvas\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number[][]} matrix matrix\r\n * @param {number} [x=0] x position of the top left corner\r\n * @param {number} [y=0] y position of the top left corner\r\n * @param {number} [size=400] width and height in pixel\r\n * @param {Function} colorMap colormap from [min, max] to a color\r\n */\r\nexport function drawMatrix (\r\n  context,\r\n  matrix,\r\n  x = 0,\r\n  y = 0,\r\n  size = 400,\r\n  colorScale,\r\n  colorMap = d3.interpolateViridis\r\n) {\r\n  const cellSize = size / matrix.length\r\n  const paddedSize = cellSize * 1.01\r\n  colorScale = colorScale || d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(matrix.flat()))\r\n    .range([1, 0])\r\n  for (let row = 0; row < matrix.length; row++) {\r\n    for (let col = 0; col < matrix.length; col++) {\r\n      context.fillStyle = colorMap(colorScale(matrix[row][col]))\r\n      context.fillRect(x, y, paddedSize, paddedSize)\r\n      x += cellSize\r\n    }\r\n    y += cellSize\r\n  }\r\n}\r\n\r\n/**\r\n * Draws a color ramp\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {Function} colorMap colormap from [min, max] to a color\r\n */\r\nexport function drawColorRamp (context, w = 100, h = 10, colorMap = d3.interpolateRainbow) {\r\n  const scaleColor = d3.scaleLinear().domain([0, w])\r\n  for (let x = 0; x < w; ++x) {\r\n    context.fillStyle = colorMap(scaleColor(x))\r\n    context.fillRect(x, 0, 1.1, h)\r\n  }\r\n}\r\n", "/**\r\n * Allows to record audio blobs.\r\n *\r\n * @module input/AudioRecorder\r\n * @example <caption>Usage (only in async functions)</caption>\r\n *     const recorder = await recordAudio();\r\n *     recorder.start();\r\n *     // ...\r\n *     const audio = await recorder.stop();\r\n * stop() returns a Blob with audio data\r\n * @see https://medium.com/@bryanjenningz/how-to-record-and-play-audio-in-javascript-faa1b2b3e49b\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\r\n * @returns {Promise} audio recorder\r\n */\r\nexport const recordAudio = () => {\r\n  // eslint-disable-next-line\r\n  return new Promise(async resolve => {\r\n    let stream\r\n    try {\r\n      stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n    } catch (error) {\r\n      console.warn('[AudioInput] Cannot access audio', error)\r\n      return\r\n    }\r\n    const options = {\r\n      audioBitsPerSecond: 128_000\r\n    }\r\n    const mediaRecorder = new MediaRecorder(stream, options)\r\n    let audioChunks = []\r\n    // Add new data when it arrives\r\n    mediaRecorder.addEventListener('dataavailable', event => {\r\n      audioChunks.push(event.data)\r\n    })\r\n    // Starts recording\r\n    const start = () => {\r\n      if (!mediaRecorder) {\r\n        console.warn('[AudioInput] Cannot record audio, no microphone?')\r\n        return\r\n      }\r\n      if (mediaRecorder.state === 'recording') { return }\r\n      console.log(`[AudioInput] Recording @ ${mediaRecorder.audioBitsPerSecond} b/s`)\r\n      audioChunks = []\r\n      mediaRecorder.start()\r\n    }\r\n    // Stops recording\r\n    const stop = () =>\r\n      new Promise(resolve => {\r\n        if (!mediaRecorder) { return }\r\n        console.log('[AudioInput] Stopping audio recording')\r\n        mediaRecorder.addEventListener('stop', () => {\r\n          // Audio blob contains the data to store on the server\r\n          const blobOptions = { type: mediaRecorder.mimeType }\r\n          const audioBlob = new Blob(audioChunks, blobOptions)\r\n          // console.log(audioBlob);\r\n          resolve(audioBlob)\r\n        })\r\n        mediaRecorder.stop()\r\n      })\r\n    resolve({ start, stop })\r\n  })\r\n}\r\n", "import Note from '../types/Note.js'\n\n/**\n * Records incoming MIDI messages from a MIDI device.\n *\n * @param {Function} [onMessage] a callback function to get notfied of incoming\n *      messages\n * @module input/MidiRecorder\n * @example <caption>Usage (only in async functions)</caption>\n *     const recorder = await recordMidi();\n *     recorder.start();\n *     const notes = recorder.stop();\n * @returns {Promise} MIDI recorder\n */\nexport const recordMidi = (onMessage) => {\n  // eslint-disable-next-line\n  return new Promise(async resolve => {\n    let midiAccess\n    try {\n      midiAccess = await navigator.requestMIDIAccess()\n    } catch (error) {\n      console.warn('[MidiInput] Cannot access MIDI', error)\n      return\n    }\n    let messages = []\n    // Add new data when it arrives\n    const addMessage = (message) => {\n      if (onMessage) {\n        onMessage(message)\n      }\n      messages.push(message)\n    }\n    // Starts recording\n    const start = () => {\n      if (!midiAccess) {\n        console.warn('[MidiInput] Cannot record MIDI')\n        return\n      }\n      // Do this here, in case devices changed\n      for (const input of midiAccess.inputs.values()) {\n        input.onmidimessage = addMessage\n      }\n      console.log('[MidiInput] Starting recording')\n      messages = []\n    }\n    // Stops recording\n    const stop = () => {\n      if (!midiAccess) { return }\n      console.log('[MidiInput] Stopping recording')\n      // Process messages\n      const notes = processMidiMessagesToNotes(messages)\n      return notes\n    }\n    resolve({ start, stop })\n  })\n}\n\n/**\n * Parses MIDI messages to Notes\n *\n * @private\n * @param {Oject[]} messages MIDI messages as they come from the WebMidi API\n * @returns {Note[]} notes\n */\nfunction processMidiMessagesToNotes (messages) {\n  // Keep track of currently sounding notes\n  const currentNotes = new Map()\n  const notes = []\n  for (const message of messages) {\n    const device = message.target.name\n    const time = message.timeStamp\n    const commandAndChannel = message.data[0]\n    const channel = commandAndChannel % 16\n    const command = commandAndChannel - channel\n    const pitch = message.data[1]\n    // A velocity value might not be included with a noteOff command\n    const velocity = (message.data.length > 2) ? message.data[2] : 0\n    switch (command) {\n      case 128:\n        noteOff(notes, currentNotes, device, time, pitch, channel)\n        break\n      case 144:\n        if (velocity > 0) {\n          noteOn(currentNotes, device, time, pitch, channel, velocity)\n        } else {\n          noteOff(notes, currentNotes, device, time, pitch, channel)\n        }\n        break\n      case 224:\n        // TODO: handle pitch wheel?\n        break\n      default:\n      // TODO: handle other commands?\n    }\n  }\n  // Look for unfinished notes\n  if (currentNotes.size > 0) {\n    console.warn(`[MidiInput] Got ${currentNotes.size} unfinished notes`)\n  }\n  notes.sort((a, b) => a.start - b.start)\n  return notes\n}\n\n/**\n * Handles note-on messages\n *\n * @private\n * @param {Map} currentNotes Map with started but not yet ended notes\n * @param {string} device device name\n * @param {number} time time stamp of the message\n * @param {number} pitch MIDI pitch in [0, 127]\n * @param {number} channel MIDI channel\n * @param {number} velocity MIDI velocity\n */\nfunction noteOn (currentNotes, device, time, pitch, channel, velocity) {\n  const note = new Note(pitch, time / 1000, velocity, channel)\n  const key = `${device}-${channel}-${pitch}`\n  currentNotes.set(key, note)\n}\n\n/**\n * Handles note-off messages\n *\n * @private\n * @param {Note[]} notes finished notes\n * @param {Map} currentNotes Map with started but not yet ended notes\n * @param {string} device device name\n * @param {number} time time stamp of the message\n * @param {number} pitch MIDI pitch in [0, 127]\n * @param {number} channel MIDI channel\n */\nfunction noteOff (notes, currentNotes, device, time, pitch, channel) {\n  // Look for note start\n  const key = `${device}-${channel}-${pitch}`\n  if (!currentNotes.has(key)) {\n    console.warn(`[MidiInput] Missing note-on for note-off with key ${key}`)\n    return\n  }\n  const note = currentNotes.get(key)\n  note.end = time / 1000\n  notes.push(note)\n  currentNotes.delete(key)\n}\n", "import Note from '../types/Note.js'\n\n/**\n * Handles incoming MIDI messages from a MIDI device.\n *\n * @module input/MidiInputManager\n */\nclass MidiInputManager {\n  /**\n       * Constructor with callback functions\n       *\n       * @param {Function} getMidiLiveData a function called by this object to get\n       *      the currently recorded MIDI notes from App.js, where the\n       *      MidiInputManager instance should be created\n       *      Example for how to defined getMidiLiveData as method in App.js:\n       *          getMidiLiveData = () => this.state.midiLiveData;\n       * @param {Function} setMidiLiveData a function called by this object to\n       *      update the currently MIDI notes in App.js\n       *      Example:\n       *          setMidiLiveData = (data) => {\n       *              // Work-around so note_off event handling can\n       *              // immediately find the note_on event\n       *              this.state.midiLiveData = data;\n       *              this.setState({ midiLiveData: data });\n       *          };\n       * @param {Function} addCurrentNote a function called by this object to add\n       *      a currently played note (e.g. currently pressed piano key)\n       *      Example:\n       *          addCurrentNote = (note) => {\n       *              const newMap = new Map(this.state.currentNotes).set(note.pitch, note);\n       *              this.setState({ currentNotes: newMap });\n       *          }\n       * @param {Function} removeCurrentNote a function called by this object to\n       *      remove a currently played note\n       *      Example:\n       *          removeCurrentNote = (pitch) => {\n       *              const newMap = new Map(this.state.currentNotes).delete(pitch);\n       *              this.setState({ currentNotes: newMap });\n       *          }\n       */\n  constructor (\n    getMidiLiveData,\n    setMidiLiveData,\n    addCurrentNote = () => { },\n    removeCurrentNote = () => { }\n  ) {\n    this._getMidiLiveData = getMidiLiveData\n    this._setMidiLiveData = setMidiLiveData\n    this._addCurrentNote = addCurrentNote\n    this._removeCurrentNote = removeCurrentNote\n    // Request MIDI access\n    if (navigator.requestMIDIAccess) {\n      navigator.requestMIDIAccess().then(this._onMIDISuccess, this._onMIDIFailure)\n    } else {\n      console.error('[MidiInput] WebMIDI is not supported in this browser.')\n      throw new Error('Browser does not support WebMIDI')\n    }\n  }\n\n  /**\n       * Handles a successful MIDI access request\n       *\n       * @private\n       * @param {*} midiAccess MIDI access\n       */\n  _onMIDISuccess (midiAccess) {\n    // console.log(midiAccess);\n    console.groupCollapsed(`[MidiInput] ${midiAccess.inputs.size} input devices`)\n    for (const input of midiAccess.inputs.values()) {\n      console.log(` - ${input.name}`)\n      input.onmidimessage = this._handleMIDIMessage\n    }\n    console.groupEnd()\n    // console.groupCollapsed(`[MidiInput] ${midiAccess.inputs.size} output devices`);\n    // for (let output of midiAccess.outputs.values()) {\n    //     console.log(` - ${output.name}`);\n    // }\n    // console.groupEnd();\n  };\n\n  /**\n       * Handles MIDI access errors\n       *\n       * @private\n       * @param {*} error error\n       */\n  _onMIDIFailure (error) {\n    console.error('[MidiInput] Cannot access MIDI devices.', error)\n  }\n\n  /**\n       * Handles incoming MIDI messages\n       *\n       * @private\n       * @param {*} message MIDI message\n       */\n  _handleMIDIMessage (message) {\n    // console.log(message);\n    const device = message.target.name\n    const commandAndChannel = message.data[0]\n    const channel = commandAndChannel % 16\n    const command = commandAndChannel - channel\n    const time = message.timeStamp\n    const pitch = message.data[1]\n    // A velocity value might not be included with a noteOff command\n    const velocity = (message.data.length > 2) ? message.data[2] : 0\n    switch (command) {\n      case 128:\n        this._noteOff(device, time, pitch, channel)\n        break\n      case 144:\n        if (velocity > 0) {\n          this._noteOn(device, time, pitch, channel, velocity)\n        } else {\n          this._noteOff(device, time, pitch, channel)\n        }\n        break\n      case 224:\n        // TODO: handle pitch wheel?\n        break\n      default:\n      // TODO: handle other commands?\n    }\n  };\n\n  /**\n       * Handles note-on messages\n       *\n       * @private\n       * @param {string} device device name\n       * @param {number} time time stamp of the message\n       * @param {number} pitch MIDI pitch in [0, 127]\n       * @param {number} channel MIDI channel\n       * @param {number} velocity MIDI velocity\n       */\n  _noteOn (device, time, pitch, channel, velocity) {\n    const note = new Note(pitch, time / 1000, velocity, channel)\n    // Add current note\n    this._addCurrentNote(note)\n    // Update recorded MIDI data\n    // TODO: probably better to only update on note-off,\n    // Then we need internal cache\n    // But this might be good, since only 'unfinished' notes need to be checked on note-off,\n    // so we can remove finished notes from the cache\n    let midiData = this._getMidiLiveData()\n    midiData = [...midiData, note]\n    this._setMidiLiveData(midiData)\n  }\n\n  /**\n       * Handles note-off messages by updating the end time of the corresponding\n       * note\n       *\n       * @private\n       * @param {string} device device name\n       * @param {number} time time stamp of the message\n       * @param {number} pitch MIDI pitch in [0, 127]\n       * @param {number} channel MIDI channel\n       */\n  _noteOff (device, time, pitch, channel) {\n    const midiData = this._getMidiLiveData()\n    if (midiData.length === 0) {\n      // If we have to wait for the setState to process, try again\n      setTimeout(() => this._noteOff(time, pitch), 10)\n    }\n    // Go back to latest note with the same pitch and channel and add the end time\n    let index = midiData.length - 1\n    // TODO: if there are multiple instruments or channels, check also for those\n    while (midiData[index].pitch !== pitch || midiData[index].channel !== channel) {\n      index--\n      if (index < 0) {\n        console.warn('[MidiInput] Did not find note-on event for note-off event!')\n        break\n      }\n    }\n    if (index >= 0) {\n      // Note successfully found, update data\n      midiData[index].end = time / 1000\n      this._setMidiLiveData(midiData)\n      this._removeCurrentNote(pitch)\n    }\n  }\n}\n\nexport default MidiInputManager\n", "import { randomNormal, randomInt, group } from 'd3'\r\nimport { choose, randFloat } from '../utils/MathUtils.js'\r\nimport Note from '../types/Note.js'\r\n\r\n/**\r\n * @module instruments/Drums\r\n */\r\n\r\n/**\r\n * Drum parts\r\n *\r\n * @type {object}\r\n */\r\nexport const DRUM_PARTS = {\r\n  Agogo: 'DRUM_PARTS.Agogo',\r\n  Cabasa: 'DRUM_PARTS.Cabasa',\r\n  Castanets: 'DRUM_PARTS.Castanets',\r\n  China: 'DRUM_PARTS.China',\r\n  Claves: 'DRUM_PARTS.Claves',\r\n  Conga: 'DRUM_PARTS.Conga',\r\n  Cowbell: 'DRUM_PARTS.Cowbell',\r\n  Crash: 'DRUM_PARTS.Crash',\r\n  Cuica: 'DRUM_PARTS.Cuica',\r\n  Cymbal: 'DRUM_PARTS.Cymbal',\r\n  Golpe: 'DRUM_PARTS.Golpe',\r\n  Grancassa: 'DRUM_PARTS.Grancassa',\r\n  Guiro: 'DRUM_PARTS.Guiro',\r\n  Hand_Clap: 'DRUM_PARTS.Hand Clap',\r\n  Hand: 'DRUM_PARTS.Hand',\r\n  Hi_Hat: 'DRUM_PARTS.Hi Hat',\r\n  High_Floor_Tom: 'DRUM_PARTS.High Floor Tom',\r\n  High_Tom: 'DRUM_PARTS.High Tom',\r\n  Kick: 'DRUM_PARTS.Kick',\r\n  Low_Floor_Tom: 'DRUM_PARTS.Low Floor Tom',\r\n  Low_Tom: 'DRUM_PARTS.Low Tom',\r\n  Mid_Tom: 'DRUM_PARTS.Mid Tom',\r\n  Pedal_Hi_Hat: 'DRUM_PARTS.Pedal Hi Hat',\r\n  Ride: 'DRUM_PARTS.Ride',\r\n  Right_Maraca: 'DRUM_PARTS.Right Maraca',\r\n  Shaker: 'DRUM_PARTS.Shaker',\r\n  Snare: 'DRUM_PARTS.Snare',\r\n  Splash: 'DRUM_PARTS.Splash',\r\n  Surdo: 'DRUM_PARTS.Surdo',\r\n  Timbale: 'DRUM_PARTS.Timbale',\r\n  Tinkle_Bell: 'DRUM_PARTS.Tinkle Bell',\r\n  Triangle: 'DRUM_PARTS.Triangle',\r\n  Vibraslap: 'DRUM_PARTS.Vibraslap',\r\n  Whistle_high: 'DRUM_PARTS.Whistle high',\r\n  Whistle_low: 'DRUM_PARTS.Whistle low',\r\n  Woodblock_high: 'DRUM_PARTS.Woodblock high',\r\n  Woodblock_low: 'DRUM_PARTS.Woodblock low'\r\n}\r\n\r\n/**\r\n * Drum actions\r\n *\r\n * @type {object}\r\n */\r\nexport const DRUM_ACTIONS = {\r\n  choke: 'DRUM_ACTIONS.choke',\r\n  finger: 'DRUM_ACTIONS.finger',\r\n  hit: 'DRUM_ACTIONS.hit',\r\n  mute: 'DRUM_ACTIONS.mute',\r\n  return: 'DRUM_ACTIONS.return',\r\n  scrapReturn: 'DRUM_ACTIONS.scrapReturn',\r\n  sideStick: 'DRUM_ACTIONS.sideStick',\r\n  slap: 'DRUM_ACTIONS.slap'\r\n}\r\n\r\n/**\r\n * Drum parts and actions\r\n *\r\n * @todo still incomplete\r\n * @type {object}\r\n */\r\nexport const DRUM_PARTS_ACTIONS = {\r\n  Agogo_high_hit: 'DRUM_PARTS_ACTIONS.Agogo high (hit)',\r\n  Agogo_low_hit: 'DRUM_PARTS_ACTIONS.Agogo low (hit)',\r\n  Cabasa_return: 'DRUM_PARTS_ACTIONS.Cabasa (return)',\r\n  Castanets_hit: 'DRUM_PARTS_ACTIONS.Castanets (hit)',\r\n  China_choke: 'DRUM_PARTS_ACTIONS.China (choke)',\r\n  Claves_hit: 'DRUM_PARTS_ACTIONS.Claves (hit)',\r\n  Conga_high_slap: 'DRUM_PARTS_ACTIONS.Conga high (slap)',\r\n  Conga_low_mute: 'DRUM_PARTS_ACTIONS.Conga low (mute)',\r\n  Cowbell_high_tip: 'DRUM_PARTS_ACTIONS.Cowbell high (tip)',\r\n  Crash_medium_choke: 'DRUM_PARTS_ACTIONS.Crash medium (choke)',\r\n  Cuica_mute: 'DRUM_PARTS_ACTIONS.Cuica (mute)',\r\n  Cuica_open: 'DRUM_PARTS_ACTIONS.Cuica (open)',\r\n  Cymbal_hit: 'DRUM_PARTS_ACTIONS.Cymbal (hit)',\r\n  Golpe_finger: 'DRUM_PARTS_ACTIONS.Golpe (finger)',\r\n  Grancassa_hit: 'DRUM_PARTS_ACTIONS.Grancassa (hit)',\r\n  Guiro_hit: 'DRUM_PARTS_ACTIONS.Guiro (hit)',\r\n  Guiro_scrap_return: 'DRUM_PARTS_ACTIONS.Guiro (scrap-return)',\r\n  Hand_Clap_hit: 'DRUM_PARTS_ACTIONS.Hand Clap (hit)',\r\n  Hand_slap: 'DRUM_PARTS_ACTIONS.Hand (slap)',\r\n  Hi_Hat_closed: 'DRUM_PARTS_ACTIONS.Hi-Hat (closed)',\r\n  Hi_Hat_open: 'DRUM_PARTS_ACTIONS.Hi-Hat (open)',\r\n  High_Floor_Tom_hit: 'DRUM_PARTS_ACTIONS.High Floor Tom (hit)',\r\n  High_Tom_hit: 'DRUM_PARTS_ACTIONS.High Tom (hit)',\r\n  Kick_hit: 'DRUM_PARTS_ACTIONS.Kick (hit)',\r\n  Low_Floor_Tom_hit: 'DRUM_PARTS_ACTIONS.Low Floor Tom (hit)',\r\n  Low_Tom_hit: 'DRUM_PARTS_ACTIONS.Low Tom (hit)',\r\n  Mid_Tom_hit: 'DRUM_PARTS_ACTIONS.Mid Tom (hit)',\r\n  Pedal_Hi_Hat_hit: 'DRUM_PARTS_ACTIONS.Pedal Hi-Hat (hit)',\r\n  Ride_choke: 'DRUM_PARTS_ACTIONS.Ride (choke)',\r\n  Right_Maraca_return: 'DRUM_PARTS_ACTIONS.Right Maraca (return)',\r\n  Shaker_return: 'DRUM_PARTS_ACTIONS.Shaker (return)',\r\n  Snare_hit: 'DRUM_PARTS_ACTIONS.Snare (hit)',\r\n  Snare_side_stick: 'DRUM_PARTS_ACTIONS.Snare (side stick)',\r\n  Splash_choke: 'DRUM_PARTS_ACTIONS.Splash (choke)',\r\n  Surdo_hit: 'DRUM_PARTS_ACTIONS.Surdo (hit)',\r\n  Surdo_mute: 'DRUM_PARTS_ACTIONS.Surdo (mute)',\r\n  Timbale_high_hit: 'DRUM_PARTS_ACTIONS.Timbale high (hit)',\r\n  Timbale_low_hit: 'DRUM_PARTS_ACTIONS.Timbale low (hit)',\r\n  Tinkle_Bell_hit: 'DRUM_PARTS_ACTIONS.Tinkle Bell (hit)',\r\n  Triangle_hit: 'DRUM_PARTS_ACTIONS.Triangle (hit)',\r\n  Triangle_mute: 'DRUM_PARTS_ACTIONS.Triangle (mute)',\r\n  Vibraslap_hit: 'DRUM_PARTS_ACTIONS.Vibraslap (hit)',\r\n  Whistle_high_hit: 'DRUM_PARTS_ACTIONS.Whistle high (hit)',\r\n  Whistle_low_hit: 'DRUM_PARTS_ACTIONS.Whistle low (hit)',\r\n  Woodblock_high_hit: 'DRUM_PARTS_ACTIONS.Woodblock high (hit)',\r\n  Woodblock_low_hit: 'DRUM_PARTS_ACTIONS.Woodblock low (hit)'\r\n}\r\n\r\n/**\r\n * Pitches that are mapped onto themselves are included for other information.\r\n * Millenium MPS-850 https://www.thomann.de/de/millenium_mps_850_e_drum_set.htm\r\n *\r\n * Notation info (line and shape of symbol) so drum notation can generate a lookup from this\r\n * https://en.wikipedia.org/wiki/Percussion_notation#/media/File:Sibelius_drum_legend.png\r\n * Lines start with 0 at the top above the top most horizontal notation line,\r\n * using incremental integers for every possible position, i.e. for on and between lines\r\n *\r\n * Legend:\r\n *  Map key: The orignal pitch from the input data\r\n *  repPitch: Replacement pitch, used to simplify multiple zones into one\r\n *  zone: Zone of the instrument this pitch comes from\r\n *  order: visual order ranking of this intrumentin the UI (top-bottom or left-right)\r\n *  line: y position in the drum notation (using integers for every possible position)\r\n *  shape: Note shape in notation: triangle, <>, x, o, ostroke, xstroke\r\n *  label: Short label for this intrument\r\n *  name: Full name of this instrument\r\n *\r\n * @type {Map<number,object>}\r\n */\r\nexport const drumPitchReplacementMapMPS850 = new Map([\r\n  // Crash 1\r\n  [49, { repPitch: 49, zone: 1, order: 10, line: -1, shape: 'o', label: 'CC1', name: 'Crash Cymbal 1' }],\r\n  [55, { repPitch: 49, zone: 2, order: 11, line: -1, shape: 'o', label: 'CC1', name: 'Crash Cymbal 1' }],\r\n  // Crash 2\r\n  [52, { repPitch: 57, zone: 1, order: 20, line: 0, shape: 'o', label: 'CC2', name: 'Crash Cymbal 2' }],\r\n  [57, { repPitch: 57, zone: 2, order: 21, line: 0, shape: 'o', label: 'CC2', name: 'Crash Cymbal 2' }],\r\n  // Hi-hat stick\r\n  [22, { repPitch: 46, zone: 1, order: 30, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  [26, { repPitch: 46, zone: 2, order: 31, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  [42, { repPitch: 46, zone: 3, order: 32, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  [46, { repPitch: 46, zone: 4, order: 33, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  // Hi-hat pedal\r\n  [44, { repPitch: 44, zone: 1, order: 40, line: 9, shape: 'o', label: 'HHP', name: 'Hi-Hat Pedal' }],\r\n  // Ride\r\n  [51, { repPitch: 51, zone: 1, order: 50, line: 1, shape: 'x', label: 'Rd', name: 'Ride Cymbal' }],\r\n  [53, { repPitch: 51, zone: 2, order: 51, line: 1, shape: 'x', label: 'Rd', name: 'Ride Cymbal' }],\r\n  [59, { repPitch: 51, zone: 3, order: 52, line: 1, shape: 'x', label: 'Rd', name: 'Ride Cymbal' }],\r\n  // Snare\r\n  [38, { repPitch: 38, zone: 1, order: 60, line: 4, shape: 'o', label: 'SN', name: 'Snare' }],\r\n  [40, { repPitch: 38, zone: 2, order: 61, line: 4, shape: 'o', label: 'SN', name: 'Snare' }],\r\n  // Tom 1\r\n  [48, { repPitch: 48, zone: 1, order: 90, line: 2, shape: 'o', label: 'T1', name: 'Tom 1' }],\r\n  [50, { repPitch: 48, zone: 2, order: 91, line: 2, shape: 'o', label: 'T1', name: 'Tom 1' }],\r\n  // Tom 2\r\n  [45, { repPitch: 45, zone: 1, order: 100, line: 3, shape: 'o', label: 'T2', name: 'Tom 2' }],\r\n  [47, { repPitch: 45, zone: 2, order: 101, line: 3, shape: 'o', label: 'T2', name: 'Tom 2' }],\r\n  // Stand tom 1\r\n  [43, { repPitch: 43, zone: 1, order: 70, line: 5, shape: 'o', label: 'ST1', name: 'Stand Tom 1' }],\r\n  [58, { repPitch: 43, zone: 2, order: 71, line: 5, shape: 'o', label: 'ST1', name: 'Stand Tom 1' }],\r\n  // Stand tom 2\r\n  [39, { repPitch: 41, zone: 1, order: 80, line: 6, shape: 'o', label: 'ST2', name: 'Stand Tom 2' }],\r\n  [41, { repPitch: 41, zone: 2, order: 81, line: 6, shape: 'o', label: 'ST2', name: 'Stand Tom 2' }],\r\n  // Bass drum\r\n  [35, { repPitch: 36, zone: 1, order: 110, line: 8, shape: 'o', label: 'BD', name: 'Bass Drum' }],\r\n  [36, { repPitch: 36, zone: 2, order: 111, line: 8, shape: 'o', label: 'BD', name: 'Bass Drum' }]\r\n])\r\n\r\n/**\r\n * Generates a variation of an array of notes by adding, removing or changing notes\r\n *\r\n * @param {Note[]} data array of notes\r\n * @param {number} deviation width of the Gauss kernel\r\n * @param {number} pAdd probability of adding a note after each note\r\n * @param {number} pRemove probability of removing each note\r\n * @returns {Note[]} variated Note array\r\n */\r\nexport function generateDrumVariation (data, deviation = 1, pAdd = 0.1, pRemove = 0.1) {\r\n  // Only use pitches that occur in the GT data\r\n  const usedPitches = new Set()\r\n  for (const note of data) {\r\n    usedPitches.add(note.pitch)\r\n  }\r\n  const pitches = [...usedPitches]\r\n  // Create variation by adding, removing, and shifting notes\r\n  const randVelocity = randomInt(15, 128)\r\n  const randTime = randomNormal(0, deviation)\r\n  const variation = []\r\n  for (const note of data) {\r\n    // Add and remove notes at random\r\n    if (randFloat(0, 1) < pAdd) {\r\n      // Add another note\r\n      const start = note.start + randFloat(0, 1)\r\n      const end = start + randFloat(0, 1)\r\n      const velocity = randVelocity()\r\n      const pitch = choose(pitches)\r\n      variation.push(new Note(\r\n        pitch,\r\n        start,\r\n        velocity,\r\n        0,\r\n        end\r\n      ))\r\n    }\r\n    if (randFloat(0, 1) < pRemove) {\r\n      // Remove note (just add nothing to varation)\r\n    } else {\r\n      // Shift timings at random\r\n      const start = note.start + randTime()\r\n      const end = note.end + randTime()\r\n      // Get new note\r\n      const newNote = Note.from(note)\r\n      newNote.start = Math.min(start, end)\r\n      newNote.end = Math.max(start, end)\r\n      variation.push(newNote)\r\n    }\r\n  }\r\n  // Sort notes by start just in case\r\n  variation.sort((a, b) => a.start - b.start)\r\n  return variation\r\n}\r\n\r\n/**\r\n * Replaces pitches based on replacementMap\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {Map} replacementMap a map pitch->replacementPitch\r\n * @returns {Notes[]} notes with replaced pitches\r\n * @throws {'No replacement map given!'} when replacementMap is missing\r\n */\r\nexport function simplifyDrumPitches (notes, replacementMap) {\r\n  if (!replacementMap || !(replacementMap instanceof Map)) {\r\n    throw new Error('No replacement map given!')\r\n  }\r\n  const errors = new Set()\r\n  const simplified = notes.map(note => {\r\n    const oldPitch = note.pitch\r\n    let newPitch = oldPitch\r\n    if (!replacementMap.has(oldPitch)) {\r\n      errors.add(oldPitch)\r\n    } else {\r\n      newPitch = replacementMap.get(oldPitch).repPitch\r\n    }\r\n    const newNote = Note.from({ ...note, pitch: newPitch })\r\n    return newNote\r\n  })\r\n  // TODO: return errors, do not log! also easier to test\r\n  // if (errors.size > 0) {\r\n  //     console.warn(`Cannot replace all pitches, replacementMap misses entry for these pitches:`);\r\n  //     console.log(Array.from(errors));\r\n  // }\r\n  return simplified\r\n  // return { simplified, errors };\r\n}\r\n\r\n/**\r\n * Returns a Map:pitch->yPosIndex for views to lookup which row\r\n * a pitch has to be drawn in\r\n *\r\n * @param {Map} replacementMap a pitch replacement map\r\n * @returns {Map} Map:pitch->yPosIndex\r\n */\r\nexport function getPitch2PositionMap (replacementMap) {\r\n  const result = new Map()\r\n  const uniqeRows = [...group([...replacementMap], d => d[1].repPitch)]\r\n  uniqeRows.sort((a, b) => a[1][0][1].order - b[1][0][1].order)\r\n  for (const [index, d] of uniqeRows.entries()) {\r\n    result.set(d[0], index)\r\n  }\r\n  return result\r\n}\r\n", "import { randomInt, extent } from 'd3'\r\nimport { randFloat } from '../utils/MathUtils.js'\r\nimport { getMidiNoteByNr, getMidiNoteByLabel } from '../fileFormats/Midi.js'\r\nimport GuitarNote from '../types/GuitarNote.js'\r\nimport { arrayShallowEquals } from '../utils/ArrayUtils.js'\r\n\r\n/**\r\n * @module instruments/Guitar\r\n */\r\n\r\n/**\r\n * Represents a tuning of a fretted string instrument.\r\n */\r\nexport class StringedTuning {\r\n  /**\r\n     * Represents a tuning of a fretted string instrument.\r\n     *\r\n     * @param {string} name name\r\n     * @param {string[]} notes array of notes, e.g. ['E2', 'A2', 'D3', ...]\r\n     */\r\n  constructor (name, notes) {\r\n    this.name = name\r\n    this.notes = notes\r\n    this.short = notes.join(' ')\r\n    this.pitches = notes.map(note => getMidiNoteByLabel(note).pitch)\r\n    this.stringCount = notes.length\r\n  }\r\n}\r\n\r\n/**\r\n * Maps from instrument to string number to list of tunings.\r\n * Defaults are at the top.\r\n *\r\n * @todo add more? https://en.wikipedia.org/wiki/List_of_guitar_tunings\r\n * @todo replace arrays by maps? tuning name - tuning\r\n * @type {Map<string,Map<number,StringedTuning>>}\r\n * @example\r\n *      stringedTunings.get('Guitar').get(6) for 6-string guitar tunings\r\n */\r\nexport const stringedTunings = new Map([\r\n  ['Guitar', new Map([\r\n    [6, [\r\n      new StringedTuning('E stand.', ['E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop D', ['D2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop C', ['C2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1/2 down', ['D#2', 'G#2', 'C#3', 'F#3', 'A#3', 'D#4']),\r\n      new StringedTuning('1 down', ['D2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1 1/2 down', ['C#2', 'F#2', 'B2', 'E3', 'G#3', 'C#4']),\r\n      new StringedTuning('2 down', ['C2', 'F2', 'A#2', 'D#3', 'G3', 'C4']),\r\n      new StringedTuning('DADGAG', ['D2', 'A2', 'D3', 'G3', 'A3', 'D4'])\r\n    ]],\r\n    [7, [\r\n      new StringedTuning('B stand.', ['B1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop A', ['A1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('1/2 down', ['A#1', 'D#2', 'G#2', 'C#3', 'F#3', 'A#3', 'D#4']),\r\n      new StringedTuning('1 down', ['A1', 'D2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1 1/2 down', ['G#1', 'C#2', 'F#2', 'B2', 'E3', 'G#3', 'C#4']),\r\n      new StringedTuning('2 down', ['G1', 'C2', 'F2', 'A#2', 'D#3', 'G3', 'C4'])\r\n    ]],\r\n    [8, [\r\n      new StringedTuning('F# stand.', ['F#1', 'B1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop E', ['E1', 'B1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('1/2 down', ['F1', 'A#1', 'D#2', 'G#2', 'C#3', 'F#3', 'A#3', 'D#4']),\r\n      new StringedTuning('1 down', ['E1', 'A1', 'D2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1 1/2 down', ['D#1', 'G#1', 'C#2', 'F#2', 'B2', 'E3', 'G#3', 'C#4']),\r\n      new StringedTuning('2 down', ['D1', 'G1', 'C2', 'F2', 'A#2', 'D#3', 'G3', 'C4'])\r\n    ]]\r\n  ])],\r\n  ['Bass', new Map([\r\n    [4, [\r\n      new StringedTuning('E stand.', ['E1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('Drop D', ['D1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('1/2 down', ['D#1', 'G#1', 'C#2', 'F#2']),\r\n      new StringedTuning('1 down', ['D1', 'G1', 'C2', 'F2']),\r\n      new StringedTuning('1 1/2 down', ['C#1', 'F#1', 'B1', 'E2']),\r\n      new StringedTuning('2 down', ['C1', 'F1', 'A#1', 'D#2'])\r\n    ]],\r\n    [5, [\r\n      new StringedTuning('B stand.', ['B0', 'E1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('Drop A', ['A0', 'D1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('1/2 down', ['A#0', 'D#1', 'G#1', 'C#2', 'F#2']),\r\n      new StringedTuning('1 down', ['A0', 'D1', 'G1', 'C2', 'F2']),\r\n      new StringedTuning('1 1/2 down', ['G#0', 'C#1', 'F#1', 'B1', 'E2']),\r\n      new StringedTuning('2 down', ['G0', 'C1', 'F1', 'A#1', 'D#2'])\r\n    ]],\r\n    [6, [\r\n      new StringedTuning('F# stand.', ['F#0', 'B0', 'E1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('Drop E', ['E0', 'A0', 'D1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('1/2 down', ['F0', 'A#0', 'D#1', 'G#1', 'C#2', 'F#2']),\r\n      new StringedTuning('1 down', ['E1', 'A0', 'D1', 'G1', 'C2', 'F2']),\r\n      new StringedTuning('1 1/2 down', ['D#0', 'G#0', 'C#1', 'F#1', 'B1', 'E2']),\r\n      new StringedTuning('2 down', ['D0', 'G0', 'C1', 'F1', 'A#1', 'D#2'])\r\n    ]]\r\n  ])],\r\n  ['Ukulele', new Map([\r\n    [4, [\r\n      new StringedTuning('Hawaii', ['G4', 'C4', 'E4', 'A4']),\r\n      new StringedTuning('Low G', ['G3', 'C4', 'E4', 'A4']),\r\n      new StringedTuning('D-tuning', ['A4', 'D4', 'F#4', 'B4']),\r\n      new StringedTuning('Canadian', ['A3', 'D4', 'F#4', 'B4']),\r\n      new StringedTuning('Bariton', ['D3', 'G3', 'B3', 'E4'])\r\n    ]]\r\n  ])]\r\n])\r\n\r\n/**\r\n * For Notes that have a guitar string encoded in their channel, this function\r\n * allows to convert them to a GuitarNote.\r\n *\r\n * @param {Note} note a Note that has the guitar string stored in its channel\r\n *      e.g. 0 to 5 for a six string\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {GuitarNote} a GuitarNote\r\n */\r\nexport function guitarNoteFromNote (note, tuning) {\r\n  const string = note.channel\r\n  const reversedString = tuning.stringCount - string - 1\r\n  const fret = note.pitch - tuning.pitches[reversedString]\r\n  return GuitarNote.fromNote(note, string, fret)\r\n}\r\n\r\n/**\r\n * Returns a tuning with the specified pitches or null if none found.\r\n *\r\n * @param {number[]} pitches pitches of the tuning, same order as in\r\n *      Guitar.js' stringedTunings, i.e. low to high notes\r\n * @returns {StringedTuning|null} the found tuning or null\r\n */\r\nexport function getTuningFromPitches (pitches) {\r\n  const stringCount = pitches.length\r\n  for (const stringCountMap of stringedTunings.values()) {\r\n    if (stringCountMap.has(stringCount)) {\r\n      const tunings = stringCountMap.get(stringCount)\r\n      for (const t of tunings) {\r\n        if (arrayShallowEquals(t.pitches, pitches)) {\r\n          return t\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\n/**\r\n * Returns the pitch range of a tuning, given the number of frets.\r\n *\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has (default: 24)\r\n * @returns {number[]} [minPitch, maxPitch]\r\n */\r\nexport function getTuningPitchRange (tuning, fretCount = 24) {\r\n  // const openExtent = extent(tuning.pitches);\r\n  const openMax = tuning.pitches[tuning.stringCount - 1]\r\n  const openMin = tuning.pitches[0]\r\n  return [openMin, openMax + fretCount]\r\n}\r\n\r\n/**\r\n * Colors for guitar strings, acces via stringColor[string]\r\n * where string in [1, 8].\r\n *\r\n * @type {string[]}\r\n */\r\nexport const stringColors = [\r\n  '#888',\r\n  '#d122e9',\r\n  '#31eb1c',\r\n  '#f37c14',\r\n  '#10edfc',\r\n  '#ffeb09',\r\n  '#ff210d',\r\n  'silver',\r\n  'gold'\r\n]\r\n\r\n/**\r\n * Returns the pitch of a note at a given fretboard position.\r\n *\r\n * @param {number} string string\r\n * @param {number} fret fret\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {number} pitch\r\n */\r\nexport function getPitchFromFretboardPos (string, fret, tuning) {\r\n  // Order is reversed, since tunings are named from bass to treble\r\n  // but strings are numbered the other direction...\r\n  const reversedString = tuning.stringCount - string + 1\r\n  const openPitch = tuning.pitches[reversedString - 1]\r\n  return openPitch + fret\r\n}\r\n\r\n/**\r\n * Returns MIDI attributes of a note at a given fretboard position, e.g. C#\r\n *\r\n * @param {number} string string\r\n * @param {number} fret fret\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {object} note info, e.g. { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\nexport function getNoteInfoFromFretboardPos (string, fret, tuning) {\r\n  const pitch = getPitchFromFretboardPos(string, fret, tuning)\r\n  return getMidiNoteByNr(pitch)\r\n}\r\n\r\n/**\r\n * Finds all fretboard positions with this exact pitch.\r\n *\r\n * @param {number} pitch MIDI pitch\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has\r\n * @returns {object[]} positions\r\n */\r\nexport function getFretboardPositionsFromPitch (pitch, tuning, fretCount) {\r\n  const positions = []\r\n  const stringCount = tuning.stringCount\r\n  for (let string = 0; string < stringCount; string++) {\r\n    const openPitch = tuning.pitches[string]\r\n    // Rule out strings where pitch is lower than open string\r\n    if (pitch < openPitch) {\r\n      continue\r\n    }\r\n    // Rule out strings where pitch is higher than highest fret\r\n    if (pitch > openPitch + fretCount) {\r\n      continue\r\n    }\r\n    positions.push({\r\n      // Convert so string 1 is treble\r\n      string: stringCount - string,\r\n      fret: pitch - openPitch\r\n    })\r\n  }\r\n  return positions\r\n}\r\n\r\n/**\r\n * Finds all fretboard positions with this note in all octaves.\r\n *\r\n * @param {string} name note name, e.g. 'C#'\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has\r\n * @returns {object[]} positions\r\n */\r\nexport function getFretboardPositionsFromNoteName (name, tuning, fretCount = 24) {\r\n  const n = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\r\n  if (!n.includes(name)) { return null }\r\n  const positions = []\r\n  const lowestPitch = n.indexOf(name)\r\n  const stringCount = tuning.stringCount\r\n  for (let string = 0; string < stringCount; string++) {\r\n    // First fret where this note appears\r\n    const openPitch = tuning.pitches[string]\r\n    let fret = lowestPitch - (openPitch % 12)\r\n    if (fret < 0) {\r\n      fret += 12\r\n    }\r\n    while (fret <= fretCount) {\r\n      positions.push({\r\n        // Convert so string 1 is treble\r\n        string: stringCount - string,\r\n        fret\r\n      })\r\n      // Go to next octave\r\n      fret += 12\r\n    }\r\n  }\r\n  return positions\r\n}\r\n\r\n/**\r\n * Generates example MIDI-like data (preprocessed MIDI).\r\n *\r\n * @param {number} startTime start tick\r\n * @param {number} count number of notes to generate\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {GuitarNote[]} notes\r\n */\r\nexport function generateExampleData (startTime = 0, count = 50, tuning) {\r\n  let currentTime = startTime\r\n  return Array.from({ length: count })\r\n    .map(() => {\r\n      const start = currentTime + randFloat(0, 1)\r\n      currentTime = start + randFloat(0, 1)\r\n      const string = randomInt(1, 7)()\r\n      const fret = randomInt(0, 25)()\r\n      const pitch = getPitchFromFretboardPos(string, fret, tuning)\r\n      const velocity = randomInt(15, 127)()\r\n      return new GuitarNote(\r\n        pitch,\r\n        start,\r\n        velocity,\r\n        string,\r\n        currentTime,\r\n        string,\r\n        fret\r\n      )\r\n    })\r\n}\r\n\r\n/**\r\n * Estimates the fretboard position from MIDI notes\r\n *\r\n * @todo does not work well yet\r\n * @param {Note[]} notes notes with only MIDI information\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has\r\n * @returns {GuitarNote[]} GuitarNotes with fretboard positions\r\n */\r\nexport function fretboardPositionsFromMidi (notes, tuning, fretCount = 24) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  if (!tuning || !tuning.pitches) {\r\n    console.warn('Invalid tuning parameter!')\r\n    return []\r\n  }\r\n  // Sort notes that cannot be played out in advance for better performance\r\n  const [minPitch, maxPitch] = getTuningPitchRange(tuning, fretCount)\r\n  const possibleNotes = []\r\n  const errorPitches = []\r\n  for (const note of notes) {\r\n    if (note.pitch < minPitch || note.pitch > maxPitch) {\r\n      errorPitches.push(note.pitch)\r\n    } else {\r\n      possibleNotes.push(note)\r\n    }\r\n  }\r\n  const result = []\r\n  for (const note of possibleNotes) {\r\n    const positions = getFretboardPositionsFromPitch(note.pitch, tuning, 24)\r\n    // Choose best position\r\n    // TODO: improve this to make it easier to play, take closest postion to prior one\r\n    let bestPos = positions[0]\r\n    for (const pos of positions) {\r\n      if (pos.fret < bestPos.fret) {\r\n        bestPos = pos\r\n      }\r\n    }\r\n    const { string, fret } = bestPos\r\n    result.push(GuitarNote.fromNote(note, string, fret))\r\n  }\r\n  // Give advice on transposing for better results\r\n  if (errorPitches.length > 0) {\r\n    const [minDataPitch, maxDataPitch] = extent(notes, d => d.pitch)\r\n    let advice = ''\r\n    if (minDataPitch < minPitch) {\r\n      advice += `Transpose by ${minPitch - minDataPitch} semitones`\r\n    }\r\n    if (maxPitch < maxDataPitch) {\r\n      advice += `Transpose by ${maxPitch - maxDataPitch} semitones`\r\n    }\r\n    console.warn(\r\n            `Cannot find a fretboard position for ${errorPitches.length} pitches, try another tuning instead:\\n`,\r\n            errorPitches,\r\n            `\\nCurrent tuning's pitch range is ${minPitch} - ${maxPitch}`,\r\n            `\\ndata pitch range is ${minDataPitch} - ${maxDataPitch}\\n`,\r\n            advice\r\n    )\r\n  }\r\n  return result\r\n}\r\n\r\n// /**\r\n//  * @todo chords always? use 4-fret-blocks\r\n//  * @param {GuitarNote[]} notes notes with fretboard positions\r\n//  * @returns {?} fingering information\r\n//  */\r\n// export function fingeringFromFretboardPositions(notes) {\r\n//     // TODO: detect chords first?\r\n//     // TODO: then lookup chords' fingerings from a lookup table\r\n\r\n//     // TODO: alternatively (as fallback) use heuristics\r\n\r\n//     // TODO: or try to do it like humans do when playing\r\n\r\n//     // TODO: consider prior and following notes/chords!\r\n\r\n// }\r\n", "import { difference, extent, intersection, max } from 'd3'\r\nimport { getMidiNoteByLabel, getMidiNoteByNr } from '../fileFormats/Midi.js'\r\nimport { detectChordsByExactStart } from '../chords/Chords.js'\r\nimport Note from '../types/Note.js'\r\nimport { bpmToSecondsPerBeat } from '../utils/MusicUtils.js'\r\n\r\n/**\r\n * @module instruments/Lamellophone\r\n */\r\n\r\n/**\r\n * Represents Lamellophone tunings\r\n */\r\nexport class LamellophoneTuning {\r\n  /**\r\n     * Represents a tuning of lamellophone.\r\n     *\r\n     * @param {string} name name\r\n     * @param {string[]} notes array of notes, same order as on instrument\r\n     *      e.g. [..., 'D4','C4', 'F#4', ...]\r\n     */\r\n  constructor (name, notes) {\r\n    this.name = name\r\n    this.notes = notes\r\n    this.short = notes.join(' ')\r\n    this.pitches = notes.map(note => getMidiNoteByLabel(note).pitch)\r\n    this.pitchesSorted = [...this.pitches]\r\n      .sort((a, b) => a - b)\r\n    this.keyCount = notes.length\r\n  }\r\n\r\n  /**\r\n     * Returns an array of the tuning's notes as number representation:\r\n     * Tuning notes:  C4, D4, ... C5, D5, ... C6,  D6\r\n     * Number format: 1,  2,  ... 1\u00B0, 2\u00B0, ... 1\u00B0\u00B0, 2\u00B0\u00B0\r\n     *\r\n     * @returns {string[]} array with tuning notes in number representation\r\n     */\r\n  getNumbers () {\r\n    const pitches = this.pitchesSorted\r\n    const numbers = new Map()\r\n    for (const [index, pitch] of pitches.entries()) {\r\n      let number = index + 1\r\n      let ending = ''\r\n      let lowerOctave = pitch - 12\r\n      while (lowerOctave > 0 && numbers.has(lowerOctave)) {\r\n        number = numbers.get(lowerOctave).number\r\n        ending += '\u00B0'\r\n        lowerOctave -= 12\r\n      }\r\n      numbers.set(pitch, { number, numberString: `${number}${ending}` })\r\n    }\r\n    return [...numbers.values()]\r\n      .map(d => d.numberString)\r\n  }\r\n\r\n  /**\r\n     * Returns an array of the tuning's notes as letter representation:\r\n     * Tuning notes:  C4, D4, ... C5, D5, ... C6,  D6\r\n     * Number format: C,  D,  ... C\u00B0, D\u00B0, ... C\u00B0\u00B0, D\u00B0\u00B0\r\n     *\r\n     * @returns {string[]} array with tuning notes in letter representation\r\n     */\r\n  getLetters () {\r\n    const pitches = this.pitchesSorted\r\n    const numbers = new Map()\r\n    for (const [index, pitch] of pitches.entries()) {\r\n      let number = index + 1\r\n      let ending = ''\r\n      let lowerOctave = pitch - 12\r\n      while (lowerOctave > 0 && numbers.has(lowerOctave)) {\r\n        number = numbers.get(lowerOctave).number\r\n        ending += '\u00B0'\r\n        lowerOctave -= 12\r\n      }\r\n      const letter = getMidiNoteByNr(pitch).name\r\n      numbers.set(pitch, { number, letterString: `${letter}${ending}` })\r\n    }\r\n    return [...numbers.values()].map(d => d.letterString)\r\n  }\r\n}\r\n\r\n/**\r\n * Tunings.\r\n * Notes are in the same order as on the instrument\r\n *\r\n * @type {Map<string,Map<string,LamellophoneTuning>>}\r\n */\r\nexport const lamellophoneTunings = new Map([\r\n  ['Kalimba', new Map([\r\n    [\r\n      '9 A Major',\r\n      new LamellophoneTuning('9 A Major', ['A5', 'C#6', 'C#5', 'A5', 'A4', 'F#5', 'E5', 'E6', 'B5'])\r\n    ],\r\n    [\r\n      '9 A Minor',\r\n      new LamellophoneTuning('9 A Minor', ['A5', 'C6', 'C5', 'A5', 'A4', 'F5', 'E5', 'E6', 'B5'])\r\n    ],\r\n    [\r\n      '9 A Minor 7',\r\n      new LamellophoneTuning('9 A Minor 7', ['A5', 'C6', 'C5', 'A5', 'A4', 'F#5', 'E5', 'E6', 'B5'])\r\n    ],\r\n    [\r\n      '9 A Ake Bono',\r\n      new LamellophoneTuning('9 A Ake Bono', ['A5', 'D6', 'D5', 'A5', 'A4', 'F5', 'E5', 'E6', 'A#5'])\r\n    ],\r\n    [\r\n      '9 A Hijaz',\r\n      new LamellophoneTuning('9 A Hijaz', ['G5', 'D6', 'D5', 'A5', 'A4', 'F#5', 'D#5', 'D#6', 'A#5'])\r\n    ],\r\n    [\r\n      '9 A Pygmy',\r\n      new LamellophoneTuning('9 A Pygmy', ['G5', 'C6', 'C5', 'G5', 'G4', 'D#5', 'D5', 'D#6', 'A#5'])\r\n    ],\r\n    [\r\n      '17 C Major',\r\n      new LamellophoneTuning('17 C Major', ['D6', 'B5', 'G5', 'E5', 'C5', 'A4', 'F4', 'D4', 'C4', 'E4', 'G4', 'B4', 'D5', 'F5', 'A5', 'C6', 'E6'])\r\n    ],\r\n    [\r\n      '21 C Major',\r\n      new LamellophoneTuning('21 C Major', ['D6', 'B5', 'G5', 'E5', 'C5', 'A4', 'F4', 'D4', 'B3', 'G3', 'F3', 'A3', 'C4', 'E4', 'G4', 'B4', 'D5', 'F5', 'A5', 'C6', 'E6'])\r\n    ]\r\n  ])]\r\n])\r\n\r\n/**\r\n * Parses a tab into notes\r\n *\r\n * @param {string} tab in letter format\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @param {number} tempo tempo in bpm\r\n * @returns {Note[]} notes\r\n */\r\nexport function convertTabToNotes (tab, tuning, tempo = 120) {\r\n  if (!tab || tab.length === 0) { return [] }\r\n  // Create a mapping symbol->pitch\r\n  const symbolToPitchMap = new Map()\r\n  const symbols = tuning.getLetters()\r\n  for (let index = 0; index < tuning.keyCount; index++) {\r\n    symbolToPitchMap.set(symbols[index], tuning.pitchesSorted[index])\r\n  }\r\n  // Parse tab to notes\r\n  const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\r\n  const noteNamesSet = new Set(noteNames)\r\n  const lowestNote = tuning.pitchesSorted[0]\r\n  const startOct = getMidiNoteByNr(lowestNote).octave\r\n  const secondsPerBeat = bpmToSecondsPerBeat(tempo)\r\n  let insideChord = false\r\n  let insideNote = false\r\n  let currentTime = 0\r\n  let currentPitch = 0\r\n  let currentOctOffset = 0\r\n  const notes = []\r\n  tab = `${tab.toUpperCase().replaceAll('\\n', ' \\n')} `\r\n  // This is needed more often\r\n  const finishNote = () => {\r\n    try {\r\n      notes.push(Note.from({\r\n        pitch: currentPitch + 12 * (startOct + 1 + currentOctOffset),\r\n        start: currentTime,\r\n        end: currentTime + secondsPerBeat\r\n      }))\r\n      currentOctOffset = 0\r\n      if (!insideChord) {\r\n        currentTime += secondsPerBeat\r\n      }\r\n    } catch {\r\n      console.log(currentPitch)\r\n    }\r\n    insideNote = false\r\n  }\r\n  for (const char of tab) {\r\n    if (char === '(') {\r\n      // Start chord (but finish current if any)\r\n      if (insideChord) {\r\n        insideChord = false\r\n      }\r\n      if (insideNote) {\r\n        finishNote()\r\n      }\r\n      insideChord = true\r\n    } else if (noteNamesSet.has(char)) {\r\n      // Start note (but finish current if any)\r\n      if (insideNote) {\r\n        finishNote()\r\n      }\r\n      insideNote = true\r\n      currentPitch = noteNames.indexOf(char)\r\n    } else if (char === '#') {\r\n      // Sharpen note\r\n      currentPitch++\r\n    } else if (char === '\u00B0') {\r\n      // Increase ocatve\r\n      currentOctOffset++\r\n    } else if (char === ' ' || char === '\\n' || char === ')') {\r\n      // End chord and note if inside\r\n      if (char === ')') {\r\n        insideChord = false\r\n      }\r\n      if (char === '\\n') {\r\n        insideChord = false\r\n        currentTime += secondsPerBeat\r\n      }\r\n      if (insideNote) {\r\n        finishNote()\r\n      }\r\n    }\r\n  }\r\n  return notes\r\n}\r\n\r\n/**\r\n * Converts an array of notes into a text tab\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @param {'letter'|'number'} mode mode\r\n * @param {number} restSize number of seconds for a gap between chords to insert\r\n *     a line break\r\n * @returns {string} text tab\r\n */\r\nexport function convertNotesToTab (notes, tuning, mode = 'letter', restSize = 0.1) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  // Create a mapping pitch->symbol\r\n  const pitchToSymbolMap = new Map()\r\n  const symbols = mode === 'letter' ? tuning.getLetters() : tuning.getNumbers()\r\n  for (let index = 0; index < tuning.keyCount; index++) {\r\n    pitchToSymbolMap.set(tuning.pitchesSorted[index], symbols[index])\r\n  }\r\n  // Get chords\r\n  const chords = detectChordsByExactStart(notes)\r\n  // Create tab\r\n  let tab = ''\r\n  let previousEnd = 0\r\n  for (const chord of chords) {\r\n    // Format chord's notes\r\n    let chordString = chord\r\n      .map(note => {\r\n        if (pitchToSymbolMap.has(note.pitch)) {\r\n          return pitchToSymbolMap.get(note.pitch) || `[${note.pitch}]`\r\n        } else {\r\n          return mode === 'letter' ? getMidiNoteByNr(note.pitch)?.name ?? note.pitch : note.pitch\r\n        }\r\n      })\r\n      .join(' ')\r\n    if (chord.length > 1) {\r\n      // Mark chords with backets (for multiple notes)\r\n      chordString = `(${chordString})`\r\n    }\r\n    tab = chord[0].start - previousEnd > restSize ? `${tab}\\n${chordString}` : `${tab} ${chordString}`\r\n    // Update last end time of chord\r\n    previousEnd = max(chord, n => n.end)\r\n  }\r\n  // Remove leading space\r\n  return tab.slice(1)\r\n}\r\n\r\n/**\r\n * Converts an array of notes into an HTML tab with colored notes\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @param {'letter'|'number'} mode mode\r\n * @param {number} restSize number of seconds for a gap between chords to insert\r\n *     a line break\r\n * @param {Function} colormap color map function: pitch to color\r\n * @returns {string} HTML tab\r\n */\r\nexport function convertNotesToHtmlTab (\r\n  notes,\r\n  tuning,\r\n  mode = 'letter',\r\n  restSize = 0.1,\r\n  colormap = () => 'black'\r\n) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  // Create a mapping pitch->symbol\r\n  const pitchToSymbolMap = new Map()\r\n  const symbols = mode === 'letter' ? tuning.getLetters() : tuning.getNumbers()\r\n  for (let index = 0; index < tuning.keyCount; index++) {\r\n    pitchToSymbolMap.set(tuning.pitches[index], symbols[index])\r\n  }\r\n  // Get chords\r\n  const chords = detectChordsByExactStart(notes)\r\n  // Create tab\r\n  let tab = ''\r\n  let previousEnd = 0\r\n  for (const chord of chords) {\r\n    // Format chord's notes\r\n    let chordString = chord\r\n      .map(note => {\r\n        let string\r\n        if (pitchToSymbolMap.has(note.pitch)) {\r\n          string = pitchToSymbolMap.get(note.pitch) || `[${note.pitch}]`\r\n        } else {\r\n          string = mode === 'letter' ? getMidiNoteByNr(note.pitch)?.name ?? note.pitch : note.pitch\r\n        }\r\n        const color = colormap(note.pitch)\r\n        return `<span class='note' style='background-color: ${color}'>${string}</span>`\r\n      })\r\n      .join('\\n')\r\n    if (chord.length > 1) {\r\n      // Mark chords with backets (for multiple notes)\r\n      chordString = `<span class='chord'>${chordString}</span>`\r\n    }\r\n    tab = chord[0].start - previousEnd > restSize ? `${tab}<br/>${chordString}` : `${tab}${chordString}`\r\n    // Update last end time of chord\r\n    previousEnd = max(chord, n => n.end)\r\n  }\r\n  return tab\r\n}\r\n\r\n/**\r\n * Converts a number-based tab to note letter format\r\n *\r\n * @param {string} numberTab tab text with number format\r\n * @param {Map<number, string>} numberLetterMap maps numbers to letters\r\n * @returns {string} tab in letter format\r\n */\r\nexport function convertNumbersToLetters (numberTab, numberLetterMap) {\r\n  if (!numberTab || numberTab.length === 0) { return '' }\r\n  // Normalize to \u00B0\r\n  numberTab = numberTab.replaceAll('\\'', '\u00B0')\r\n  numberTab = numberTab.replaceAll('\u2019', '\u00B0')\r\n  numberTab = numberTab.replaceAll('*', '\u00B0')\r\n  numberTab = numberTab.replaceAll('\u00BA', '\u00B0')\r\n  numberTab = numberTab.replaceAll('^', '\u00B0')\r\n  for (const [key, value] of numberLetterMap.entries()) {\r\n    numberTab = numberTab.replaceAll(key, value)\r\n  }\r\n  return numberTab\r\n}\r\n\r\n/**\r\n * Tries to find a transposition s.t. the tuning is able to play all notes.\r\n * If not not possible, return the transposition that requires the least keys to\r\n * be retuned.\r\n *\r\n * @todo tests fail\r\n * @param {Note[]} notes notes\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @returns {object} {transpose: number, retune: Map}\r\n */\r\nexport function bestTransposition (notes, tuning) {\r\n  if (!notes || notes.length === 0) {\r\n    return { transpose: 0, retune: new Map() }\r\n  }\r\n\r\n  const occuringPitches = new Set(notes.map(n => n.pitch))\r\n  if (occuringPitches.size > tuning.keyCount) {\r\n    // Cannot play all notes, no matter the transp. and tuning\r\n    // TODO:\r\n    // just choose best approx?\r\n\r\n  }\r\n  const notePitches = [...occuringPitches]\r\n\r\n  // Already perfect? return now\r\n  if (difference(notePitches, tuning.pitches).size === 0) {\r\n    return { transpose: 0, retune: new Map() }\r\n  }\r\n\r\n  const [minPitch, maxPitch] = extent(notePitches)\r\n  const transpose = (array, steps) => array.map(d => d + steps)\r\n\r\n  // Just brute force through all transpositions\r\n  let bestSteps = 0\r\n  let bestTransposed\r\n  let commonPitches\r\n  for (let steps = -minPitch; steps <= 127 - maxPitch; steps++) {\r\n    const transposed = transpose(notePitches, steps)\r\n    const common = intersection(transposed, tuning.pitches)\r\n    if (!commonPitches || common.size > commonPitches.size) {\r\n      bestSteps = steps\r\n      bestTransposed = transposed\r\n    }\r\n  }\r\n  bestTransposed = new Set(bestTransposed)\r\n\r\n  // Get pitches in tuning but not in notes and other way round\r\n  const uncommon = difference(bestTransposed, tuning.pitches)\r\n  console.log(uncommon)\r\n\r\n  const freePitches = new Set()\r\n  const neededPitches = []\r\n  for (const p of uncommon) {\r\n    if (bestTransposed.has(p)) {\r\n      neededPitches.push(p)\r\n    } else {\r\n      freePitches.add(p)\r\n    }\r\n  }\r\n  console.log(neededPitches)\r\n  console.log(freePitches)\r\n\r\n  if (neededPitches.length === 0) {\r\n    // Everything is fine!\r\n    return {\r\n      transpose: bestSteps,\r\n      retune: new Map()\r\n    }\r\n  }\r\n  if (freePitches.size === 0) {\r\n    // Cannot solve this!\r\n    return {\r\n      transpose: bestSteps,\r\n      retune: new Map()\r\n    }\r\n  }\r\n\r\n  // Get closest free pitch for each needed one\r\n  const retune = new Map()\r\n  for (const neededPitch of neededPitches) {\r\n    let bestMatch = null\r\n    const bestDiff = Number.POSITIVE_INFINITY\r\n    let freePitch\r\n    for (freePitch of freePitches) {\r\n      const diff = Math.abs(neededPitch - freePitch)\r\n      if (diff < bestDiff) {\r\n        bestMatch = freePitch\r\n      }\r\n    }\r\n    freePitches.delete(bestMatch)\r\n    retune.set(freePitch, neededPitch)\r\n  }\r\n\r\n  return {\r\n    transpose: bestSteps,\r\n    retune\r\n  }\r\n}\r\n", "import { group } from 'd3'\r\nimport { Chord } from '@tonaljs/tonal'\r\nimport { arrayShallowEquals } from '../utils/ArrayUtils.js'\r\nimport Note from '../types/Note.js' /* eslint-disable-line no-unused-vars */\r\n\r\n/**\r\n * @module Chords\r\n */\r\n\r\n/**\r\n * Detects chords as those notes that have the exact same start time, only works\r\n * for ground truth (since recordings are not exact)\r\n * Does only work if ground truth is aligned! TuxGuitar produces unaligned MIDI.\r\n *\r\n * @param {Note[]} notes notes\r\n * @returns {Note[][]} array of chord arrays\r\n */\r\nexport function detectChordsByExactStart (notes) {\r\n  const grouped = group(notes, d => d.start)\r\n  const chords = [...grouped]\r\n    .map(d => d[1])\r\n    // Sort chords by time\r\n    .sort((a, b) => a[0].start - b[0].start)\r\n    // Sort notes in each chord by pitch\r\n    .map(chord => chord.sort((a, b) => a.pitch - b.pitch))\r\n  return chords\r\n}\r\n\r\n/**\r\n * Detects chords by taking a note as new chord then adding all notes close\r\n * after it to the chord, until the next note is farther away than the given\r\n * `threshold`. Then, the next chord is started with this note.\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {number} threshold threshold\r\n * @returns {Note[][]} chords\r\n */\r\nexport function detectChordsBySimilarStart (notes, threshold = 0.02) {\r\n  const chords = []\r\n  let currentChord = []\r\n  let currentChordStartTime = 0\r\n  let currentChordPitches = new Set()\r\n  for (const note of notes) {\r\n    // Note belongs to current chord\r\n    if (note.start - currentChordStartTime <= threshold) {\r\n      // Do not allow the same note twice in a chord\r\n      if (!currentChordPitches.has(note.pitch)) {\r\n        currentChord.push(note)\r\n        currentChordPitches.add(note.pitch)\r\n      }\r\n    } else {\r\n      // Start new chord\r\n      if (currentChord.length > 0) {\r\n        chords.push(currentChord)\r\n      }\r\n      currentChord = [note]\r\n      currentChordStartTime = note.start\r\n      currentChordPitches = new Set([note.pitch])\r\n    }\r\n  }\r\n  if (currentChord.length > 0) {\r\n    chords.push(currentChord)\r\n  }\r\n  return chords\r\n}\r\n\r\n/**\r\n * Detects chords, by simply looking for notes that overlap each other in time.\r\n * Example:\r\n *    =======\r\n *       =========\r\n *         ========\r\n * Important: Notes must be sorted by start time for this to work correctly.\r\n *\r\n * @todo not used yet\r\n * @todo optional minimum overlap ratio\r\n * @todo new definition of chord? i.e. notes have to start 'together'\r\n * @param {Note[]} notes array of Note objects\r\n * @param {boolean} sortByPitch sort chords by pitch? (otherwise sorted\r\n *      by note start time)\r\n * @returns {Note[][]} array of chord arrays\r\n */\r\nexport function detectChordsByOverlap (notes, sortByPitch = true) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  if (notes.length === 1) { return [[notes[0]]] }\r\n  const sorted = [...notes].sort((a, b) => a.start !== b.start ? (a.start - b.start) : a.pitch - b.pitch)\r\n  const notesTodo = new Set(sorted)\r\n  const chords = []\r\n  // Find all overlaps with brute force\r\n  while (notesTodo.size > 0) {\r\n    // Take a new note and make a new chord\r\n    const note1 = notesTodo.values().next().value\r\n    notesTodo.delete(note1)\r\n    let chord = [note1]\r\n    // Add all notes that overap note1\r\n    for (const note2 of notesTodo.values()) {\r\n      if (note1.overlapInSeconds(note2) >= 0.5 * note1.getDuration()) {\r\n        chord.push(note2)\r\n        notesTodo.delete(note2)\r\n      }\r\n    }\r\n    if (sortByPitch) {\r\n      chord = chord.sort((a, b) => a.pitch - b.pitch)\r\n    }\r\n    chords.push(chord)\r\n  }\r\n  return chords\r\n}\r\n// export function detectChordsByOverlap(notes, sortByPitch = true) {\r\n//     if (!notes || !notes.length) { return []; }\r\n//     if (notes.length === 1) { return [[notes[0]]]; }\r\n//     const chords = [];\r\n//     let currentChord = [notes[0]];\r\n//     for (let i = 1; i < notes.length; i++) {\r\n//         const note = notes[i];\r\n//         console.log(i);\r\n//         console.log(currentChord);\r\n//         console.log(note);\r\n\r\n//         // Check for overlap with current chord\r\n//         let overlaps = false;\r\n//         for (let note2 of currentChord) {\r\n//             if (note.overlapsInTime(note2)) {\r\n//                 overlaps = true;\r\n//                 break;\r\n//             }\r\n//         }\r\n//         console.log(overlaps);\r\n//         if (overlaps) {\r\n//             currentChord.push(note);\r\n//             // TODO: also check the distance from the first note of the chord!\r\n//             // TODO:jump ahead to not count the cord multiple times (partially)\r\n//         } else {\r\n//             // If not, the previous chord is finished\r\n//             // Sort chord by pitch?\r\n//             if (sortByPitch) {\r\n//                 currentChord = currentChord.sort((a, b) => a.pitch - b.pitch);\r\n//             }\r\n//             chords.push(currentChord);\r\n//             // Start new chord\r\n//             if (i < notes.length - 1) {\r\n//                 currentChord = [notes[i + 1]];\r\n//                 i++;\r\n//             }\r\n//         }\r\n//     }\r\n//     // finish last chord\r\n//     chords.push(currentChord);\r\n//     return chords;\r\n// }\r\n\r\n/*\r\n * Maps number of steps (number of notes -1) to possible chord types\r\n */\r\nconst chordTypes = new Map([\r\n  [\r\n    1,\r\n    [\r\n      // TODO: how to handle inversions?\r\n      { steps: [5], name: 'Inverted power chord', suffix: '?' },\r\n      { steps: [7], name: 'Power chord', suffix: '5' }\r\n    ]\r\n  ],\r\n  [\r\n    2,\r\n    [\r\n      { steps: [2, 7], name: 'Suspended second', suffix: 'sus2' },\r\n      { steps: [3, 6], name: 'Diminished', suffix: 'dim' },\r\n      { steps: [3, 7], name: 'Minor', suffix: 'min' },\r\n      { steps: [4, 10], name: 'Seventh', suffix: '7' },\r\n      { steps: [4, 7], name: 'Major', suffix: '' },\r\n      { steps: [4, 8], name: 'Augmented', suffix: 'aug' },\r\n      { steps: [4, 9], name: 'Sixth', suffix: '6' },\r\n      { steps: [5, 7], name: 'Suspended fourth', suffix: 'sus4' }\r\n    ]\r\n  ],\r\n  [\r\n    3,\r\n    [\r\n      { steps: [2, 3, 7], name: 'Minor, added ninth', suffix: 'm(add9)' },\r\n      { steps: [2, 4, 7], name: 'Added ninth', suffix: 'add9' },\r\n      { steps: [3, 6, 10], name: 'Minor seventh, flat fifth', suffix: 'm7b5' },\r\n      { steps: [3, 7, 10], name: 'Minor seventh', suffix: 'm7' },\r\n      { steps: [3, 7, 11], name: 'Minor, major seventh', suffix: 'm(Maj7)' },\r\n      { steps: [3, 7, 8], name: 'Minor, flat sixth', suffix: 'mb6' },\r\n      { steps: [3, 7, 9], name: 'Minor sixth', suffix: 'm6' },\r\n      { steps: [4, 5, 11], name: 'Major eleventh (no fifth, no ninth)', suffix: 'Maj11' },\r\n      { steps: [4, 5, 7], name: 'Added fourth', suffix: 'add4' },\r\n      { steps: [4, 7, 10], name: 'Dominant seventh', suffix: '7' },\r\n      { steps: [4, 7, 11], name: 'Major seventh', suffix: 'Maj7' },\r\n      { steps: [4, 7, 9], name: 'Major Sixth', suffix: 'Maj6' }\r\n    ]\r\n  ],\r\n  [\r\n    4,\r\n    [\r\n      { steps: [2, 3, 6, 10], name: 'Minor ninth flat fifth', suffix: 'm9b5' },\r\n      { steps: [2, 3, 7, 10], name: 'Minor ninth', suffix: 'm9' },\r\n      { steps: [2, 3, 7, 11], name: 'Minor ninth, major seventh', suffix: 'm9(Maj7)' },\r\n      { steps: [2, 3, 7, 9], name: 'Minor sixth, added ninth', suffix: 'm6/9' },\r\n      { steps: [2, 4, 7, 11], name: 'Major ninth', suffix: 'Maj9' },\r\n      { steps: [2, 4, 7, 9], name: 'Sixth, added ninth', suffix: '6/9' },\r\n      { steps: [4, 5, 7, 11], name: 'Major eleventh (no ninth)', suffix: 'Maj11' },\r\n      { steps: [4, 6, 7, 10], name: 'Seventh, sharp eleventh', suffix: '7#11' },\r\n      { steps: [4, 6, 7, 11], name: 'Major seventh, sharp eleventh', suffix: 'Maj7#11' }\r\n    ]\r\n  ],\r\n  [\r\n    5,\r\n    [\r\n      { steps: [2, 4, 5, 7, 11], name: 'Major eleventh', suffix: 'Maj11' },\r\n      { steps: [2, 4, 7, 9, 11], name: 'Major thirteen', suffix: 'Maj13' }\r\n    ]\r\n  ],\r\n  [\r\n    6,\r\n    [\r\n      { steps: [2, 3, 4, 6, 7, 10], name: 'Minor thirteen', suffix: 'm13' }\r\n    ]\r\n  ]\r\n])\r\n\r\n/**\r\n * Returns chord type, e.g. 'Major', 'Diminished', ...\r\n * Important: Notes must be sorted by pitch ascending\r\n *\r\n * @todo some chords might be multiple types\r\n * @param {Note[]} notes notes (sorted by pitch asc.)\r\n * @returns {string} chord type\r\n */\r\nexport function getChordType (notes) {\r\n  if (!notes || notes.length === 0) { return { name: 'No note' } }\r\n  if (notes.length === 1) { return { name: 'Single note' } }\r\n  // Get distances in semitones\r\n  let steps = []\r\n  const lowest = notes[0].pitch\r\n  for (let index = 1; index < notes.length; index++) {\r\n    steps.push(notes[index].pitch - lowest)\r\n  }\r\n  // Normalize higher than octave\r\n  steps = steps.map(d => d % 12)\r\n  // Filter doubles\r\n  steps = [...new Set(steps)]\r\n  // Filter octaves\r\n  steps = steps.filter(d => d !== 0)\r\n  if (steps.length === 0) { return { name: 'Octave' } }\r\n  steps.sort((a, b) => a - b)\r\n\r\n  // Now get the chord type\r\n  const candidates = chordTypes.get(steps.length)\r\n  if (candidates) {\r\n    for (const cand of candidates) {\r\n      if (arrayShallowEquals(steps, cand.steps)) {\r\n        return cand\r\n      }\r\n    }\r\n  }\r\n  return { name: 'Unknown chord type' }\r\n}\r\n\r\n/**\r\n * https://github.com/tonaljs/tonal/tree/master/packages/chord\r\n * Detected chords can be used with https://github.com/tonaljs/tonal/tree/master/packages/chord-type\r\n *\r\n * @param {Note[]} notes notes\r\n * @returns {string[]} possible chord types\r\n */\r\nexport function getChordName (notes) {\r\n  const noteLetters = notes\r\n    .sort((a, b) => a.pitch - b.pitch)\r\n    .map(d => d.getLetter())\r\n  const chords = Chord.detect(noteLetters)\r\n  return chords\r\n}\r\n\r\n// /**\r\n//  * Estimates the name of a given chord of notes\r\n//  *\r\n//  * @param {string} chord name\r\n//  * @return {Note[]} notes array of Note objects\r\n//  * @todo use tonaljs\r\n//  * @todo use this https://github.com/greird/chordictionaryjs\r\n//  */\r\n// export function getNotesFromChordName(name, length = 1, start = 0) {\r\n//     console.error('NIY');\r\n// }\r\n", "/**\r\n * Fill a string with a repeated character\r\n *\r\n * @param character\r\n * @param repetition\r\n */\r\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n    return function (...args) {\r\n        // tslint:disable-next-line\r\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n        return fn.apply(this, args);\r\n    };\r\n}\n\nfunction isNamed(src) {\r\n    return src !== null && typeof src === \"object\" && typeof src.name === \"string\"\r\n        ? true\r\n        : false;\r\n}\n\nfunction isPitch(pitch) {\r\n    return pitch !== null &&\r\n        typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\"\r\n        ? true\r\n        : false;\r\n}\r\n// The number of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache$1 = new Map();\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache$1.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse$1(src)\r\n        : isPitch(src)\r\n            ? note(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache$1.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX$1 = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX$1.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse$1(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const height = oct === undefined\r\n        ? mod(SEMI[step] + alt, 12) - 12 * 99\r\n        : SEMI[step] + alt + 12 * (oct + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step,\r\n    };\r\n}\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct,\r\n    };\r\n}\r\n/**\r\n * @private\r\n *\r\n * forceDescending is used in the case of unison (#243)\r\n */\r\nfunction coordToInterval(coord, forceDescending) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const calcNum = step + 1 + 7 * oct;\r\n    // this is an edge case: descending pitch class unison (see #243)\r\n    const num = calcNum === 0 ? step + 1 : calcNum;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    // If it's unison and not pitch class, it can be descending interval (#243)\r\n    const forceDescending = to.height === from.height &&\r\n        to.midi !== null &&\r\n        from.midi !== null &&\r\n        from.step > to.step;\r\n    return coordToInterval([fifths, octs], forceDescending).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, deprecate, distance, encode, fillStr, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.es.js.map\n", "// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisher\u2013Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\r\nvar index = {\r\n    compact,\r\n    permutations,\r\n    range,\r\n    rotate,\r\n    shuffle,\r\n};\n\nexport default index;\nexport { compact, permutations, range, rotate, shuffle };\n//# sourceMappingURL=index.es.js.map\n", "import { range, compact, rotate } from '@tonaljs/collection';\nimport { deprecate, note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: [],\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction get(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\n/**\r\n * Use Pcset.properties\r\n * @function\r\n * @deprecated\r\n */\r\nconst pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\n/**\r\n * Get pitch class set chroma\r\n * @function\r\n * @example\r\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\r\n */\r\nconst chroma = (set) => get(set).chroma;\r\n/**\r\n * Get intervals (from C) of a set\r\n * @function\r\n * @example\r\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\r\n */\r\nconst intervals = (set) => get(set).intervals;\r\n/**\r\n * Get pitch class set number\r\n * @function\r\n * @example\r\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\r\n */\r\nconst num = (set) => get(set).setNum;\r\nconst IVLS = [\r\n    \"1P\",\r\n    \"2m\",\r\n    \"2M\",\r\n    \"3m\",\r\n    \"3M\",\r\n    \"4P\",\r\n    \"5d\",\r\n    \"5P\",\r\n    \"6m\",\r\n    \"6M\",\r\n    \"7m\",\r\n    \"7M\",\r\n];\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    return range(2048, 4095).map(setNumToChroma);\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = get(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return get(s1).setNum === get(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedIn(set) {\r\n    const s = get(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedIn;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedIn(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    chroma,\r\n    num,\r\n    intervals,\r\n    chromas,\r\n    isSupersetOf,\r\n    isSubsetOf,\r\n    isNoteIncludedIn,\r\n    isEqual,\r\n    filter,\r\n    modes,\r\n    // deprecated\r\n    pcset,\r\n};\r\n//// PRIVATE ////\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter((n) => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals,\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport { EmptyPcset, chromaToIntervals, chromas, index as default, filter, get, includes, isEqual, isNoteIncludedIn, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.es.js.map\n", "import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M ^ \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 \u0394 ma7 M7 Maj7 ^7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 \u03949 ^9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69 M69\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\r\n    [\r\n        \"1P 3M 5P 7M 11A\",\r\n        \"major seventh sharp eleventh\",\r\n        \"maj#4 \u0394#4 \u0394#11 M7#11 ^7#11 maj7#11\",\r\n    ],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\r\n        \"1P 3m 5P 7M\",\r\n        \"minor/major seventh\",\r\n        \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -\u03947 m\u0394 -^7\",\r\n    ],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\r\n    [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim \u00B0 o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 \u00B07 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 \u00F8 -7b5 h7 h\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\r\n    [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\r\n        \"1P 4P 5P 7m 9m\",\r\n        \"suspended fourth flat ninth\",\r\n        \"b9sus phryg 7b9sus 7b9sus4\",\r\n    ],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\r\n    [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\r\n    [\r\n        \"1P 3M 5P 7M 9M 11A\",\r\n        \"major sharp eleventh (lydian)\",\r\n        \"maj9#11 \u03949#11 ^9#11\",\r\n    ],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\nconst chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\n/**\r\n * Get all chord (long) names\r\n */\r\nfunction names() {\r\n    return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\n/**\r\n * Get all chord symbols\r\n */\r\nfunction symbols() {\r\n    return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...get$1(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases,\r\n    };\r\n    dictionary.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar index$1 = {\r\n    names,\r\n    symbols,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    chordType,\r\n};\n\nexport { add, addAlias, all, chordType, index$1 as default, entries, get, keys, names, removeAll, symbols };\n//# sourceMappingURL=index.es.js.map\n", "import { all } from '@tonaljs/chord-type';\nimport { note } from '@tonaljs/core';\nimport { modes } from '@tonaljs/pcset';\n\nconst namedSet = (notes) => {\r\n    const pcToName = notes.reduce((record, n) => {\r\n        const chroma = note(n).chroma;\r\n        if (chroma !== undefined) {\r\n            record[chroma] = record[chroma] || note(n).name;\r\n        }\r\n        return record;\r\n    }, {});\r\n    return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source) {\r\n    const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n    if (note.length === 0) {\r\n        return [];\r\n    }\r\n    const found = findExactMatches(notes, 1);\r\n    return found\r\n        .filter((chord) => chord.weight)\r\n        .sort((a, b) => b.weight - a.weight)\r\n        .map((chord) => chord.name);\r\n}\r\nfunction findExactMatches(notes, weight) {\r\n    const tonic = notes[0];\r\n    const tonicChroma = note(tonic).chroma;\r\n    const noteName = namedSet(notes);\r\n    // we need to test all chormas to get the correct baseNote\r\n    const allModes = modes(notes, false);\r\n    const found = [];\r\n    allModes.forEach((mode, index) => {\r\n        // some chords could have the same chroma but different interval spelling\r\n        const chordTypes = all().filter((chordType) => chordType.chroma === mode);\r\n        chordTypes.forEach((chordType) => {\r\n            const chordName = chordType.aliases[0];\r\n            const baseNote = noteName(index);\r\n            const isInversion = index !== tonicChroma;\r\n            if (isInversion) {\r\n                found.push({\r\n                    weight: 0.5 * weight,\r\n                    name: `${baseNote}${chordName}/${tonic}`,\r\n                });\r\n            }\r\n            else {\r\n                found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\r\n            }\r\n        });\r\n    });\r\n    return found;\r\n}\r\nvar index = { detect };\n\nexport { index as default, detect };\n//# sourceMappingURL=index.es.js.map\n", "import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\", \"messiaen's mode #1\"],\r\n    [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 2A 3M 4A 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\",\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"superlocrian diminished\",\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\r\n    [\r\n        \"1P 2M 3m 4A 5P 6M 7m\",\r\n        \"dorian #4\",\r\n        \"ukrainian dorian\",\r\n        \"romanian minor\",\r\n        \"altered dorian\",\r\n    ],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\",\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\r\n        \"1P 2m 3m 3M 4A 5P 6M 7m\",\r\n        \"half-whole diminished\",\r\n        \"dominant diminished\",\r\n        \"messiaen's mode #2\",\r\n    ],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n    // 10-note scales\r\n    [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\nfunction names() {\r\n    return dictionary.map((scale) => scale.name);\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\nconst scaleType = deprecate(\"ScaleDictionary.scaleType\", \"ScaleType.get\", get);\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ScaleDictionary.entries\", \"ScaleType.all\", all);\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...get$1(intervals), name, intervals, aliases };\r\n    dictionary.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\r\nvar index$1 = {\r\n    names,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    scaleType,\r\n};\n\nexport { NoScaleType, add, addAlias, all, index$1 as default, entries, get, keys, names, removeAll, scaleType };\n//# sourceMappingURL=index.es.js.map\n", "import { detect } from '@tonaljs/chord-detect';\nexport { detect } from '@tonaljs/chord-detect';\nimport { get as get$1, all as all$1 } from '@tonaljs/chord-type';\nimport { deprecate, tokenizeNote, note, distance, transpose as transpose$1 } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { all } from '@tonaljs/scale-type';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    symbol: \"\",\r\n    root: \"\",\r\n    rootDegree: 0,\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction get(src) {\r\n    if (src === \"\") {\r\n        return NoChord;\r\n    }\r\n    if (Array.isArray(src) && src.length === 2) {\r\n        return getChord(src[1], src[0]);\r\n    }\r\n    else {\r\n        const [tonic, type] = tokenize(src);\r\n        const chord = getChord(type, tonic);\r\n        return chord.empty ? getChord(src) : chord;\r\n    }\r\n}\r\n/**\r\n * Get chord properties\r\n *\r\n * @param typeName - the chord type name\r\n * @param [tonic] - Optional tonic\r\n * @param [root]  - Optional root (requires a tonic)\r\n */\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n    const type = get$1(typeName);\r\n    const tonic = note(optionalTonic || \"\");\r\n    const root = note(optionalRoot || \"\");\r\n    if (type.empty ||\r\n        (optionalTonic && tonic.empty) ||\r\n        (optionalRoot && root.empty)) {\r\n        return NoChord;\r\n    }\r\n    const rootInterval = distance(tonic.pc, root.pc);\r\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n    if (!root.empty && !rootDegree) {\r\n        return NoChord;\r\n    }\r\n    const intervals = Array.from(type.intervals);\r\n    for (let i = 1; i < rootDegree; i++) {\r\n        const num = intervals[0][0];\r\n        const quality = intervals[0][1];\r\n        const newNum = parseInt(num, 10) + 7;\r\n        intervals.push(`${newNum}${quality}`);\r\n        intervals.shift();\r\n    }\r\n    const notes = tonic.empty\r\n        ? []\r\n        : intervals.map((i) => transpose$1(tonic, i));\r\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc}`;\r\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n    return {\r\n        ...type,\r\n        name,\r\n        symbol,\r\n        type: type.name,\r\n        root: root.name,\r\n        intervals,\r\n        rootDegree,\r\n        tonic: tonic.name,\r\n        notes,\r\n    };\r\n}\r\nconst chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return chordName;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = get(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return all()\r\n        .filter((scale) => isChordIncluded(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = get(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSuperset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = get(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSubset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\nvar index = {\r\n    getChord,\r\n    get,\r\n    detect,\r\n    chordScales,\r\n    extended,\r\n    reduced,\r\n    tokenize,\r\n    transpose,\r\n    // deprecate\r\n    chord,\r\n};\n\nexport { chord, chordScales, index as default, extended, get, getChord, reduced, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n", "// source: https://en.wikipedia.org/wiki/Note_value\r\nconst DATA = [\r\n    [\r\n        0.125,\r\n        \"dl\",\r\n        [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\r\n    ],\r\n    [0.25, \"l\", [\"long\", \"longa\"]],\r\n    [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n    [1, \"w\", [\"whole\", \"semibreve\"]],\r\n    [2, \"h\", [\"half\", \"minim\"]],\r\n    [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n    [8, \"e\", [\"eighth\", \"quaver\"]],\r\n    [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n    [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n    [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n    [128, \"h\", [\"hundred twenty-eighth\"]],\r\n    [256, \"th\", [\"two hundred fifty-sixth\"]],\r\n];\n\nconst VALUES = [];\r\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\r\nconst NoDuration = {\r\n    empty: true,\r\n    name: \"\",\r\n    value: 0,\r\n    fraction: [0, 0],\r\n    shorthand: \"\",\r\n    dots: \"\",\r\n    names: [],\r\n};\r\nfunction names() {\r\n    return VALUES.reduce((names, duration) => {\r\n        duration.names.forEach((name) => names.push(name));\r\n        return names;\r\n    }, []);\r\n}\r\nfunction shorthands() {\r\n    return VALUES.map((dur) => dur.shorthand);\r\n}\r\nconst REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n    const [_, simple, dots] = REGEX.exec(name) || [];\r\n    const base = VALUES.find((dur) => dur.shorthand === simple || dur.names.includes(simple));\r\n    if (!base) {\r\n        return NoDuration;\r\n    }\r\n    const fraction = calcDots(base.fraction, dots.length);\r\n    const value = fraction[0] / fraction[1];\r\n    return { ...base, name, dots, value, fraction };\r\n}\r\nconst value = (name) => get(name).value;\r\nconst fraction = (name) => get(name).fraction;\r\nvar index = { names, shorthands, get, value, fraction };\r\n//// PRIVATE ////\r\nfunction add(denominator, shorthand, names) {\r\n    VALUES.push({\r\n        empty: false,\r\n        dots: \"\",\r\n        name: \"\",\r\n        value: 1 / denominator,\r\n        fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n        shorthand,\r\n        names,\r\n    });\r\n}\r\nfunction calcDots(fraction, dots) {\r\n    const pow = Math.pow(2, dots);\r\n    let numerator = fraction[0] * pow;\r\n    let denominator = fraction[1] * pow;\r\n    const base = numerator;\r\n    // add fractions\r\n    for (let i = 0; i < dots; i++) {\r\n        numerator += base / Math.pow(2, i + 1);\r\n    }\r\n    // simplify\r\n    while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n        numerator /= 2;\r\n        denominator /= 2;\r\n    }\r\n    return [numerator, denominator];\r\n}\n\nexport default index;\nexport { fraction, get, names, shorthands, value };\n//# sourceMappingURL=index.es.js.map\n", "import { interval, distance as distance$1, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst get = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get quality of an interval\r\n * @function\r\n * @example\r\n * Interval.quality('P4') // => \"P\"\r\n */\r\nconst quality = (name) => interval(name).q;\r\n/**\r\n * Get number of an interval\r\n * @function\r\n * @example\r\n * Interval.num('P4') // => 4\r\n */\r\nconst num = (name) => interval(name).num;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Find interval between two notes\r\n *\r\n * @example\r\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\r\n */\r\nconst distance = distance$1;\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nfunction transposeFifths(interval, fifths) {\r\n    const ivl = get(interval);\r\n    if (ivl.empty)\r\n        return \"\";\r\n    const [nFifths, nOcts, dir] = ivl.coord;\r\n    return coordToInterval([nFifths + fifths, nOcts, dir]).name;\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    num,\r\n    semitones,\r\n    quality,\r\n    fromSemitones,\r\n    distance,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract,\r\n    transposeFifths,\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport { add, addTo, index as default, distance, fromSemitones, get, invert, name, names, num, quality, semitones, simplify, substract, transposeFifths };\n//# sourceMappingURL=index.es.js.map\n", "import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n        return \"\";\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar index = { isMidi, toMidi, midiToFreq, midiToNoteName, freqToMidi };\n\nexport { index as default, freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.es.js.map\n", "import { deprecate, isPitch, altToAcc, isNamed, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction get(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? get(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? get(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\nconst romanNumeral = deprecate(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir,\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    // deprecated\r\n    romanNumeral,\r\n};\n\nexport { index as default, get, names, tokenize };\n//# sourceMappingURL=index.es.js.map\n", "import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { get } from '@tonaljs/roman-numeral';\n\nconst Empty = Object.freeze([]);\r\nconst NoKey = {\r\n    type: \"major\",\r\n    tonic: \"\",\r\n    alteration: 0,\r\n    keySignature: \"\",\r\n};\r\nconst NoKeyScale = {\r\n    tonic: \"\",\r\n    grades: Empty,\r\n    intervals: Empty,\r\n    scale: Empty,\r\n    chords: Empty,\r\n    chordsHarmonicFunction: Empty,\r\n    chordScales: Empty,\r\n};\r\nconst NoMajorKey = {\r\n    ...NoKey,\r\n    ...NoKeyScale,\r\n    type: \"major\",\r\n    minorRelative: \"\",\r\n    scale: Empty,\r\n    secondaryDominants: Empty,\r\n    secondaryDominantsMinorRelative: Empty,\r\n    substituteDominants: Empty,\r\n    substituteDominantsMinorRelative: Empty,\r\n};\r\nconst NoMinorKey = {\r\n    ...NoKey,\r\n    type: \"minor\",\r\n    relativeMajor: \"\",\r\n    natural: NoKeyScale,\r\n    harmonic: NoKeyScale,\r\n    melodic: NoKeyScale,\r\n};\r\nconst mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, chords, harmonicFunctions, chordScales) {\r\n    return (tonic) => {\r\n        const intervals = grades.map((gr) => get(gr).interval || \"\");\r\n        const scale = intervals.map((interval) => transpose(tonic, interval));\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: mapScaleToType(scale, chords),\r\n            chordsHarmonicFunction: harmonicFunctions.slice(),\r\n            chordScales: mapScaleToType(scale, chordScales, \" \"),\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D  \".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const pc = note(tonic).pc;\r\n    if (!pc)\r\n        return NoMajorKey;\r\n    const keyScale = MajorScale(pc);\r\n    const alteration = distInFifths(\"C\", pc);\r\n    const romanInTonic = (src) => {\r\n        const r = get(src);\r\n        if (r.empty)\r\n            return \"\";\r\n        return transpose(tonic, r.interval) + r.chordType;\r\n    };\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(pc, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tnc) {\r\n    const pc = note(tnc).pc;\r\n    if (!pc)\r\n        return NoMinorKey;\r\n    const alteration = distInFifths(\"C\", pc) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic: pc,\r\n        relativeMajor: transpose(pc, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(pc),\r\n        harmonic: HarmonicScale(pc),\r\n        melodic: MelodicScale(pc),\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\r\nvar index = { majorKey, majorTonicFromKeySignature, minorKey };\n\nexport { index as default, majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.es.js.map\n", "import { rotate } from '@tonaljs/collection';\nimport { deprecate, transpose } from '@tonaljs/core';\nimport { simplify, transposeFifths } from '@tonaljs/interval';\nimport { EmptyPcset } from '@tonaljs/pcset';\nimport { get as get$1 } from '@tonaljs/scale-type';\n\nconst MODES = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\r\n];\r\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: [],\r\n};\r\nconst modes = MODES.map(toMode);\r\nconst index = {};\r\nmodes.forEach((mode) => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach((alias) => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * get('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction get(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? get(name.name)\r\n            : NoMode;\r\n}\r\nconst mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\n/**\r\n * Get a list of all modes\r\n */\r\nfunction all() {\r\n    return modes.slice();\r\n}\r\nconst entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\n/**\r\n * Get a list of all mode names\r\n */\r\nfunction names() {\r\n    return modes.map((mode) => mode.name);\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = get$1(name).intervals;\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases,\r\n    };\r\n}\r\nfunction notes(modeName, tonic) {\r\n    return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\r\n}\r\nfunction chords(chords) {\r\n    return (modeName, tonic) => {\r\n        const mode = get(modeName);\r\n        if (mode.empty)\r\n            return [];\r\n        const triads = rotate(mode.modeNum, chords);\r\n        const tonics = mode.intervals.map((i) => transpose(tonic, i));\r\n        return triads.map((triad, i) => tonics[i] + triad);\r\n    };\r\n}\r\nconst triads = chords(MODES.map((x) => x[4]));\r\nconst seventhChords = chords(MODES.map((x) => x[5]));\r\nfunction distance(destination, source) {\r\n    const from = get(source);\r\n    const to = get(destination);\r\n    if (from.empty || to.empty)\r\n        return \"\";\r\n    return simplify(transposeFifths(\"1P\", to.alt - from.alt));\r\n}\r\nfunction relativeTonic(destination, source, tonic) {\r\n    return transpose(tonic, distance(destination, source));\r\n}\r\nvar index$1 = {\r\n    get,\r\n    names,\r\n    all,\r\n    distance,\r\n    relativeTonic,\r\n    notes,\r\n    triads,\r\n    seventhChords,\r\n    // deprecated\r\n    entries,\r\n    mode,\r\n};\n\nexport { all, index$1 as default, distance, entries, get, mode, names, notes, relativeTonic, seventhChords, triads };\n//# sourceMappingURL=index.es.js.map\n", "import { all } from '@tonaljs/chord-type';\nimport { rotate, range } from '@tonaljs/collection';\nimport { deprecate, note, transpose } from '@tonaljs/core';\nimport { sortedUniqNames, fromMidi, enharmonic } from '@tonaljs/note';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { names as names$1, get as get$1, all as all$1 } from '@tonaljs/scale-type';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get all scale names\r\n * @function\r\n */\r\nconst names = names$1;\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction get(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get$1(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map((i) => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\nconst scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = get(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return all()\r\n        .filter((chord) => inScale(chord.chroma))\r\n        .map((chord) => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = get(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((scale) => isSuperset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(get(name).chroma);\r\n    return all$1()\r\n        .filter((scale) => isSubset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = get(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = get(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter((x) => x[0]);\r\n}\r\nfunction getNoteNameOf(scale) {\r\n    const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\r\n    const chromas = names.map((name) => note(name).chroma);\r\n    return (noteOrMidi) => {\r\n        const currNote = typeof noteOrMidi === \"number\"\r\n            ? note(fromMidi(noteOrMidi))\r\n            : note(noteOrMidi);\r\n        const height = currNote.height;\r\n        if (height === undefined)\r\n            return undefined;\r\n        const chroma = height % 12;\r\n        const position = chromas.indexOf(chroma);\r\n        if (position === -1)\r\n            return undefined;\r\n        return enharmonic(currNote.name, names[position]);\r\n    };\r\n}\r\nfunction rangeOf(scale) {\r\n    const getName = getNoteNameOf(scale);\r\n    return (fromNote, toNote) => {\r\n        const from = note(fromNote).height;\r\n        const to = note(toNote).height;\r\n        if (from === undefined || to === undefined)\r\n            return [];\r\n        return range(from, to)\r\n            .map(getName)\r\n            .filter((x) => x);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    names,\r\n    extended,\r\n    modeNames,\r\n    reduced,\r\n    scaleChords,\r\n    scaleNotes,\r\n    tokenize,\r\n    rangeOf,\r\n    // deprecated\r\n    scale,\r\n};\n\nexport { index as default, extended, get, modeNames, names, rangeOf, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.es.js.map\n", "/**\n * @module instruments/Piano\n */\n\n/**\n * Map:keyCount->pitchRange\n * pitchRange is {minPitch:number, maxPitch:number}\n *\n * @type {Map<number,object>}\n */\nexport const pianoPitchRange = new Map([\n  [72, { minPitch: 24, maxPitch: 95 }],\n  [88, { minPitch: 21, maxPitch: 108 }],\n  [128, { minPitch: 0, maxPitch: 127 }]\n])\n\n/**\n *\n * @param {Note[]} notes notes with only MIDI information\n * @returns {?} notes with fingering information\n */\n// export function fingeringFromMidi(notes) {\n// TODO: detect chords first?\n// TODO: then lookup chords' fingerings from a lookup table\n\n// TODO: alternatively (as fallback) use heuristics\n\n// TODO: or try to do it like humans do when playing\n\n// }\n", "import { matchGtAndRecordingNotes } from '../comparison/Matching.js'\r\nimport { randomInt, randomLcg, randomUniform, median } from 'd3'\r\nimport * as Drums from '../instruments/Drums.js'\r\nimport Note from '../types/Note.js'\r\nimport NoteArray from '../types/NoteArray.js'\r\n\r\n/**\r\n * @module Alignment\r\n */\r\n\r\n/**\r\n * Given two NoteArrays, shift the second one in time such that they are aligned\r\n *\r\n * @todo use https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm\r\n *      to find note alignment, then only use those for force calculation\r\n * @param {NoteArray} gt a NoteArray, e.g. the ground truth\r\n * @param {NoteArray} rec a NoteArray to align to a\r\n * @returns {NoteArray} an aligned copy of b\r\n */\r\nexport function alignNoteArrays (gt, rec) {\r\n  rec = rec.clone()\r\n  const f = alignmentForce(gt.getNotes(), rec.getNotes())\r\n  rec = rec.shiftTime(f)\r\n  // console.log(`Aligned recording via shifting by ${f.toFixed(3)} seconds`);\r\n  return {\r\n    aligned: rec,\r\n    timeDifference: f\r\n  }\r\n}\r\n\r\n/**\r\n * Given two NoteArrays, shift the second one in time such that they are aligned\r\n *\r\n * @param {NoteArray} gt a NoteArray, e.g. the ground truth\r\n * @param {NoteArray} rec a NoteArray to align to a\r\n * @returns {NoteArray} an aligned copy of b\r\n */\r\nexport function alignNoteArrays2 (gt, rec) {\r\n  let timeDifference = 0\r\n  let tries = 0\r\n  rec = rec.clone()\r\n  while (tries < 25) {\r\n    // Get a 1-to-1 matching between gt and rec notes so noise has less impact\r\n    const matching = matchGtAndRecordingNotes(rec.getNotes(), gt.getNotes())\r\n    // Get average time difference between matched notes\r\n    let timeDiff = 0\r\n    let count = 0\r\n    for (const m of matching.values()) {\r\n      const { gtRecMap } = m\r\n      for (const [gtStart, matchedRecNote] of gtRecMap.entries()) {\r\n        if (matchedRecNote !== null) {\r\n          count++\r\n          timeDiff += gtStart - matchedRecNote.start\r\n        }\r\n      }\r\n    }\r\n    timeDiff /= count\r\n    // Shift recording\r\n    rec.shiftTime(timeDiff)\r\n    timeDifference += timeDiff\r\n    // console.log(`${tries} shifting by ${timeDiff.toFixed(3)} seconds`);\r\n    // Stop while loop when finished\r\n    if (Math.abs(timeDiff) < 0.0005) {\r\n      break\r\n    }\r\n    tries++\r\n  }\r\n  return {\r\n    aligned: rec,\r\n    timeDifference\r\n  }\r\n}\r\n\r\n/**\r\n * Given two NoteArrays, shift the second one in time such that they are aligned\r\n *\r\n * @todo use median instead of average?\r\n * @param {NoteArray} gt a NoteArray, e.g. the ground truth\r\n * @param {NoteArray} rec a NoteArray to align to a\r\n * @returns {NoteArray} an aligned copy of b\r\n */\r\nexport function alignNoteArrays3 (gt, rec) {\r\n  let timeDifference = 0\r\n  let tries = 0\r\n  rec = rec.clone()\r\n  while (tries < 25) {\r\n    // Get a 1-to-1 matching between gt and rec notes so noise has less impact\r\n    const matching = matchGtAndRecordingNotes(rec.getNotes(), gt.getNotes())\r\n    // Get time differences\r\n    const timeDiffs = []\r\n    for (const m of matching.values()) {\r\n      for (const [gtStart, matchedRecNote] of m.gtRecMap.entries()) {\r\n        if (matchedRecNote !== null) {\r\n          timeDiffs.push(gtStart - matchedRecNote.start)\r\n        }\r\n      }\r\n    }\r\n    const shift = median(timeDiffs)\r\n    // Shift recording\r\n    rec.shiftTime(shift)\r\n    timeDifference += shift\r\n    // console.log(`${tries} shifting by ${shift.toFixed(3)} seconds`);\r\n    // Stop while loop when finished\r\n    if (Math.abs(shift) < 0.0001) {\r\n      break\r\n    }\r\n    tries++\r\n  }\r\n  return {\r\n    aligned: rec,\r\n    timeDifference\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates the mean difference between all notes in a and the nearest same-\r\n * pitched notes in b\r\n *\r\n * @param {Note[]} a array with notes\r\n * @param {Note[]} b array with notes\r\n * @returns {number} mean time difference\r\n */\r\nfunction alignmentForce (a, b) {\r\n  let difference = 0\r\n  let count = 0\r\n  // For each note in a, search the closest note in b with the same pitch and calculate the distance\r\n  for (const noteA of a) {\r\n    let distance = Number.POSITIVE_INFINITY\r\n    let diff = Number.POSITIVE_INFINITY\r\n    for (const noteB of b) {\r\n      if (noteA.pitch === noteB.pitch) {\r\n        const dist = Math.abs(noteA.start - noteB.start)\r\n        if (dist < distance) {\r\n          distance = dist\r\n          diff = noteA.start - noteB.start\r\n          // TODO: Larger distances might be errors\r\n          // if (diff > 1) {\r\n          //     diff = Math.sqrt(diff);\r\n          // }\r\n        }\r\n      }\r\n    }\r\n    // (If not found, this does not change alignment)\r\n    if (distance < Number.POSITIVE_INFINITY) {\r\n      difference += diff\r\n      count++\r\n    }\r\n  }\r\n  return difference / count\r\n}\r\n\r\n/**\r\n * Test function\r\n *\r\n * @todo move to test\r\n */\r\nexport function testAlignment () {\r\n  const test = (a, b, title) => {\r\n    console.log(title)\r\n    console.log(b.getNotes().map(n => n.start))\r\n    const aligned = alignNoteArrays(a, b)\r\n    console.log(aligned.getNotes().map(n => n.start))\r\n  }\r\n  const a = new NoteArray([\r\n    new Note(69, 0, 127, 0, 1),\r\n    new Note(70, 1, 127, 0, 2),\r\n    new Note(71, 2, 127, 0, 3)\r\n  ])\r\n  console.log(a.getNotes().map(n => n.start))\r\n\r\n  let b\r\n\r\n  b = a.clone().shiftTime(2)\r\n  test(a, b, 'shifted by 2')\r\n\r\n  b = a.clone().shiftTime(-2)\r\n  test(a, b, 'shifted by -2')\r\n\r\n  b = a.clone()\r\n    .shiftTime(3)\r\n    .addNotes([new Note(72, 2, 127, 0, 3)])\r\n  test(a, b, 'shifted by 3, added note')\r\n\r\n  b = a.clone().repeat(2)\r\n  test(a, b, 'repeated')\r\n\r\n  b = a.clone()\r\n    .repeat(2)\r\n    .shiftTime(3)\r\n  test(a, b, 'repeated, shifted by 3')\r\n}\r\n\r\n/**\r\n * @todo Benchmark different aligment functions on a randomly generated test set\r\n * This allows to check the calculated alignment against a known ground truth\r\n */\r\nexport function alignmentBenchmark () {\r\n  // Use random seed for reproducability\r\n  const seed = 0.448_715_738_882_824_23 // any number in [0, 1)\r\n  const rand127 = randomInt.source(randomLcg(seed))(0, 127)\r\n  const maxTime = 500\r\n  const randTime = randomUniform.source(randomLcg(seed))(0, maxTime)\r\n  const randDuration = randomUniform.source(randomLcg(seed))(1 / 64, 2)\r\n\r\n  // Create random notes\r\n  const randomNotes = Array.from({ length: 200 }).fill(0).map(() => {\r\n    const start = randTime()\r\n    return new Note(\r\n      rand127(),\r\n      start,\r\n      127,\r\n      0,\r\n      start + randDuration()\r\n    )\r\n  })\r\n  const notes = new NoteArray(randomNotes).sortByTime()\r\n  console.log('true notes', notes.getNotes())\r\n\r\n  // Shift notes by some amount of seconds (this is what alignment should calculate!)\r\n  const shift = 3\r\n  const shifted = notes.clone().shiftTime(shift)\r\n  console.log('shifted', shifted)\r\n\r\n  // Introduce errors, as a human would\r\n  const deviation = 0.1\r\n  const pAdd = 0.1\r\n  const pRemove = 0.1\r\n  let variation = Drums.generateDrumVariation(shifted.getNotes(), deviation, pAdd, pRemove)\r\n  variation = new NoteArray(variation)\r\n  console.log('variation', variation)\r\n\r\n  // Run all functions\r\n  const funcs = [alignNoteArrays, alignNoteArrays2, alignNoteArrays3]\r\n  console.log(`True time shift: ${shift} seconds`)\r\n\r\n  console.log('Only shifted')\r\n  for (const f of funcs) {\r\n    const { timeDifference } = f(notes, shifted)\r\n    const error = Math.abs(timeDifference - -shift)\r\n    console.log(`${f.name}\\nshift: ${timeDifference.toFixed(3)} \\nError ${error.toFixed(3)}`)\r\n  }\r\n\r\n  console.log('Shifted & variation')\r\n  for (const f of funcs) {\r\n    const { timeDifference } = f(notes, variation)\r\n    const error = Math.abs(timeDifference - -shift)\r\n    console.log(`${f.name}\\nshift: ${timeDifference.toFixed(3)} \\nError ${error.toFixed(3)}`)\r\n  }\r\n}\r\n", "import { group } from 'd3'\r\nimport * as Utils from '../utils/index.js'\r\nimport Note from '../types/Note.js' /* eslint-disable-line no-unused-vars */\r\n\r\n/**\r\n * @module comparison/Matching\r\n */\r\n\r\n/**\r\n * For one recording, separately for each pitch,\r\n * matches each recorded note to its closest ground truth note.\r\n * If there are multiple matches, the best (smallest time difference)\r\n * will be kept and others will be regarded as additional notes.\r\n * Ground truth notes without match will be regarded as missing notes.\r\n *\r\n * Result format (separated by pitch in a Map):\r\n * Map:pitch->{\r\n *    gtRecMap           matched rec. note for each GT note Map:gtNoteStart->recNote,\r\n *    additionalNotes:   rec. notes without matched GT note\r\n *    missingNotes:      GT notes without matched rec. note\r\n *    gtNotes:           all GT notes\r\n * }\r\n *\r\n * @todo add max distance?\r\n * @param {Note[]} recNotes recorded notes of a single recording\r\n * @param {Note[]} gtNotes ground truth notes\r\n * @returns {Map} result\r\n */\r\nexport function matchGtAndRecordingNotes (recNotes, gtNotes) {\r\n  const groupedByPitch = group(gtNotes, d => d.pitch)\r\n  const groupedByPitchRec = group(recNotes, d => d.pitch)\r\n  const result = new Map()\r\n  // For each pitch, map recorded notes to GT notes\r\n  for (const [pitch, gtNotes] of groupedByPitch.entries()) {\r\n    const gtRecMap = new Map()\r\n    const additionalNotes = []\r\n    const missingNotes = []\r\n    for (const n of gtNotes) {\r\n      gtRecMap.set(n.start, null)\r\n    }\r\n    // Recording might be missing this pitch, then all notes are missing\r\n    if (!groupedByPitchRec.has(pitch)) {\r\n      result.set(pitch, {\r\n        gtRecMap: new Map(),\r\n        additionalNotes: [],\r\n        missingNotes: gtNotes,\r\n        gtNotes: gtNotes\r\n      })\r\n      continue\r\n    }\r\n    const recNotes = groupedByPitchRec.get(pitch)\r\n    for (const r of recNotes) {\r\n      // Match each recorded note to the closest ground truth note\r\n      const nearest = Utils.findNearest(gtNotes, r)\r\n      const currentEntry = gtRecMap.get(nearest.start)\r\n      if (currentEntry === null) {\r\n        // If empty, take\r\n        gtRecMap.set(nearest.start, r)\r\n      } else {\r\n        // If it is taken, overtake it if the new match is closer\r\n        if (Math.abs(nearest.start - r.start) < Math.abs(currentEntry.start - r.start)) {\r\n          // If it can overtake, add the old note to 'wrong additional notes' list\r\n          gtRecMap.set(nearest.start, r)\r\n          additionalNotes.push(currentEntry)\r\n        } else {\r\n          // If it cannot overtake, add note to 'wrong additional notes' list\r\n          additionalNotes.push(r)\r\n        }\r\n      }\r\n    }\r\n    // Go trough all GT notes, those that have no recording assigned to it are missing notes\r\n    for (const n of gtNotes) {\r\n      if (gtRecMap.get(n.start) === null) {\r\n        missingNotes.push(n)\r\n      }\r\n    }\r\n    // Store result in map pitch->groupings\r\n    result.set(pitch, {\r\n      gtRecMap,\r\n      additionalNotes,\r\n      missingNotes,\r\n      gtNotes: gtNotes\r\n    })\r\n  }\r\n  // If a recording has a pitch that GT has not, all those notes are additional notes\r\n  for (const [pitch, recNotes] of groupedByPitchRec.entries()) {\r\n    if (!groupedByPitch.has(pitch)) {\r\n      result.set(pitch, {\r\n        gtRecMap: new Map(),\r\n        additionalNotes: recNotes,\r\n        missingNotes: [],\r\n        gtNotes: []\r\n      })\n    }\r\n  }\r\n  // console.log(result);\r\n  return result\r\n}\r\n\r\n/**\r\n * Matches all recorded notes from multiple recordings to the nearest\r\n * ground truth (GT) note.\r\n * Contrary to the matching created by matchGtAndRecordingNotes()\r\n * missing and additional notes are not considered, so multiple notes\r\n * from a single recording can be matched to the same GT note.\r\n *\r\n * Result format:\r\n * Map:pitch->Map:gtStart->arrayOfMatchedRecNotes\r\n *\r\n * @param {Recording[]} recordings recordings\r\n * @param {Note[]} gtNotes ground truth notes\r\n * @returns {Map} matching\r\n */\r\nexport function matchGtAndMultipleRecordings (recordings, gtNotes) {\r\n  const allRecNotes = recordings.flatMap(d => d.notes)\r\n  const groupedByPitch = group(gtNotes, d => d.pitch)\r\n  const groupedByPitchRec = group(allRecNotes, d => d.pitch)\r\n  const result = new Map()\r\n  // For each pitch, map recorded notes to GT notes and keep track of misses\r\n  for (const [pitch, gtNotes] of groupedByPitch.entries()) {\r\n    const gtRecMap = new Map()\r\n    for (const n of gtNotes) {\r\n      gtRecMap.set(n.start, [])\r\n    }\r\n    // Recording might be missing this pitch, then match is empty\r\n    if (!groupedByPitchRec.has(pitch)) {\r\n      result.set(pitch, new Map())\r\n      continue\r\n    }\r\n    const recNotes = groupedByPitchRec.get(pitch)\r\n    for (const r of recNotes) {\r\n      // Match each recorded note to the closest ground truth note\r\n      const nearest = Utils.findNearest(gtNotes, r)\r\n      const currentEntry = gtRecMap.get(nearest.start)\r\n      currentEntry.push(r)\r\n      gtRecMap.set(nearest.start, currentEntry)\r\n    }\r\n    // Store result in map pitch->groupings\r\n    result.set(pitch, gtRecMap)\r\n  }\r\n  // console.log(result);\r\n  return result\r\n}\r\n\r\n/**\r\n * Calculates (for each pitch) the average error for each GT note (averaged\r\n * over all matched notes in the recordings),\r\n * as well as the maximum of all those average errors.\r\n * GT notes that have no matched recorded notes will have an error of 0.\r\n *\r\n * @param {Map} multiMatching matching with a GT and multiple recordings\r\n * @param {number} errorThreshold number seconds of deviation above which\r\n *      to exclude an error\r\n * @returns {Map} error summary Map:pitch->{gtErrorMap, maxError},\r\n *      gtErrorMap is Map:gtStart->error (error is average over all time\r\n *      differences between the GT note and matched recNotes)\r\n */\r\nexport function getMultiMatchingErrorPerNote (multiMatching, errorThreshold = 3) {\r\n  const result = new Map()\r\n  for (const [pitch, gtRecMap] of multiMatching.entries()) {\r\n    const gtErrorMap = new Map()\r\n    let maxError = 0\r\n    // Go through all gtStart and matched notes\r\n    for (const [gtStart, matchedRecNotes] of gtRecMap.entries()) {\r\n      let error = 0\r\n      if (matchedRecNotes.length > 0) {\r\n        for (const note of matchedRecNotes) {\r\n          const error_ = Math.abs(note.start - gtStart)\r\n          if (error_ <= errorThreshold) {\r\n            error += error_\r\n          }\r\n        }\r\n        error /= matchedRecNotes.length\r\n        if (error > maxError) {\r\n          maxError = error\r\n        }\r\n      }\r\n      gtErrorMap.set(gtStart, error)\r\n    }\r\n    result.set(pitch, {\r\n      gtErrorMap,\r\n      maxError\r\n    })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Calculates the error of a matching by applying penalties and summing up\r\n *\r\n * @param {Map} matching a matching created by matchGtAndRecordingNotes\r\n * @param {number} addPenalty penalty for each additonal note\r\n * @param {number} missPenalty penalty for each missing note\r\n * @param {number} timingPenalty penalty for note timing differences in seconds\r\n * @param {number} timeThreshold timing errors below it (absolute) are ignored\r\n * @returns {object} errors by category\r\n */\r\nexport function getMatchingError (matching, addPenalty, missPenalty, timingPenalty, timeThreshold = 0) {\r\n  const result = {\r\n    total: 0,\r\n    totalAdd: 0,\r\n    totalMiss: 0,\r\n    totalCorrect: 0,\r\n    totalTime: 0,\r\n    totalNumberOfGtNotes: 0,\r\n    perPitch: new Map()\r\n  }\r\n  for (const [pitch, m] of matching.entries()) {\r\n    const { gtRecMap, additionalNotes, missingNotes, gtNotes } = m\r\n    const addError = additionalNotes.length * addPenalty\r\n    const missError = missingNotes.length * missPenalty\r\n    let correct = 0\r\n    let timeError = 0\r\n    for (const [gtStart, matchedRecNote] of gtRecMap.entries()) {\r\n      // If it is null, this is handled in missingNotes\r\n      if (matchedRecNote !== null) {\r\n        correct++\r\n        const error = Math.abs(matchedRecNote.start - gtStart)\r\n        if (error > timeThreshold) {\r\n          timeError += error\r\n        }\r\n      }\r\n    }\r\n    const total = addError + missError + timeError * timingPenalty\r\n    result.perPitch.set(pitch, {\r\n      total,\r\n      addError,\r\n      missError,\r\n      correct,\r\n      timeError,\r\n      numberOfGtNotes: gtNotes.length\r\n    })\r\n    // Update total\r\n    result.totalAdd += addError\r\n    result.totalMiss += missError\r\n    result.totalCorrect += correct\r\n    result.totalTime += timeError\r\n    result.total += total\r\n    result.totalNumberOfGtNotes += gtNotes.length\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Cuts a section from a matching by filtering on the start times\r\n * of ground truth, missing, and additonal notes\r\n *\r\n * @param {Map} matching matching\r\n * @param {number} start start time (inclusive)\r\n * @param {number} end end time (exclusive)\r\n * @returns {Map} section of matching\r\n */\r\nexport function getMatchingSection (matching, start, end) {\r\n  const result = new Map()\r\n  for (const [pitch, m] of matching.entries()) {\r\n    const { gtRecMap, additionalNotes, missingNotes, gtNotes } = m\r\n    const newGtRecMap = new Map()\r\n    for (const [gtStart, matchedRecNote] of gtRecMap.entries()) {\r\n      // If it is null, this is handled in missingNotes\r\n      if (matchedRecNote !== null && gtStart >= start && gtStart < end) {\r\n        newGtRecMap.set(gtStart, matchedRecNote)\r\n      }\r\n    }\r\n    result.set(pitch, {\r\n      gtRecMap: newGtRecMap,\r\n      additionalNotes: additionalNotes.filter(d => d.start >= start && d.start < end),\r\n      missingNotes: missingNotes.filter(d => d.start >= start && d.start < end),\r\n      gtNotes: gtNotes\r\n    })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Shortcut for getMatchingSection and getMatchingError,\r\n * see them for parameter details.\r\n *\r\n * @param {Map} matching matching\r\n * @param {number} start start time (inclusive)\r\n * @param {number} end end time (exclusive)\r\n * @param {number} addPenalty penalty for each additonal note\r\n * @param {number} missPenalty penalty for each missing note\r\n * @param {number} timingPenalty penalty for note timing differences in seconds\r\n * @returns {object} error by category\r\n */\r\nexport function getMatchingSliceError (matching, start, end, addPenalty, missPenalty, timingPenalty) {\r\n  const section = getMatchingSection(matching, start, end)\r\n  const error = getMatchingError(section, addPenalty, missPenalty, timingPenalty)\r\n  return error\r\n}\r\n", "export * from './ArrayUtils.js'\r\nexport * from './BlobUtils'\r\nexport * from './ColorUtils.js'\r\nexport * from './FormattingUtils.js'\r\nexport * from './LocalStorageUtils.js'\r\nexport * from './MathUtils.js'\r\nexport * from './MiscUtils.js'\r\nexport * from './MusicUtils.js'\r\nexport * from './NoteColorUtils.js'\r\nexport * from './RecordingsUtils.js'\r\nexport * from './StatisticsUtils.js'\r\nexport * from './WebMidiUtils.js'\r\n\r\n/**\r\n * @module utils\r\n */\r\n", "/**\n * @module utils/BlobUtils\n */\n\n/**\n * Converts a Blob to a base64 string\n *\n * @param {Blob} blob Blob\n * @returns {Promise<string,undefined>} base64 string\n */\nexport function blobToBase64 (blob) {\n  return new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.onloadend = () => resolve(reader.result)\n    reader.readAsDataURL(blob)\n  })\n}\n\n/**\n * Extracts the file extension from a Blob, so it can be saved as a file with\n * an appropriate extension.\n *\n * @param {Blob} blob Blob\n * @returns {string} file extension\n */\nexport function blobToFileExtension (blob) {\n  return blob.type.split('/')[1].split(';')[0]\n}\n", "import * as d3 from 'd3'\n\n/**\n * Determines the perceptual lightness of an HTML color\n *\n * @see https://stackoverflow.com/a/596241 (but normalizing to 0, 100)\n * @param {string} color HTML color specifier\n * @returns {number} lightness in [0, 100]\n */\nexport function getColorLightness (color) {\n  const { r, g, b } = d3.color(color).rgb()\n  // eslint-disable-next-line no-bitwise\n  const Y = (r + r + r + b + g + g + g + g) >> 3\n  return Y / 2.55\n}\n\n/**\n * Determines the average of mutliple given colors\n *\n * @param {string[]} colors HTML color specifiers\n * @returns {string} average as RGB string\n */\nexport function averageColor (colors) {\n  let mR = 0\n  let mG = 0\n  let mB = 0\n  for (const c of colors) {\n    const { r, g, b } = d3.color(c).rgb()\n    mR += r\n    mG += g\n    mB += b\n  }\n  mR = Math.round(mR / colors.length)\n  mG = Math.round(mG / colors.length)\n  mB = Math.round(mB / colors.length)\n  return `rgb(${mR}, ${mG}, ${mB})`\n}\n\n/**\n * Sets a color's opacity.\n * Does not support colors in rgba format.\n *\n * @param {string} color valid HTML color identifier\n * @param {number} [opacity=1] opacity from 0 to 1\n * @returns {string} color as RGBA string\n */\nexport function setOpacity (color, opacity = 1) {\n  const { r, g, b } = d3.color(color).rgb()\n  return `rgba(${r}, ${g}, ${b}, ${opacity})`\n}\n", "/**\n * @module utils/FormattingUtils\n */\n\n/**\n * Formats a time in seconds to <minutes>:<seconds>.<milliseconds>\n *\n * @param {number|null} seconds in seconds\n * @param {boolean} includeMillis include milli seconds in string?\n * @returns {string} 0-padded time string <minutes>:<seconds>.<milliseconds>\n */\nexport function formatTime (seconds, includeMillis = true) {\n  if (seconds === undefined || seconds === null) {\n    return includeMillis ? '--:--.---' : '--:--'\n  }\n  const s = Math.floor(seconds)\n  let min = (Math.floor(s / 60)).toString()\n  let sec = (s % 60).toString()\n  min = min.length < 2 ? `0${min}` : min\n  sec = sec.length < 2 ? `0${sec}` : sec\n  if (!includeMillis) {\n    return `${min}:${sec}`\n  }\n  let ms = (Math.round((seconds - s) * 1000)).toString()\n  if (ms.length < 2) {\n    ms = `00${ms}`\n  } else if (ms.length < 3) {\n    ms = `0${ms}`\n  }\n  return `${min}:${sec}.${ms}`\n}\n\n/**\n * Formats a Date to a string with format\n *      YYYY-mm-DDTHH:MM:SS\n * or when replaceT == true\n *      YYYY-mm-DD HH:MM:SS\n *\n * @param {Date} date date\n * @param {boolean} replaceT replace the 'T'?\n * @param {boolean} keepMillis keep milliseconds?\n * @returns {string} formatted date\n */\nexport function formatDate (date, replaceT = false, keepMillis = true) {\n  let string = date.toISOString()\n    .split(':')\n    .join('-')\n  if (!keepMillis) {\n    string = string.slice(0, string.indexOf('.'))\n  }\n  if (replaceT) {\n    string = string.replace('T', ' ')\n  }\n  return string\n}\n\n/**\n * Formats the song title (e.g. remove file extension and shorten)\n *\n * @param {string} title song title\n * @param {number} maxLength shorten to this length\n * @returns {string} formatted song title\n */\nexport function formatSongTitle (title, maxLength = 30) {\n  if (!title) {\n    return '[No Song]'\n  }\n  // Remove file extension\n  if (title.lastIndexOf('.') !== -1) {\n    title = title.slice(0, title.lastIndexOf('.'))\n  }\n  // Shorten\n  if (title.length > maxLength) {\n    title = `${title.slice(0, maxLength - 3)}...`\n  }\n  return title\n}\n", "/**\n * @module utils/LocalStorageUtils\n */\n\n/**\n * Stringifies an object and stores it in the localStorage\n *\n * @param {string} key key\n * @param {object} object JSON compatible object\n */\nexport function storeObjectInLocalStorage (key, object) {\n  const string = JSON.stringify(object)\n  localStorage.setItem(key, string)\n}\n\n/**\n * Retrieves a stringified object from the localStorage and parses it.\n *\n * @param {string} key key\n * @returns {object|null} object or null of not possible\n */\nexport function getObjectFromLocalStorage (key) {\n  const string = localStorage.getItem(key)\n  if (string === null) {\n    // console.warn(`LocalStorage has no key ${key}`);\n    return null\n  }\n  try {\n    return JSON.parse(string)\n  } catch {\n    return null\n  }\n}\n", "import * as d3 from 'd3'\r\n\r\n/**\r\n * @module utils/MiscUtils\r\n */\r\n\r\n/**\r\n * Clones a map where the values are flat objects,\r\n * i.e. values do not contain objects themselfes.\r\n *\r\n * @param {Map} map a map with object values\r\n * @returns {Map} a copy of the map with copies of the value objects\r\n */\r\nexport function deepCloneFlatObjectMap (map) {\r\n  const result = new Map()\r\n  for (const [key, value] of map.entries()) {\r\n    result.set(key, { ...value })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Groups the Notes from multiple tracks\r\n *\r\n * @param {Note[][]} tracks array of arrays of Note objects\r\n * @returns {Map} grouping\r\n */\r\nexport function groupNotesByPitch (tracks) {\r\n  const allNotes = tracks.flat()\r\n  if (allNotes.length === 0) {\r\n    return new Map()\r\n  }\r\n  return d3.group(allNotes, d => d.pitch)\r\n}\r\n\r\n/**\r\n * Reverses a given string.\r\n *\r\n * @param {string} s string\r\n * @returns {string} reversed string\r\n */\r\nexport function reverseString (s) {\r\n  return [...s].reverse().join('')\r\n}\r\n\r\n/**\r\n * Given some notes and a target note, finds\r\n * the note that has its start time closest to\r\n * the one of targetNote\r\n *\r\n * @todo replace by d3 argmin or sth?\r\n * @param {Note[]} notes notes\r\n * @param {Note} targetNote target note\r\n * @returns {Note} closest note to targetNote\r\n */\r\nexport function findNearest (notes, targetNote) {\r\n  if (!notes || notes.length === 0 || !targetNote) {\r\n    return null\r\n  }\r\n  let nearest = null\r\n  let dist = Number.POSITIVE_INFINITY\r\n  const targetStart = targetNote.start\r\n  for (const n of notes) {\r\n    const newDist = Math.abs(n.start - targetStart)\r\n    if (newDist < dist) {\r\n      dist = newDist\r\n      nearest = n\r\n    }\r\n  }\r\n  return nearest\r\n}\r\n\r\n/**\r\n * Allows to wait for a number of seconds with async/await\r\n * IMPORTANT: This it not exact, it will at *least* wait for X seconds\r\n *\r\n * @param {number} seconds number of seconds to wait\r\n * @returns {Promise} empty Promise that will resolve after the specified amount\r\n *      of seconds\r\n */\r\nexport function delay (seconds) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, seconds * 1000)\r\n  })\r\n}\r\n", "import * as d3 from 'd3'\n\n/**\n * @module utils/NoteColorUtils\n */\n\n// TODO: move to colors/ folder?\n\n/**\n * Maps each note to a color\n * Colors from https://www.svpwiki.com/music+note+or+sound+colors\n * Order is C, C#, ... B\n *\n * @type {string[]}\n */\nconst noteColormap = [\n  '#ff0000',\n  '#ff4e00',\n  '#db7b00',\n  '#ffcc00',\n  '#e4ed00',\n  '#81d700',\n  '#00ffb4',\n  '#00ffea',\n  '#00baff',\n  '#3c00ff',\n  '#a800ff',\n  '#ff00fd'\n].map(d => {\n  // Make colors less saturated\n  const c = d3.hsl(d)\n  c.s = 0.5\n  return c.toString()\n})\n/**\n * Colorblind save colors from\n * Malandrino et al. - Visualization and Music Harmony: Design, Implementation,\n * and Evaluation https://ieeexplore.ieee.org/abstract/document/8564210\n * Order is C, C#, ... B\n *\n * @type {string[]}\n */\n// export const noteColormapAccessible = new Map([\n//     ['C', '#9aebff'],\n//     ['C#', '#add5ff'],\n//     ['D', '#d6d6ff'],\n//     ['D#', '#ebd5ff'],\n//     ['E', '#ffc2eb'],\n//     ['F', '#ffcbcc'],\n//     ['F#', '#ffd5c2'],\n//     ['G', '#ffebc2'],\n//     ['G#', '#ebffc2'],\n//     ['A', '#c2d599'],\n//     ['A#', '#99ebbe'],\n//     ['B', '#adebeb'],\n// ]);\nconst noteColormapAccessible = [\n  '#6699ff',\n  '#66ffff',\n  '#000000',\n  '#647878',\n  '#993366',\n  '#ff0000',\n  '#ffcc99',\n  '#ffff01',\n  '#ff9900',\n  '#009900',\n  '#66ff99',\n  '#0000cc'\n]\n\nconst colorInterpolator = d3.interpolateRgb('black', 'steelblue')\n/**\n * Gradient color map from black to steelblue\n *\n * @type {string[]}\n */\nconst noteColormapGradientArray = Array.from({ length: 12 })\n  .map((d, index) => colorInterpolator(index / 11))\n\n/**\n * Returns the note color depending on the given pitch.\n * (Simplifies note color lookup by looking up the color for pitch%12.)\n *\n * @param {number} pitch MIDI pitch in [0, 127]\n * @param {string} colormap one of 'default', 'accessible', 'gradient'\n * @returns {string} color code\n */\nexport function noteColorFromPitch (pitch, colormap = 'default') {\n  switch (colormap) {\n    case 'accessible':\n      return noteColormapAccessible[pitch % 12]\n    case 'gradient':\n      return noteColormapGradientArray[pitch % 12]\n    default:\n      return noteColormap[pitch % 12]\n  }\n}\n", "import * as d3 from 'd3'\r\n\r\n/**\r\n * @module utils/StatisticsUtils\r\n */\r\n\r\n/**\r\n * Computes the Pearson correlation\r\n *\r\n * @see https://gist.github.com/matt-west/6500993#gistcomment-3718526\r\n * @param {number[]} x an array of numbers\r\n * @param {number[]} y an array of numbers\r\n * @returns {number} correlation\r\n * @throws {'Invalid data, must be two arrays with same length'} for invalid\r\n *  arguments\r\n * @throws {'Invalid data, length must be >= 2'} for invalid arguments\r\n */\r\nexport function pearsonCorrelation (x, y) {\r\n  if (!x || !y || !x.length || !y.length || x.length !== y.length) {\r\n    throw new Error('Invalid data, must be two arrays with same length')\r\n  }\r\n  if (x.length < 2) {\r\n    throw new Error('Invalid data, length must be >= 2')\r\n  }\r\n  let n = x.length\r\n  let nn = 0\r\n  for (let i = 0; i < n; i++, nn++) {\r\n    if ((!x[i] && x[i] !== 0) || (!y[i] && y[i] !== 0)) {\r\n      nn--\r\n      continue\r\n    }\r\n    x[nn] = x[i]\r\n    y[nn] = y[i]\r\n  }\r\n  if (n !== nn) {\r\n    x = x.splice(0, nn)\r\n    y = y.splice(0, nn)\r\n    n = nn\r\n  }\r\n  const meanX = d3.mean(x)\r\n  const meanY = d3.mean(y)\r\n  const calc = (v, mean) =>\r\n    Math.sqrt(v.reduce((s, a) => s + a * a, 0) - n * mean * mean)\r\n  return (\r\n    (x.map((e, i) => ({ x: e, y: y[i] }))\r\n      .reduce((v, a) => v + a.x * a.y, 0) -\r\n      n * meanX * meanY) /\r\n    (calc(x, meanX) * calc(y, meanY))\r\n  )\r\n}\r\n\r\n/**\r\n * Calculates a 95% confidence interval\r\n *\r\n * @see https://www.alchemer.com/resources/blog/how-to-calculate-confidence-intervals/\r\n * @param {numnber[]} values values\r\n * @returns {object} {mean, low, high}\r\n */\r\nexport function confidenceInterval (values) {\r\n  const n = values.length\r\n  const m = d3.mean(values)\r\n  const s = d3.deviation(values)\r\n  const z = 1.96 // 95% CI\r\n  // const z = 2.576; // 99% CI\r\n  const part = z * (s / Math.sqrt(n))\r\n  const low = m - part\r\n  const high = m + part\r\n  return { mean: m, low, high }\r\n}\r\n\r\n/**\r\n * Given an array of numbers, computes the proportions of a boxplot.\r\n *\r\n * @param {number[]} values values\r\n * @returns {object} { q1, q2, q3, r0, r1 }\r\n */\r\nexport function getBoxplotCharacteristics (values) {\r\n  values.sort((a, b) => a - b)\r\n  const minValue = values[0]\r\n  const maxValue = values[values.length - 1]\r\n  const q1 = d3.quantile(values, 0.25)\r\n  const q2 = d3.quantile(values, 0.5)\r\n  const q3 = d3.quantile(values, 0.75)\r\n  const iqr = q3 - q1\r\n  const r0 = Math.max(minValue, q1 - iqr * 1.5)\r\n  const r1 = Math.min(maxValue, q3 + iqr * 1.5)\r\n  return { q1, q2, q3, r0, r1 }\r\n}\r\n\r\n/**\r\n * Returns a kernel desity estimator function.\r\n *\r\n * @see https://www.d3-graph-gallery.com/graph/violin_basicDens.html\r\n * @example\r\n * // With x being a d3.scaleLinear() scale\r\n * const kde = kernelDensityEstimator(kernelEpanechnikov(0.2), x.ticks(50));\r\n * const estimate = kde(data);\r\n * @param {Function} kernel kernel function\r\n * @param {number[]} X domain\r\n * @returns {Function} kernel density estimator\r\n */\r\nexport function kernelDensityEstimator (kernel, X) {\r\n  /**\r\n       * Kernel desity estimator\r\n       * For each value of X it computes the estimated density of the data values\r\n       * in V. The result has the form [ [x1, est1], [x2, est2], ... ]\r\n       *\r\n       * @param {number[]} V values\r\n       * @returns {number[][]} estimates for points of X\r\n       */\r\n  const estimator = (V) => {\r\n    return X.map(x => [\r\n      x,\r\n      d3.mean(V, (v) => kernel(x - v))\r\n    ])\r\n  }\r\n  return estimator\r\n}\r\n\r\n/**\r\n * Epanechnikov kernel\r\n *\r\n * @param {number} k kernel size\r\n * @returns {Function} kernel function with curried k\r\n */\r\nexport function kernelEpanechnikov (k) {\r\n  /**\r\n       * Epanechnokov kernel function\r\n       *\r\n       * @param {number} v value\r\n       * @returns {number} result\r\n       */\r\n  const epKernel = (v) => Math.abs(v /= k) <= 1\r\n    ? 0.75 * (1 - v * v) / k\r\n    : 0\r\n  return epKernel\r\n}\r\n\r\n/**\r\n * Gauss kernel\r\n *\r\n * @param {number} k kernel size\r\n * @returns {Function} kernel function with curried k\r\n */\r\nexport function kernelGauss (k) {\r\n  /**\r\n       * Gaussian kernel function\r\n       *\r\n       * @param {number} v value\r\n       * @returns {number} result\r\n       */\r\n  const gaKernel = (v) => Math.abs(v / k) <= 1\r\n    ? ((1 / Math.sqrt(2 * Math.PI)) * Math.E ** ((-1 / 2) * v * v))\r\n    : 0\r\n  return gaKernel\r\n}\r\n", "import * as d3 from 'd3'\r\nimport Note from '../types/Note.js'\r\nimport { bpmToSecondsPerBeat } from './MusicUtils.js'\r\nimport { kernelDensityEstimator, kernelEpanechnikov } from './StatisticsUtils.js'\r\nimport { findLocalMaxima } from './MathUtils.js'\r\nimport Recording from '../types/Recording.js' /* eslint-disable-line no-unused-vars */\r\n\r\n/**\r\n * @module utils/RecordingsUtils\r\n */\r\n\r\n/**\r\n * Filters notes of a recording to remove noise from the MIDI device or pickup\r\n *\r\n * @todo detect gaps and fill them\r\n * @param {Recording} recording a recording\r\n * @param {number} velocityThreshold notes with velocity < velocityThreshold\r\n *      are removed\r\n * @param {number} durationThreshold notes with duration < velocityThreshold\r\n *      are removed (value in seconds)\r\n * @returns {Recording} clone of the recording with filtered notes\r\n */\r\nexport function filterRecordingNoise (recording, velocityThreshold = 0, durationThreshold = 0) {\r\n  const result = recording\r\n    .clone()\r\n    .filter(note => {\r\n      if (note.velocity < velocityThreshold) {\r\n        return false\r\n      }\r\n      if (note.getDuration() < durationThreshold) {\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n    // console.log(`Filtered recording, ${result.length()} of ${recording.length()} notes left`);\r\n  return result\r\n}\r\n\r\n/**\r\n * Removes notes from a recordings which are outside the range of the ground\r\n * truth and therefore likely noise.\r\n * Looks up the pitch range from the track of the GT that the recording was made\r\n * for.\r\n *\r\n * @param {Recording[]} recordings recordings\r\n * @param {Note[][]} groundTruth ground truth\r\n * @returns {Recording[]} filtered recordings\r\n */\r\nexport function clipRecordingsPitchesToGtRange (recordings, groundTruth) {\r\n  // Speed up by getting range only once for all tracks\r\n  const pitchRanges = new Map()\r\n  for (const [index, part] of groundTruth.entries()) {\r\n    const pitchExtent = d3.extent(part, d => d.pitch)\r\n    pitchRanges.set(index, pitchExtent)\r\n  }\r\n  return recordings.map(recording => {\r\n    const track = recording.selectedTrack\r\n    const [minPitch, maxPitch] = pitchRanges.get(track)\r\n    return recording.clone().filter(note => note.pitch >= minPitch && note.pitch <= maxPitch)\r\n  })\r\n}\r\n\r\n/**\r\n * Removes notes from a recordings which are outside the fretboard range of the\r\n * ground truth and therefore likely noise.\r\n * Looks up the fretboard position range from the track of the GT that the\r\n * recording was made for.\r\n *\r\n * @param {Recording[]} recordings recordings\r\n * @param {Note[][]} groundTruth ground truth\r\n * @param {'exact'|'area'} [mode=exact] mode for which fretboard positions to\r\n *      include: exact will only keep notes that have positions that occur in\r\n *      the GT, area will get a rectangular area of the fretboard that contains\r\n *      all GT positions and fill filter on that.\r\n * @returns {Recording[]} filtered recordings\r\n */\r\nexport function clipRecordingsPitchesToGtFretboardRange (recordings, groundTruth, mode = 'exact') {\r\n  if (mode === 'exact') {\r\n    // Speed up by getting range only once for all tracks\r\n    const occuringPositions = new Map()\r\n    for (const [index, part] of groundTruth.entries()) {\r\n      const positions = new Set(part.map(note => `${note.string} ${note.fret}`))\r\n      occuringPositions.set(index, positions)\r\n    }\r\n    return recordings.map(recording => {\r\n      const track = recording.selectedTrack\r\n      const validPositions = occuringPositions.get(track)\r\n      return recording.clone().filter(note => validPositions.has(`${note.string} ${note.fret}`))\r\n    })\r\n  } else {\r\n    // Speed up by getting range only once for all tracks\r\n    const positionRanges = new Map()\r\n    for (const [index, part] of groundTruth.entries()) {\r\n      const stringExtent = d3.extent(part, d => d.string)\r\n      const fretExtent = d3.extent(part, d => d.fret)\r\n      positionRanges.set(index, { stringExtent, fretExtent })\r\n    }\r\n    return recordings.map(recording => {\r\n      const track = recording.selectedTrack\r\n      const { stringExtent, fretExtent } = positionRanges.get(track)\r\n      const [minString, maxString] = stringExtent\r\n      const [minFret, maxFret] = fretExtent\r\n      return recording.clone().filter(note => {\r\n        return note.string >= minString && note.string <= maxString &&\r\n                    note.fret >= minFret && note.fret <= maxFret\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Aligns notes to a rhythmic pattern\r\n *\r\n * @todo not used\r\n * @param {Note[]} notes notes\r\n * @param {number} bpm e.g. 120 for tempo 120\r\n * @param {number} timeDivision e.g. 16 for 16th note steps\r\n * @returns {Note[]} aligned notes\r\n */\r\nexport function alignNotesToBpm (notes, bpm, timeDivision = 16) {\r\n  const secondsPerBeat = bpmToSecondsPerBeat(bpm)\r\n  const secondsPerDivision = secondsPerBeat / timeDivision\r\n  return notes.map(note => {\r\n    const n = note.clone()\r\n    n.start = Math.round(n.start / secondsPerDivision) * secondsPerDivision\r\n    n.end = Math.round(n.end / secondsPerDivision) * secondsPerDivision\r\n    return n\r\n  })\r\n}\r\n\r\n/**\r\n * Calculates a heatmap either pitch- or channel-wise.\r\n * Pitch-time heatmap:\r\n * Calculates a heatmap of multiple recordings, to see the note density in the\r\n * pitch-time-space.\r\n * Channel-time heatmap:\r\n * Calculates a heatmap of multiple recordings, to see the note density in the\r\n * channel-time-space. Channel could be a guitar string or left and right hand\r\n * for example.\r\n *\r\n * @param {Note[]} recNotes recordings\r\n * @param {number} nRecs number of recordings\r\n * @param {number} binSize time bin size in milliseconds\r\n * @param {string} attribute 'pitch' | 'channel'\r\n * @returns {Map} pitch->heatmap; heatmap is number[] for all time slices\r\n */\r\nexport function recordingsHeatmap (recNotes, nRecs, binSize = 10, attribute = 'pitch') {\r\n  let groupedByAttribute\r\n  if (attribute === 'pitch') {\r\n    groupedByAttribute = d3.group(recNotes, d => d.pitch)\r\n  } else if (attribute === 'channel') {\r\n    groupedByAttribute = d3.group(recNotes, d => d.channel)\r\n  } else {\r\n    console.warn(`Invalid attribute parameter '${attribute}'`)\r\n  }\r\n\r\n  const heatmapByAttribute = new Map()\r\n  for (const [attribute_, notes] of groupedByAttribute.entries()) {\r\n    // Calculate heatmap\r\n    const maxTime = d3.max(notes, d => d.end)\r\n    const nBins = Math.ceil((maxTime * 1000) / binSize) + 1\r\n    const heatmap = Array.from({ length: nBins }).fill(0)\r\n    for (const note of notes) {\r\n      const start = Math.round(note.start * 1000 / binSize)\r\n      const end = Math.round(note.end * 1000 / binSize)\r\n      for (let bin = start; bin <= end; bin++) {\r\n        heatmap[bin] += 1\r\n      }\r\n    }\r\n    // Normalize\r\n    for (let bin = 0; bin < heatmap.length; bin++) {\r\n      heatmap[bin] /= nRecs\r\n    }\r\n    heatmapByAttribute.set(attribute_, heatmap)\r\n  }\r\n  return heatmapByAttribute\r\n}\r\n\r\n/**\r\n * 'Averages' multiple recordings of the same piece to get an approximation of\r\n * the ground truth.\r\n *\r\n * @todo use velocity?\r\n * @param {Map} heatmapByPitch haetmap from recordingsHeatmap()\r\n * @param {number} binSize size of time bins in milliseconds\r\n * @param {number} threshold note is regarded as true when this ratio of\r\n *      recordings has a note there\r\n * @returns {Note[]} approximated ground truth notes\r\n */\r\nexport function averageRecordings (heatmapByPitch, binSize, threshold = 0.8) {\r\n  const newNotes = []\r\n  for (const [pitch, heatmap] of heatmapByPitch.entries()) {\r\n    // Threshold to get note timespans -> array with booleans (is note here?)\r\n    // TODO: use Canny Edge Detector? Fill Gaps?\r\n    for (let bin = 0; bin < heatmap.length; bin++) {\r\n      heatmap[bin] = heatmap[bin] > threshold\r\n    }\r\n    // Extract notes\r\n    let currentNote = null\r\n    for (let bin = 0; bin < heatmap.length; bin++) {\r\n      // Detect note start\r\n      if (!currentNote && heatmap[bin]) {\r\n        const time = bin * binSize / 1000\r\n        currentNote = new Note(pitch, time, 127, 0)\r\n      }\r\n      // Detect note end or end of array\r\n      if (currentNote && (!heatmap[bin] || bin === heatmap.length - 1)) {\r\n        const time = bin * binSize / 1000\r\n        currentNote.end = time\r\n        newNotes.push(currentNote)\r\n        currentNote = null\r\n      }\r\n    }\r\n  }\r\n  // Sort new notes\r\n  newNotes.sort((a, b) => a.start - b.start)\r\n  return newNotes\r\n}\r\n\r\n/**\r\n * Extracts a probable ground truth from multiple recordings. Uses one KDE for\r\n * each note starts and ends, detects maxima in the KDE and thresholds them.\r\n * Then uses alternating start end end candidates to create notes.\r\n *\r\n * @param {Note[]} recNotes recordings notes\r\n * @param {number} bandwidth kernel bandwidth\r\n * @param {number} ticksPerSecond number of ticks per second\r\n * @param {number} threshold threshold\r\n * @returns {Note[]} new notes\r\n */\r\nexport function averageRecordings2 (recNotes, bandwidth = 0.01, ticksPerSecond, threshold) {\r\n  const groupedByPitch = d3.group(recNotes, d => d.pitch)\r\n  const newNotes = []\r\n  for (const [pitch, notes] of groupedByPitch.entries()) {\r\n    const starts = notes.map(d => d.start)\r\n    const ends = notes.map(d => d.end)\r\n    // Create KDE\r\n    const duration = d3.max(ends)\r\n    const ticks = Math.ceil(ticksPerSecond * duration)\r\n    const x = d3.scaleLinear()\r\n      .domain([0, duration])\r\n      .range([0, duration])\r\n    const kde = kernelDensityEstimator(kernelEpanechnikov(bandwidth), x.ticks(ticks))\r\n    const estimateStarts = kde(starts)\r\n    const estimateEnds = kde(ends)\r\n    // Search for density maxima\r\n    const maximaStarts = findLocalMaxima(estimateStarts.map(d => d[1]))\r\n    const maximaEnds = findLocalMaxima(estimateEnds.map(d => d[1]))\r\n    // If density value > threshold, update note state\r\n    const chosenStarts = maximaStarts\r\n      .filter(d => estimateStarts[d][1] > threshold)\r\n      .map(d => estimateStarts[d][0])\r\n    const chosenEnds = maximaEnds\r\n      .filter(d => estimateEnds[d][1] > threshold)\r\n      .map(d => estimateEnds[d][0])\r\n    // Create notes\r\n    while (chosenStarts.length > 0) {\r\n      const nextStart = chosenStarts.shift()\r\n      // Remove ends before nextStart\r\n      while (chosenEnds.length > 0 && chosenEnds[0] < nextStart) {\r\n        chosenEnds.shift()\r\n      }\r\n      const nextEnd = chosenEnds.shift()\r\n      // Remove starts before nextEnd\r\n      while (chosenStarts.length > 0 && chosenStarts[0] < nextEnd) {\r\n        chosenStarts.shift()\r\n      }\r\n      newNotes.push(new Note(pitch, nextStart, 127, 0, nextEnd))\r\n    }\r\n  }\r\n  // Sort new notes\r\n  newNotes.sort((a, b) => a.start - b.start)\r\n  return newNotes\r\n}\r\n\r\n/**\r\n * Returns a Map: pitch->differenceMap, differenceMap is an Array with time bins\r\n * and each bin is either\r\n *      0 (none, neither GT nor rec have a note here)\r\n *      1 (missing, only GT has a note here)\r\n *      2 (additional, only rec has a note here)\r\n *      3 (both, both have a note here)\r\n *\r\n * @todo move to comparison\r\n * @param {Note[]} gtNotes ground truth notes\r\n * @param {Note[]} recNotes recrodings notes\r\n * @param {number} binSize size of a time bin in milliseconds\r\n * @returns {Map} pitch->differenceMap; differenceMap is number[] for all time slices\r\n * @example\r\n *      const diffMap = differenceMap(gtNotes, recNotes, 10);\r\n */\r\nexport function differenceMap (gtNotes, recNotes, binSize) {\r\n  const recHeatmap = recordingsHeatmap(recNotes, 1, binSize)\r\n  const gtHeatmap = recordingsHeatmap(gtNotes, 1, binSize)\r\n  const allPitches = [...new Set([\r\n    ...recHeatmap.keys(),\r\n    ...gtHeatmap.keys()\r\n  ])]\r\n  const resultMap = new Map()\r\n  for (const pitch of allPitches) {\r\n    let result\r\n    // Handle pitches that occur only in one of both\r\n    if (!recHeatmap.has(pitch)) {\r\n      // All notes are missing\r\n      result = gtHeatmap.get(pitch).map(d => d !== 0 ? 1 : 0)\r\n    } else if (!gtHeatmap.has(pitch)) {\r\n      // All notes are additional\r\n      result = recHeatmap.get(pitch).map(d => d !== 0 ? 2 : 0)\r\n    } else {\r\n      // Compare both bins for each time slice\r\n      const recH = recHeatmap.get(pitch)\r\n      const gtH = gtHeatmap.get(pitch)\r\n      const nBins = Math.max(recH.length, gtH.length)\r\n      result = Array.from({ length: nBins }).fill(0)\r\n      for (let index = 0; index < result.length; index++) {\r\n        const gtValue = gtH[index] || 0\r\n        const recValue = recH[index] || 0\r\n        if (gtValue === 0 && recValue === 0) {\r\n          // None\r\n          result[index] = 0\r\n        }\r\n        if (gtValue !== 0 && recValue === 0) {\r\n          // Missing\r\n          result[index] = 1\r\n        }\r\n        if (gtValue === 0 && recValue !== 0) {\r\n          // Additional\r\n          result[index] = 2\r\n        }\r\n        if (gtValue !== 0 && recValue !== 0) {\r\n          // Both\r\n          result[index] = 3\r\n        }\r\n      }\r\n    }\r\n    resultMap.set(pitch, result)\r\n  }\r\n  return resultMap\r\n}\r\n\r\n/**\r\n * Computes the 'area' of error from a differenceMap normalized by total area.\r\n * The area is simply the number of bins with each value, total area is max.\r\n * number of bins in all pitches * the number of pitches.\r\n *\r\n * @todo move to comparison\r\n * @todo not used or tested yet\r\n * @todo add threshold for small errors (i.e. ignore area left and right of notes' start and end (masking?)))\r\n * @param {Map} differenceMap differenceMap from differenceMap()\r\n * @returns {object} {missing, additional, correct} area ratios\r\n * @example\r\n *      const diffMap = differenceMap(gtNotes, recNotes, 10);\r\n *      const diffMapErrors = differenceMapErrorAreas(diffMap);\r\n *      const {missing, additional, correct} = diffMapErrors;\r\n */\r\nexport function differenceMapErrorAreas (differenceMap) {\r\n  // Count bins for each error type\r\n  let missingBins = 0\r\n  let additionalBins = 0\r\n  let correctBins = 0\r\n\r\n  for (const diffMap of differenceMap.values()) {\r\n    for (const bin of diffMap) {\r\n      if (bin === 1) { missingBins++ } else if (bin === 2) { additionalBins++ } else if (bin === 3) { correctBins++ }\r\n    }\r\n  }\r\n\r\n  // Normalize\r\n  const maxLength = d3.max([...differenceMap], d => d[1].length)\r\n  const totalArea = differenceMap.size * maxLength\r\n\r\n  return {\r\n    missing: missingBins / totalArea,\r\n    additional: additionalBins / totalArea,\r\n    correct: correctBins / totalArea\r\n  }\r\n}\r\n", "/**\n * @module utils/WebMidiUtils\n */\n\n/**\n * Allows to ping a MIDI device that loops back to measure latency.\n * The tool loopMIDI does exactly this:\n *\n * @see https://www.tobias-erichsen.de/software/loopmidi.html.\n * @example pingMidiDevice('loopMIDI Port', 10);\n * @param {string} deviceName name of the MIDI device\n * @param {number} howOften how many times to ping the device\n */\nexport function pingMidiDevice (deviceName, howOften = 1) {\n  if (!navigator.requestMIDIAccess) {\n    console.error('MIDI: WebMIDI is not supported in this browser.')\n  } else {\n    let sentCount = 0\n    let sentTime\n    let totalTime = 0\n    // Start listening for incoming data\n    const receiveFunction = () => {\n      const ping = Date.now() - sentTime\n      totalTime += ping\n      const avg = totalTime / sentCount\n      console.log(`Received MIDI from ${deviceName} after ${ping} ms (avg: ${avg})`)\n    }\n    navigator.requestMIDIAccess().then(midiAccess => {\n      for (const input of midiAccess.inputs.values()) {\n        if (deviceName === input.name) {\n          input.onmidimessage = receiveFunction\n        }\n      }\n      // Get output device\n      let outputDevice = null\n      for (const output of midiAccess.outputs.values()) {\n        if (deviceName === output.name) {\n          outputDevice = output\n        }\n      }\n      if (!outputDevice) {\n        console.error(`Cannot ping output device ${deviceName} because it is not there`)\n      }\n      // Send data once a second\n      const pingFunction = () => {\n        if (sentCount < howOften) {\n          sentCount++\n          console.log(`Ping ${sentCount}/${howOften} Sending MIDI ping to ${deviceName}`)\n          sentTime = new Date()\n          outputDevice.send([0x90, 0x45, 0x7F])\n          setTimeout(pingFunction, 1000)\n        }\n      }\n      setTimeout(pingFunction, 1000)\n    }, () => console.error('Cannot get MIDI access')\n    )\n  }\n}\n", "import NoteArray from '../types/NoteArray.js'\nimport Recording from '../types/Recording.js'\nimport { group, max } from 'd3'\n\n/**\n * @module DiffAlignment\n */\n\n/**\n * Aligns the recording to the best fitting position of the ground truth\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Recording} recording a Recording object\n * @param {number} binSize time bin size in milliseconds\n * @returns {Recording} aligned recording\n */\nexport function alignRecordingToBestFit (gtNotes, recording, binSize = 100) {\n  const recNotes = recording.getNotes()\n  const bestFit = alignGtAndRecToMinimizeDiffError(gtNotes, recNotes, binSize)[0]\n  const newRec = recording.clone().shiftToStartAt(bestFit.offsetMilliseconds / 1000)\n  return newRec\n}\n\n/**\n * Splits the recording at gaps > gapDuration and then aligns each section to\n * the best fitting position of the ground truth.\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Recording} recording a Recording object\n * @param {number} binSize time bin size in milliseconds\n * @param {number} gapDuration duration of seconds for a gap to be used as\n *      segmenting time\n * @param {'start-start'|'end-start'} gapMode gaps can either be considered as\n *      the maximum time between two note's starts or the end of the first\n *      and the start of the second note\n * @returns {Recording} aligned recording\n */\nexport function alignRecordingSectionsToBestFit (\n  gtNotes,\n  recording,\n  binSize,\n  gapDuration = 3,\n  gapMode = 'start-start'\n) {\n  // Cut into sections when there are gaps\n  const sections = Recording.segmentAtGaps(gapDuration, gapMode)\n\n  const alignedSections = sections.map(section => {\n    // TODO: avoid overlaps?\n    const bestFit = alignGtAndRecToMinimizeDiffError(gtNotes, section, binSize)[0]\n    return bestFit\n  })\n\n  const newRec = recording.clone()\n  newRec.setNotes(alignedSections.flat())\n  return newRec\n}\n\n/**\n * Global alignment.\n *\n * Returns an array with matches sorted by magnitude of agreement.\n * The offsetMilliseconds value describes at what time the first note of the\n * recording should start.\n *\n * Goal: Know which part of ground truth (GT) was played in recording (rec)\n * Assumptions:\n * - Rec has same tempo as GT\n * - Rec does not start before GT\n * - Rec does not repeat something that is not repeated in the GT\n * - Rec does not have gaps\n * Ideas:\n * - Brute-force\n * - Sliding window\n * - Using diff between time-pitch matrix of GT and rec\n * - Only compute agreement (correct diff part) for the current overlap\n * - For each time position save the agreement magnitude\n * - Optionally: repeat around local maxima with finer binSize\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Note[]} recNotes recorded notes\n * @param {number} binSize time bin size in milliseconds\n * @returns {object[]} best offsets with agreements\n */\nexport function alignGtAndRecToMinimizeDiffError (gtNotes, recNotes, binSize) {\n  gtNotes = new NoteArray(gtNotes)\n  recNotes = new NoteArray(recNotes).shiftToStartAt(0)\n  const gtDuration = gtNotes.getDuration()\n  const recDuration = recNotes.getDuration()\n  const nBins = Math.ceil((gtDuration * 1000) / binSize) + 1\n  const nRecBins = Math.ceil((recDuration * 1000) / binSize) + 1\n  // TODO: just switch them around?\n  if (nRecBins > nBins) {\n    console.warn('Cannot compare GT and rec if rec is longer')\n  }\n  // Get activation maps\n  const gtActivation = activationMap(gtNotes.getNotes(), binSize)\n  const recActivation = activationMap(recNotes.getNotes(), binSize)\n  // Compare with sliding window\n  const agreementsPerOffset = []\n  for (let offset = 0; offset < nBins - nRecBins + 1; offset++) {\n    const currentAgreement = agreement(gtActivation, recActivation, offset)\n    // console.log(`Comparing gt bins ${offset}...${offset + nRecBins} to rec\\nGot agreement ${currentAgreement}`);\n    agreementsPerOffset.push({\n      offsetBins: offset,\n      offsetMilliseconds: offset * binSize,\n      agreement: currentAgreement\n    })\n  }\n  // Sort by best match\n  const sorted = agreementsPerOffset.sort((a, b) => b.agreement - a.agreement)\n  return sorted\n}\n\n/**\n * Returns an activation map, that maps pitch to an array of time bins.\n * Each bin contains a 0 when there is no note or a 1 when there is one.\n *\n * @param {Note[]} allNotes notes\n * @param {number} binSize time bin size in milliseconds\n * @returns {Map} activation map\n */\nexport function activationMap (allNotes, binSize = 100) {\n  const activationMap = new Map()\n  for (const [pitch, notes] of group(allNotes, d => d.pitch).entries()) {\n    const maxTime = max(notes, d => d.end)\n    const nBins = Math.ceil((maxTime * 1000) / binSize) + 1\n    const pitchActivationMap = Array.from({ length: nBins }).fill(0)\n    // Calculate heatmap by writing 1 where a note is active\n    for (const note of notes) {\n      const start = Math.round(note.start * 1000 / binSize)\n      const end = Math.round(note.end * 1000 / binSize)\n      for (let bin = start; bin <= end; bin++) {\n        pitchActivationMap[bin] = 1\n      }\n    }\n    activationMap.set(pitch, pitchActivationMap)\n  }\n  return activationMap\n}\n\n/**\n * Given two activation maps, simply counts the number of bins [pitch, time]\n * where both have a 1, so an acitve note\n * GT must be longer than rec\n *\n * @todo also count common 0s?\n * @param {Map} gtActivations see activationMap()\n * @param {Map} recActivations see activationMap()\n * @param {number} offset offset for activation2 when comparing\n * @returns {number} agreement\n */\nexport function agreement (gtActivations, recActivations, offset) {\n  const allPitches = [...new Set([\n    ...gtActivations.keys(),\n    ...recActivations.keys()\n  ])]\n  let agreement = 0\n  for (const pitch of allPitches) {\n    // Handle pitches that occur only in one of both\n    if (!gtActivations.has(pitch)) {\n      // All notes are missing\n    } else if (!recActivations.has(pitch)) {\n      // All notes are additional\n    } else {\n      // Compare both bins for each time slice\n      const gtA = gtActivations.get(pitch)\n      const recA = recActivations.get(pitch)\n      // Go through full rec, and compare to current section of GT\n      for (let index = 0; index < recA.length; index++) {\n        const gtValue = gtA[index + offset] || 0\n        const recValue = recA[index] || 0\n        if (gtValue === 1 && recValue === 1) {\n          agreement++\n        }\n      }\n    }\n  }\n  return agreement\n}\n", "import { minIndex } from 'd3'\n\n/**\n * Idea: Like in hierarchical clustering, take the most similar pair out of the\n * set of all possible pairs repeatedly, until one array of items is empty.\n *\n * @template T1\n * @template T2\n * @param {T1[]} itemsA an array with items\n * @param {T2[]} itemsB an array with items\n * @param {function(T1, T2): number} distanceFunction distance function for two\n *      items, must be 0 for equal items and symmetric\n * @returns {Map<number,number>} with the indices of the matched items\n */\nexport function priorityMatching (itemsA, itemsB, distanceFunction) {\n  // Build distance matrix\n  const matrix = Array.from({ length: itemsA.length }).map(\n    () => Array.from({ length: itemsB.length })\n  )\n  for (const [indexA, gtNote] of itemsA.entries()) {\n    for (let indexB = indexA; indexB < itemsB.length; indexB++) {\n      const dist = distanceFunction(gtNote, itemsB[indexB])\n      matrix[indexA][indexB] = dist\n      if (matrix[indexB] !== undefined) {\n        matrix[indexB][indexA] = dist\n      }\n    }\n  }\n  // Compute matching pair by pair\n  const matching = new Map()\n  const numberOfMatches = Math.min(itemsA.length, itemsB.length)\n  for (let match = 0; match < numberOfMatches; match++) {\n    // Find most similar pair, i.e. matrix entry with smallest value\n    const [a, b] = getMatrixMinPosition(matrix)\n    matching.set(a, b)\n    // Remove from matrix (just set to null)\n    if (match >= numberOfMatches - 1) {\n      break\n    }\n    for (let index = 0; index < itemsA.length; index++) {\n      matrix[index][b] = null\n    }\n    for (let index = 0; index < itemsB.length; index++) {\n      matrix[a][index] = null\n    }\n  }\n  return matching\n}\n\n/**\n * First matches GT to rec notes via priorityMatching, then computes the error\n * for each GT note that has been matched using the same distance function.\n * The Map will be undefined for GT notes that have not been matched, they can\n * be considered missing in the recording.\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Note[]} recNotes recorded notes\n * @param {function(Note,Note): number} distanceFunction distance function,\n *      taking two notes and returning the 'distance', i.e. how different they\n *      are. See balancedNoteDistance as example.\n * @returns {Map<Note,number>} a Map from GT note to its error\n */\nexport function errorFromPriorityMatching (gtNotes, recNotes, distanceFunction) {\n  const matching = priorityMatching(gtNotes, recNotes, distanceFunction)\n  // Map GT notes to errors\n  const errors = new Map()\n  for (const [gt, rec] of matching.entries()) {\n    const gtNote = gtNotes[gt]\n    const recNote = recNotes[rec]\n    const error = distanceFunction(gtNote, recNote)\n    errors.set(gtNote, error)\n  }\n  return errors\n}\n\n/**\n * Computes a distance (inverse similarity) of two notes, considering pitch,\n * chroma, start, duration, and channel.\n *\n * @param {Note} a a Note\n * @param {Note} b a Note\n * @returns {number} distance\n */\nexport function balancedNoteDistance (a, b) {\n  let dist = 0\n  // Pitch\n  dist += Math.abs(a.pitch - b.pitch)\n  // Chroma\n  dist += Math.abs(a.pitch % 12 - b.pitch % 12)\n  // Start time\n  dist += Math.abs(a.start - b.start)\n  // Duration\n  dist += 0.5 * Math.abs(a.getDuration() - b.getDuration())\n  // Channel\n  dist += Math.abs(a.channel - b.channel)\n  return dist\n}\n\n/**\n * Returns the row and colum indices of the minimum value of the given matrix\n *\n * @param {number[][]} matrix matrix\n * @returns {number[]} [rowIndex, columIndex] of the minimum value\n */\nexport function getMatrixMinPosition (matrix) {\n  // Find most similar pair, i.e. matrix entry with smallest value\n  const minPerRow = matrix.map(row => {\n    const minInd = minIndex(row)\n    return [\n      minInd,\n      row[minInd]\n    ]\n  })\n  const minRowIndex = minIndex(minPerRow, d => d[1])\n  const minColIndex = minPerRow[minRowIndex][0]\n  return [minRowIndex, minColIndex]\n}\n", "import { max, min } from 'd3'\r\n// import DynamicTimeWarping from 'dynamic-time-warping-2';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Note from '../types/Note.js'\r\n\r\n/**\r\n * @module comparison/Similarity\r\n */\r\n\r\n/**\r\n * Given a track, a selected time interval and a threshold,\r\n * this function searches for parts in the track that are\r\n * similar to the selection.\r\n * It uses a sliding window with the size of the selection\r\n * and a stride given as argument.\r\n *\r\n * @param {Note[]} track array of Note objects\r\n * @param {number[]} selectedInterval [startTime, endTime] in seconds\r\n * @param {number} stride stride for the sliding window in number of bins\r\n * @param {number} threshold distance threshold below which parts are considered similar\r\n * @param {number} secondsPerBin time bin size in seconds\r\n * @param {string} distance one of: 'dtw', 'euclidean', 'nearest'\r\n * @returns {object} similar parts\r\n */\r\nexport function getSimilarParts (track, selectedInterval, stride, threshold, secondsPerBin = 1 / 16, distance = 'euclidean') {\r\n  console.log(`Searching for similar parts based on selection, using ${distance}`)\r\n  if (track === undefined || track.length === 0) {\r\n    console.warn('No or empty track given')\r\n    return\r\n  }\r\n  // Discretize track (instead of doing this for every part)\r\n  const minTime = min(track, d => d.start)\r\n  const maxTime = max(track, d => d.end)\r\n  const binCount = Math.ceil((maxTime - minTime) / secondsPerBin)\r\n  const discrTrack = discretizeTime(track, secondsPerBin)\r\n  // Selection\r\n  const startBin = Math.floor((selectedInterval[0] - minTime) / secondsPerBin)\r\n  const endBin = Math.ceil((selectedInterval[1] - minTime) / secondsPerBin)\r\n  const selection = sliceDiscretizedTrack(discrTrack, startBin, endBin)\r\n  const selectionSize = endBin - startBin\r\n  // Sliding window through the track\r\n  const similarParts = []\r\n  for (let pos = 0; pos < binCount - selectionSize; pos += stride) {\r\n    const pos2 = pos + selectionSize\r\n    // Ignore intersections with selection\r\n    if (!(pos >= startBin && pos <= endBin) && !(pos2 >= startBin && pos2 <= endBin)) {\r\n      const part = sliceDiscretizedTrack(discrTrack, pos, pos2)\r\n      const dist = getTrackSimilarity(selection, part, distance)\r\n      if (dist <= threshold) {\r\n        similarParts.push({\r\n          startBin: pos,\r\n          endBin: pos2,\r\n          startTime: minTime + pos * secondsPerBin,\r\n          endTime: minTime + pos2 * secondsPerBin,\r\n          dist\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    selection: {\r\n      startBin,\r\n      endBin,\r\n      startTime: minTime + startBin * secondsPerBin,\r\n      endTime: minTime + endBin * secondsPerBin\r\n    },\r\n    similarParts\r\n  }\r\n}\r\n\r\n/**\r\n * Uses calculates the distance between\r\n * two discretized tracks, for each pitch separately.\r\n * Pitch-wise distances are averaged and a penalty is added to the distance\r\n * for pitches that are not occuring in both tracks\r\n *\r\n * @see https://github.com/GordonLesti/dynamic-time-warping\r\n * @param {Map} discrA discretized track\r\n * @param {Map} discrB discretized track\r\n * @param {string} distance one of: 'euclidean', 'nearest'\r\n * @returns {number} distance\r\n */\r\nexport function getTrackSimilarity (discrA, discrB, distance) {\r\n  // Get common pitches\r\n  const common = []\r\n  for (const key of discrA.keys()) {\r\n    if (discrB.has(key)) {\r\n      common.push(key)\r\n    }\r\n  }\r\n  // Get distance for each pitch and add to weighted average\r\n  let totalDist = 0\r\n  // Get DTW distance for each common pitch\r\n  for (const pitch of common) {\r\n    const binsA = discrA.get(pitch)\r\n    const binsB = discrB.get(pitch)\r\n    let dist\r\n    if (distance === 'dtw') {\r\n      // const dtw = new DynamicTimeWarping(binsA, binsB, (a, b) => Math.abs(a - b));\r\n      // dist = dtw.getDistance();\r\n    } else if (distance === 'euclidean') {\r\n      dist = euclideanDistanceSquared(binsA, binsB)\r\n    } else if (distance === 'nearest') {\r\n      dist = neirestNeighborDistance(binsA, binsB)\r\n    }\r\n    // Get weighted average\r\n    // TODO: How to weight the average?\r\n    const weight = 1\r\n    // const weight = countActiveNoteBins(binsA) + countActiveNoteBins(binsB);\r\n    // const weight = 1 / (countActiveNoteBins(binsA) + countActiveNoteBins(binsB));\r\n    totalDist += weight * dist\r\n  }\r\n  // TODO: add penalty for uncommon pitches\r\n  // Depending on number of 1s?\r\n  let penaltyWeight = 0\r\n  for (const discr of [discrA, discrB]) {\r\n    for (const key of discr.keys()) {\r\n      if (!common.includes(key)) {\r\n        penaltyWeight += countActiveNoteBins(discr.get(key))\r\n      }\r\n    }\r\n  }\r\n  return totalDist + penaltyWeight\r\n}\r\n\r\n/**\r\n * - Normalizes Note times to be between 0 and (maxTime - minTime),\r\n * - discretizes the start and end time by using Math.round to get\r\n * the closest time bin (beat) and\r\n * - Creates one array for each pitch, where each entry contains\r\n * either a 0 (no note at that time bin) or a 1 (note at that time bin)\r\n *\r\n * @param {Note[]} track an array of Note objects\r\n * @param {number} secondsPerBin time bin size in seconds\r\n * @returns {Map} pitch to binArray\r\n */\r\nexport function discretizeTime (track, secondsPerBin) {\r\n  const minTime = min(track, d => d.start)\r\n  const maxTime = max(track, d => d.end)\r\n  const binCount = Math.ceil((maxTime - minTime) / secondsPerBin)\r\n  // Map pitch->timeBinArray\r\n  const result = new Map()\r\n  for (const note of track) {\r\n    const startBin = Math.round((note.start - minTime) / secondsPerBin)\r\n    const endBin = Math.round((note.end - minTime) / secondsPerBin)\r\n    const pitch = note.pitch\r\n    const binArray = result.has(pitch) ? result.get(pitch) : Array.from({ length: binCount }).fill(0)\r\n    for (let bin = startBin; bin <= endBin; bin++) {\r\n      binArray[bin] = 1\r\n    }\r\n    result.set(pitch, binArray)\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Counts the occurence of 1 in an array\r\n *\r\n * @param {number[]} binArray array\r\n * @returns {number} occurence of 1\r\n */\r\nfunction countActiveNoteBins (binArray) {\r\n  let count = 0\r\n  for (const bin of binArray) {\r\n    if (bin === 1) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n/**\r\n * Slices bins out of a discretices track.\r\n * This is done for each pitch separately\r\n *\r\n * @param {Map} trackMap Map pitch->binArray\r\n * @param {number} startBin index of first bin\r\n * @param {number} endBin index of last bin\r\n * @returns {Map} map with sliced arrays\r\n */\r\nfunction sliceDiscretizedTrack (trackMap, startBin, endBin) {\r\n  const slice = new Map()\r\n  for (const [key, value] of trackMap.entries()) {\r\n    slice.set(key, value.slice(startBin, endBin))\r\n  }\r\n  return slice\r\n}\r\n\r\n/**\r\n * Returns sum_{i=0}^{N-1}{(a_i-b_i)^2},\r\n * i.e. Euclidean distance but without square root\r\n *\r\n * @param {number[]} A an array\r\n * @param {number[]} B  another array\r\n * @returns {number} Euclidean distance\r\n */\r\nfunction euclideanDistanceSquared (A, B) {\r\n  const maxBins = Math.max(A.length, B.length)\r\n  let sum = 0\r\n  for (let index = 0; index < maxBins; index++) {\r\n    // If undefined (because one array is shorter)\r\n    // use 0 as padding value\r\n    const a = A[index] || 0\r\n    const b = B[index] || 0\r\n    const diff = a - b\r\n    sum += diff * diff\r\n  }\r\n  return sum\r\n}\r\n\r\n/**\r\n * Given two arrays containing 1s and 0s, this algorithm\r\n * goes through all bins and for each bin where one array\r\n * has a 1 and the other a 0, it searches for the closest 1\r\n * next to the 0.\r\n * The distance is then added to the global distance.\r\n *\r\n * @param {number[]} A an array\r\n * @param {number[]} B  another array\r\n * @returns {number} nearest neighbor distance\r\n */\r\nfunction neirestNeighborDistance (A, B) {\r\n  const maxBins = Math.max(A.length, B.length)\r\n  const maxOffset = Math.round(maxBins / 4)\r\n  let sum = 0\r\n  for (let index = 0; index < maxBins; index++) {\r\n    let offset = 0\r\n    // If undefined (because one array is shorter)\r\n    // use 0 as padding value\r\n    const a = A[index] || 0\r\n    const b = B[index] || 0\r\n    if (a === b) {\r\n      // 0 cost\r\n    } else if (a === 0 && b === 1) {\r\n      // If b == 1, look for the nearest 1 in a\r\n      // Out of bounds does not matter since undefined !== 1\r\n      // while (i - offset > 0 && i + offset < (maxBins-1) && offset <= maxOffset) {\r\n      while (offset <= maxOffset) {\r\n        offset++\r\n        if (a[index - offset] === 1 || a[index + offset === 1]) {\r\n          break\r\n        }\r\n      }\r\n    } else if (a === 1 && b === 0) {\r\n      // If a == 1, look for the nearest 1 in b\r\n      while (offset <= maxOffset) {\r\n        offset++\r\n        if (b[index - offset] === 1 || b[index + offset === 1]) {\r\n          break\r\n        }\r\n      }\r\n    }\r\n    sum += offset\r\n  }\r\n  return sum\r\n}\r\n", "import { levenshtein } from '../stringBased/Levenshtein.js'\nimport PitchSequence from '../types/PitchSequence.js'\n\n/**\n * @module comparison/SimilarSections\n */\n\n/**\n * Turns an array of notes into a string to perform pattern matching search for similar\n * patterns.\n *\n * @param {Note[]} notes notes, must be sorted by Note.start\n * @param {number} startTime start time of the section to search\n * @param {number} endTime end time for the section to search\n * @param {number} threshold threshold for normalized Levenshtein distance in [0, 1]\n * @returns {object[]} {index, distance, startTime, endTime}\n */\nexport function findSimilarNoteSections (notes, startTime, endTime, threshold = 0.5) {\n  const selectedNotes = notes.filter(d => d.start >= startTime && d.end <= endTime)\n  // Convert to string\n  const dataString = PitchSequence.fromNotes(notes).getPitches()\n  const searchString = PitchSequence.fromNotes(selectedNotes).getPitches()\n  const length = searchString.length\n  if (length < 3) {\n    return []\n  }\n  // Find matches\n  const matches = findSimilarStringSections(dataString, searchString, threshold)\n  // Get time spans\n  return matches.map(m => {\n    const { index } = m\n    const note1 = notes[index]\n    const note2 = notes[index + length]\n    return {\n      ...m,\n      startTime: note1.start,\n      endTime: note2.end\n    }\n  })\n}\n\n/**\n * Finds similar sections in a string via Levenshtein distance\n *\n * @param {stringArray} dataString they string to search in\n * @param {stringArray} searchString the string to search for\n * @param {number} threshold threshold for normalized Levenshtein distance in [0, 1]\n * @returns {object[]} {index, distance}\n */\nexport function findSimilarStringSections (dataString, searchString, threshold = 0.5) {\n  const length = searchString.length\n  const matches = []\n  for (let index = 0; index < dataString.length - length; index++) {\n    const slice = dataString.slice(index, index + length)\n    const distance = levenshtein(searchString, slice) / length\n    if (distance < threshold) {\n      matches.push({ index: index, distance })\n    }\n  }\n  // Filter overlapping matches by removing the ones with larger distances\n  const filtered = []\n  // Therefore, sort by distance ascending and add them one by one\n  matches.sort((a, b) => a.distance - b.distance)\n  // Speed up hit detection by keeping track of indices that are already occupied\n  const occupied = Array.from({ length: dataString.length }).fill(false)\n  for (const m of matches) {\n    const { index } = m\n    // Check if occupied\n    let occ = false\n    for (let i = index; i < index + length; i++) {\n      if (occupied[i]) {\n        occ = true\n        break\n      }\n    }\n    // If not occupied, add and occupy\n    if (!occ) {\n      filtered.push(m)\n      for (let i = index; i < index + length; i++) {\n        occupied[i] = true\n      }\n    }\n  }\n  return filtered\n}\n", "/**\n * @module stringBased/Levenshtein\n */\n\n/**\n * Computes the Levenshtein distance of two strings or arrays.\n *\n * @see https://gist.github.com/andrei-m/982927#gistcomment-1931258\n * @author https://github.com/kigiri, license: MIT\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @param {boolean} normalize when set to true, the distance will be normalized\n *      to [0, 1], by dividing by the longer string's length\n * @returns {number} Levenshtein distance\n */\nexport function levenshtein (a, b, normalize = false) {\n  if (a.length === 0 && b.length === 0) { return 0 }\n  if (a.length === 0) { return normalize ? 1 : b.length }\n  if (b.length === 0) { return normalize ? 1 : a.length }\n  let i, j, previous, value\n  // swap to save some memory O(min(a,b)) instead of O(a)\n  if (a.length > b.length) {\n    const temporary = a\n    a = b\n    b = temporary\n  }\n  // init the row\n  const row = Array.from({ length: a.length + 1 })\n  for (i = 0; i <= a.length; i++) {\n    row[i] = i\n  }\n  // fill in the rest\n  for (i = 1; i <= b.length; i++) {\n    previous = i\n    for (j = 1; j <= a.length; j++) {\n      value = b[i - 1] === a[j - 1]\n        ? row[j - 1]\n        : Math.min(\n          row[j - 1] + 1, // substitution\n          Math.min(\n            previous + 1, // insertion\n            row[j] + 1 // deletion\n          )\n        )\n      row[j - 1] = previous\n      previous = value\n    }\n    row[a.length] = previous\n  }\n  const result = row[a.length]\n  // Normalize?\n  return normalize ? result / Math.max(a.length, b.length) : result\n}\n\n/**\n * Computes the Damerau-Levenshtein distance of two strings or arrays.\n *\n * @see https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @param {boolean} normalize when set to true, the distance will be normalized\n *      to [0, 1], by dividing by the longer string's length\n * @returns {number} Levenshtein distance\n */\nexport function damerauLevenshtein (a, b, normalize = false) {\n  if (a.length === 0 && b.length === 0) { return 0 }\n  if (a.length === 0) { return normalize ? 1 : b.length }\n  if (b.length === 0) { return normalize ? 1 : a.length }\n  const d = Array.from({ length: a.length + 1 })\n    .map(() => Array.from({ length: b.length }))\n  for (let i = 0; i <= a.length; i++) {\n    d[i][0] = i\n  }\n  for (let i = 0; i <= b.length; i++) {\n    d[0][i] = i\n  }\n  let cost\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      cost = a[i - 1] === b[j - 1] ? 0 : 1\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      )\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        // transposition\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1)\n      }\n    }\n  }\n  const result = d[a.length][b.length]\n  // Normalize?\n  return normalize ? result / Math.max(a.length, b.length) : result\n}\n", "export * as Levenshtein from './Levenshtein.js'\r\nexport * as LongestCommonSubsequence from './LongestCommonSubsequence.js'\r\nexport * as Gotoh from './Gotoh.js'\r\nexport * as SuffixTree from './SuffixTree.js'\r\nexport * as NGrams from './NGrams.js'\r\nexport * as ImmediateRepetitionCompression from './ImmediateRepetitionCompression'\r\nexport { default as NeedlemanWunsch } from './NeedlemanWunsch.js'\r\n\r\n/**\r\n * @module stringBased\r\n * @todo rename to Sequences\r\n */\r\n", "/**\n * @module stringBased/LongestCommonSubsequence\n */\n\n/**\n * Calculates the longest common subsequence.\n *\n * @see https://rosettacode.org/wiki/Longest_common_subsequence#JavaScript\n * @example\n * const lcs = StringBased.LongestCommonSubsequence.lcs('hello world!', 'world');\n * // world\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @returns {string|Array} the longest common subsequence\n */\nexport function lcs (a, b) {\n  // Make sure shorter string is the column string\n  const m = a.length\n  const n = b.length\n  // Return now if one (or both) empty\n  if (a.length === 0) { return a }\n  if (b.length === 0) { return b }\n  let i; let j; let row = []; let left; let diagonal; let latch\n  const lcs = []\n  const c = []\n  // Build the c-table\n  for (j = 0; j < n; row[j++] = 0);\n  for (i = 0; i < m; i++) {\n    c[i] = row = [...row]\n    for (diagonal = 0, j = 0; j < n; j++, diagonal = latch) {\n      latch = row[j]\n      if (a[i] === b[j]) {\n        row[j] = diagonal + 1\n      } else {\n        left = row[j - 1] || 0\n        if (left > row[j]) {\n          row[j] = left\n        }\n      }\n    }\n  }\n  i--\n  j--\n  // row[j] now contains the length of the lcs\n  // Recover the lcs from the table\n  while (i > -1 && j > -1) {\n    switch (c[i][j]) {\n      // eslint-disable-next-line\n      default:\n        j--\n        lcs.unshift(a[i])\n      case (i && c[i - 1][j]): // eslint-disable-line no-fallthrough\n        i--\n        continue\n      case (j && c[i][j - 1]):\n        j--\n    }\n  }\n  // Only join when x and y are strings\n  return (Array.isArray(a)) || (Array.isArray(b)) ? lcs : lcs.join('')\n}\n\n/**\n * Calculates the *length* of the longest common subsequence.\n * Also works with arrays.\n *\n * @see https://rosettacode.org/wiki/Longest_common_subsequence#JavaScript\n * @example\n * const lcsLength = StringBased.LongestCommonSubsequence.lcs('hello world!', 'world');\n * // 5\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @returns {number} the length of longest common subsequence\n */\nexport function lcsLength (a, b) {\n  // Make sure shorter string is the column string\n  const m = a.length\n  const n = b.length\n  // Return now if one (or both) empty\n  if (a.length === 0) { return 0 }\n  if (b.length === 0) { return 0 }\n  let i; let j; let row = []; let left; let diagonal; let latch\n  const c = []\n  // Build the c-table\n  for (j = 0; j < n; row[j++] = 0);\n  for (i = 0; i < m; i++) {\n    c[i] = row = [...row]\n    for (diagonal = 0, j = 0; j < n; j++, diagonal = latch) {\n      latch = row[j]\n      if (a[i] === b[j]) {\n        row[j] = diagonal + 1\n      } else {\n        left = row[j - 1] || 0\n        if (left > row[j]) {\n          row[j] = left\n        }\n      }\n    }\n  }\n  i--\n  j--\n  // row[j] now contains the length of the lcs\n  return row[j]\n}\n\n/**\n * Normalizes the result of lcsLength() by dividing by the longer string's\n * length.\n *\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @returns {number} normalized length of longest common subsequence\n */\nexport function normalizedLcsLength (a, b) {\n  const longerLength = Math.max(a.length, b.length)\n  if (longerLength === 0) {\n    return 0\n  }\n  return lcsLength(a, b) / longerLength\n}\n", "/**\n * @module stringBased/Gotoh\n */\n\n/**\n * Calculates the SIMILARITY for two strings or arrays.\n * Similar to NeedlemanWunsch but O(n^2) instead of O(n^3)\n * IMPORTANT: This metric is not symmetric!\n *\n * @todo normalize to [0, 1], but how?\n * @todo somehow the the matched sequences and gaps...\n * @see https://de.wikipedia.org/wiki/Gotoh-Algorithmus\n * @param {string|Array} seqA a sequence\n * @param {string|Array} seqB a sequence\n * @param {Function} similarityFunction a function that takes two elements and\n *      returns their similarity score (higher => more similar)\n *      (a:any, b:any):number\n * @param {number} gapPenaltyStart cost for starting a new gap (negative)\n * @param {number} gapPenaltyExtend cost for continuing a gap (negative)\n * @returns {number} similarity score\n */\nexport function gotoh (\n  seqA,\n  seqB,\n  similarityFunction = matchMissmatchSimilarity,\n  gapPenaltyStart = -1,\n  gapPenaltyExtend = -0.1\n) {\n  // check if strings are empty\n  if (seqA.length === 0 && seqB.length === 0) { return 0 }\n  // gap penalty function\n  const gap = (index) => gapPenaltyStart + (index - 1) * gapPenaltyExtend\n  const lengthA = seqA.length\n  const lengthB = seqB.length\n  // initialize matrices\n  const a = Array.from({ length: lengthA + 1 }).map(() => Array.from({ length: lengthB + 1 }))\n  const b = Array.from({ length: lengthA + 1 }).map(() => Array.from({ length: lengthB + 1 }))\n  const c = Array.from({ length: lengthA + 1 }).map(() => Array.from({ length: lengthB + 1 }))\n  a[0][0] = 0\n  b[0][0] = 0\n  c[0][0] = 0\n  for (let i = 1; i <= lengthA; i++) {\n    a[i][0] = c[i][0] = Number.NEGATIVE_INFINITY\n    b[i][0] = gap(i)\n  }\n  for (let i = 1; i <= lengthB; i++) {\n    a[0][i] = b[0][i] = Number.NEGATIVE_INFINITY\n    c[0][i] = gap(i)\n  }\n  // compute matrices\n  for (let i = 1; i <= lengthA; i++) {\n    for (let j = 1; j <= lengthB; j++) {\n      const sim = similarityFunction(seqA[i - 1], seqB[j - 1])\n      a[i][j] = Math.max(\n        a[i - 1][j - 1],\n        b[i - 1][j - 1],\n        c[i - 1][j - 1]) + sim\n      b[i][j] = Math.max(\n        a[i - 1][j] + gapPenaltyStart,\n        b[i - 1][j] + gapPenaltyExtend,\n        c[i - 1][j] + gapPenaltyStart)\n      c[i][j] = Math.max(\n        a[i][j - 1] + gapPenaltyStart,\n        b[i][j - 1] + gapPenaltyStart,\n        c[i][j - 1] + gapPenaltyExtend)\n    }\n  }\n  return Math.max(\n    a[lengthA][lengthB],\n    b[lengthA][lengthB],\n    c[lengthA][lengthB]\n  )\n}\n\n/**\n * Idea: what would the max. similarity value be? the string with itself!\n * So just compare the longer string to itself and use that similarity to\n * normalize\n *\n * @todo does this work with negative costs and/or results?\n * @todo can this be optimized since only the similarityFunction is needed?\n * @todo only compute 'a' matrix for maxSimilarity\n * @param {string|Array} seqA a sequence\n * @param {string|Array} seqB a sequence\n * @param {Function} similarityFunction a function that takes two elements and\n *      returns their similarity score (higher => more similar)\n *      (a:any, b:any):number\n * @param {number} gapPenaltyStart cost for starting a new gap (negative)\n * @param {number} gapPenaltyExtend cost for continuing a gap (negative)\n * @returns {number} normalized similarity score\n */\nexport function normalizedGotoh (\n  seqA,\n  seqB,\n  similarityFunction = matchMissmatchSimilarity,\n  gapPenaltyStart = -1,\n  gapPenaltyExtend = -0.1\n) {\n  const similarity = gotoh(seqA, seqB, similarityFunction, gapPenaltyStart, gapPenaltyExtend)\n  const longer = seqA.length >= seqB.length ? seqA : seqB\n  const maxSimilarity = gotoh(longer, longer, similarityFunction, gapPenaltyStart, gapPenaltyExtend)\n  if (maxSimilarity === 0) {\n    // TODO: can this happen? what would be reasonable here?\n    return similarity\n  }\n  return similarity / maxSimilarity\n}\n\n/**\n * Cost function that simply checks whether two values are equal or not with ===\n *\n * @param {any} a some value\n * @param {any} b some value\n * @returns {number} 1 if equal, -1 otherwise\n */\nexport function matchMissmatchSimilarity (a, b) {\n  return a === b ? 1 : -1\n}\n\n/**\n * Cost function that takes the negative absolute value of the value's\n * difference, assuming that close values are more similar\n *\n * @param {number} a some value\n * @param {number} b some value\n * @returns {number} -Math.abs(a - b)\n */\nexport function differenceSimilarity (a, b) {\n  return -Math.abs(a - b)\n}\n", "import { arrayShallowEquals } from '../utils/ArrayUtils.js'\n\n/**\n * @module stringBased/SuffixTree\n */\n\n/**\n * Suffix tree, a tree that shows which subsequences are repeated\n *\n * @see https://github.com/eikes/suffixtree/blob/master/js/suffixtree.js\n */\nclass SuffixTree {\n  /**\n     * SuffixTree for strings or Arrays\n     *\n     * @param {string|Array} array string or Array to process\n     */\n  constructor (array) {\n    // Split string to array\n    if (typeof array === 'string') {\n      array = array.split('')\n    }\n    this.node = new TreeNode()\n    if (array && array.length > 0) {\n      for (let index = 0; index < array.length; index++) {\n        this.node.addSuffix(array.slice(index))\n      }\n    }\n  }\n\n  /**\n     * Returns the longest repeated substring\n     *\n     * @returns {Array} longest repeated substring\n     */\n  getLongestRepeatedSubString () {\n    return this.node.getLongestRepeatedSubString()\n  }\n\n  /**\n     * Returns a readable string format of this tree\n     *\n     * @returns {string} string\n     */\n  toString () {\n    return this.node.toString()\n  }\n\n  /**\n     * Returns a JSON representation of this tree\n     *\n     * @returns {string} JSON\n     */\n  toJson () {\n    return JSON.stringify(this.node)\n  }\n}\n\n/**\n * TreeNode\n */\nclass TreeNode {\n  /**\n     *\n     */\n  constructor () {\n    this.value = []\n    this.leaves = []\n    this.nodes = []\n  }\n\n  /**\n     * @param {string|Array} suf suffix\n     * @returns {boolean} true if first entry of suf equals the value of a child\n     */\n  checkNodes (suf) {\n    let node\n    for (let index = 0; index < this.nodes.length; index++) {\n      node = this.nodes[index]\n      if (arrayShallowEquals(node.value, [suf[0]])) {\n        node.addSuffix(suf.slice(1))\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n     * @param {string|Array} suf suffix\n     */\n  checkLeaves (suf) {\n    let node, leaf\n    for (let index = 0; index < this.leaves.length; index++) {\n      leaf = this.leaves[index]\n      if (leaf[0] === suf[0]) {\n        node = new TreeNode()\n        node.value = [leaf[0]]\n        node.addSuffix(suf.slice(1))\n        node.addSuffix(leaf.slice(1))\n        this.nodes.push(node)\n        this.leaves.splice(index, 1)\n        return\n      }\n    }\n    this.leaves.push(suf)\n  }\n\n  /**\n     * @param {string|Array} suf suffix\n     */\n  addSuffix (suf) {\n    if (suf.length === 0) {\n      return\n    }\n    if (!this.checkNodes(suf)) {\n      this.checkLeaves(suf)\n    }\n  }\n\n  /**\n     * Returns the longest repeated substring\n     *\n     * @returns {Array} longest substring\n     */\n  getLongestRepeatedSubString () {\n    let array = []\n    let temporary = []\n    for (let index = 0; index < this.nodes.length; index++) {\n      temporary = this.nodes[index].getLongestRepeatedSubString()\n      if (temporary.length > array.length) {\n        array = temporary\n      }\n    }\n    return this.value.concat(array)\n  }\n\n  /**\n     * Readable string representation of this node and its children\n     *\n     * @param {number} indent indentation\n     * @returns {string} string representation\n     */\n  toString (indent = 1) {\n    const ind = ' |'.repeat(indent)\n    let string = ''\n    string += this.value.length > 0 ? `-N '${this.value}'` : 'root'\n    if (this.nodes.length > 0) {\n      for (let index = 0; index < this.nodes.length; index++) {\n        string += `\\n${ind}${this.nodes[index].toString(indent + 1)}`\n      }\n    }\n    if (this.leaves.length > 0) {\n      for (let index = 0; index < this.leaves.length; index++) {\n        string += `\\n${ind}-L ${this.leaves[index]}`\n      }\n    }\n    return string\n  }\n}\n\nexport default SuffixTree\n", "/**\n * Calculates all n-grams with a specified length\n *\n * @param {string} string a string\n * @param {number} length length (n) of n-grams\n * @returns {Map<string,number>} maps n-gram to its number of occurences\n */\nexport function getNGrams (string, length) {\n  if (length <= 0) {\n    return new Map()\n  }\n  length = Math.min(length, string.length)\n  const nGrams = new Map()\n  for (let index = 0; index < string.length - length + 1; index++) {\n    const subString = string.slice(index, index + length)\n    if (nGrams.has(subString)) {\n      nGrams.set(subString, nGrams.get(subString) + 1)\n    } else {\n      nGrams.set(subString, 1)\n    }\n  }\n  return nGrams\n}\n\n/**\n * Calculates all n-grams with a specified length\n *\n * @param {Array} array an array of primitive data types\n * @param {number} length length (n) of n-grams\n * @returns {Map<string,object>} maps n-gram, joined with ' ', to its number of\n * occurences and value\n */\nexport function getNGramsForArray (array, length) {\n  if (length <= 0) {\n    return new Map()\n  }\n  length = Math.min(length, array.length)\n  const nGrams = new Map()\n  for (let index = 0; index < array.length - length + 1; index++) {\n    const subArray = array.slice(index, index + length)\n    const key = subArray.join(' ')\n    let count = 1\n    if (nGrams.has(key)) {\n      count = nGrams.get(key).count + 1\n    }\n    nGrams.set(key, {\n      value: subArray,\n      count\n    })\n  }\n  return nGrams\n}\n", "import { arraySlicesEqual } from '../utils/ArrayUtils'\n\n/**\n * Compresses a sequence by detecting immediately repeating subsequences\n * hierarchically. Optimal result but high performance complexity.\n *\n * @todo Link to observable demo\n * @param {Array} sequence array with immediately repeating subsequences\n * @returns {object} compressed hierarchy\n */\nexport function compress (sequence) {\n  if (!sequence || sequence.length === 0) {\n    return null\n  }\n  const longestReps = getImmediateRepetitions(sequence)\n  if (longestReps === null) {\n    return sequence\n  }\n  // Get repetition\n  const { seq, rep, length: len, pos } = longestReps[0]\n\n  // Get rest of sequence\n  const preSeq = sequence.slice(0, pos)\n  const postSeq = sequence.slice(pos + len * rep)\n\n  // Recurse with longest repetition\n  const repetition = compress(seq)\n  // Recurse with left rest\n  const pre = compress(preSeq)\n  // Recurse with right rest\n  const post = compress(postSeq)\n\n  // Get current depth\n  const depth = Math.max(\n    pre?.depth ?? 0,\n    repetition?.depth ?? 0 + 1,\n    post?.depth ?? 0\n  )\n\n  // Get current length / width, i.e. compressed sequence length\n  const length =\n    (pre?.length ?? 0) +\n    (repetition?.length ?? 0) +\n    (post?.length ?? 0)\n\n  return {\n    pre,\n    seq: repetition,\n    rep,\n    post: post,\n    // Depth, leaves are 0, root is highest\n    depth,\n    // Compressed length\n    length,\n    // Include complete sequence of this node\n    content: sequence\n  }\n}\n\n/**\n * Finds all immediate repetitions in a given sequence.\n *\n * @todo implement a mode that just looks for the best one, instead of later\n * sorting all found ones (will be faster since less sequence.slice() happens)\n * Still needs to keep all results with the same score\n * @param {Array} sequence array with immediately repeating subsequences\n * @returns {object[]} result\n */\nexport function getImmediateRepetitions (sequence = []) {\n  const foundReps = []\n  // For each length, look for a repetition that has that length\n  for (let length = Math.floor(sequence.length / 2); length > 0; --length) {\n    for (let pos = 0; pos < sequence.length - length; ++pos) {\n      let numberOfReps = 0\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        // Let's see how often the slice at pos with the current length repeats immediately...\n        const startPos = pos + (numberOfReps + 1) * length\n        const found = arraySlicesEqual(\n          sequence,\n          sequence,\n          length,\n          pos,\n          startPos\n        )\n        if (!found) {\n          // No more repetitions found\n          break\n        } else {\n          // Continue with searching for more\n          numberOfReps++\n        }\n        // Did we find any repetitions?\n        if (numberOfReps > 0) {\n          const rep = numberOfReps + 1\n          const seq = sequence.slice(pos, pos + length)\n          foundReps.push({\n            length,\n            pos,\n            rep,\n            seq,\n            totalLength: length * rep\n          })\n        }\n      }\n    }\n  }\n  if (foundReps.length > 0) {\n    // Prioritize the ones that encompass most of the sequence, i.e., maximum length*rep\n    return foundReps.sort((a, b) => {\n      // If same total length, choose the one with more repetitions\n      // Better 8*a than 4*aa\n      return a.totalLength === b.totalLength\n        ? b.rep - a.rep\n        : b.totalLength - a.totalLength\n    })\n  }\n  return null\n}\n\n/**\n * Restores the original array/sequence from the compressed hierarchy.\n *\n * @param {object} tree compressed hierarchy\n * @returns {Array} decompressed sequence\n */\nexport function decompress (tree) {\n  if (!tree) {\n    return []\n  }\n  if (tree.join) {\n    return tree\n  }\n  const seq = decompress(tree.seq)\n  const repetition = Array.from({ length: tree.rep }).map(() => seq)\n  return [\n    ...decompress(tree.pre),\n    ...repetition.flat(),\n    ...decompress(tree.post)\n  ]\n}\n\n/**\n * Returns the summary of a hierachy, leaving out information about repetitions.\n *\n * @param {object} tree compressed hierarchy\n * @returns {Array} summary\n * @example\n *  const arr = '12312345656'.split('')\n *  const h = compress(arr)\n *  summary(h).join('')\n *  // '123456'\n */\nexport function summary (tree) {\n  if (!tree) {\n    return []\n  }\n  if (tree.join) {\n    return tree\n  }\n  return [\n    ...summary(tree.pre),\n    ...summary(tree.seq),\n    ...summary(tree.post)\n  ]\n}\n\n/**\n * Formats a compressed hierarchy into a readable string, for example:\n * \"1222333222333\" => \"1 (2x (3x 2) (3x 3))\"\n *\n * @param {object} tree compressed hierarchy\n * @param {string} separator separator\n * @returns {string} result\n */\nexport function toString (tree, separator = ' ') {\n  if (!tree) {\n    return ''\n  }\n  if (tree.join) {\n    return tree.join(separator)\n  }\n  const seq = toString(tree.seq)\n  const repetition = `(${tree.rep}x ${seq})`\n  return [\n    toString(tree.pre),\n    repetition,\n    toString(tree.post)\n  ].join(separator).trim()\n}\n\n/**\n * Calculates the compression rate in [0, 1] for a result of compress().\n *\n * @param {object} compressed compressed hierachy\n * @returns {number} compression ratio\n * @throws {'Invalid hierarchy'} for invalid hierarchy\n */\nexport function compressionRate (compressed) {\n  if (!compressed?.length || !compressed?.content?.length) {\n    throw new Error('Invalid hierarchy')\n  }\n  return compressed.length / compressed.content.length\n}\n", "/**\n * @module stringBased/NeedlemanWunsch\n */\n\n/**\n * Needleman-Wunsch algorithm\n *\n * @see https://github.com/blievrouw/needleman-wunsch/blob/master/src/needleman_wunsch.js\n * @todo does not support cost matrix\n * @todo extend by matchMismathFunction\n */\nclass NeedlemanWunsch {\n  /**\n     * @param {string|Array} seq1 a string\n     * @param {string|Array} seq2 another string\n     * @param {number} matchScore score for matching characters\n     * @param {number} mismatchPenalty penalty for mismatching characters\n     * @param {number} gapPenalty penalty for a gap\n     */\n  constructor (seq1, seq2, matchScore = 1, mismatchPenalty = -1, gapPenalty = -1) {\n    // Compared sequences\n    this.seq1 = seq1\n    this.seq2 = seq2\n    // Scoring parameters\n    this.matchScore = matchScore\n    this.mismatchPenalty = mismatchPenalty\n    this.gapPenalty = gapPenalty\n    // Intermediate scores matrix (scores for [`insert`, `match`, `delete`] positions)\n    this.I = []\n    // Score matrix (best score out of intermediate scores)\n    this.S = []\n    // Traceback matrix (boolean values for [`insert`, `match`, `delete`] positions)\n    this.T = []\n    // Alignments\n    this.finalAlignments = []\n\n    // Calculate scores and tracebacks\n    this.calcScoresAndTracebacks()\n  }\n\n  /**\n     * Calculates (intermediate) scores and tracebacks using provided parameters\n     */\n  calcScoresAndTracebacks () {\n    this.S.push([0])\n    this.I.push([[null, null, null]])\n    this.T.push([[false, false, false]])\n\n    // Calculate scores and traceback on first row\n    for (let i = 1; i < this.seq2.length + 1; i++) {\n      this.S[0].push(this.S[0][this.S[0].length - 1] + this.gapPenalty)\n      this.I[0].push([null, null, null])\n      this.T[0].push([true, false, false])\n    }\n\n    // Generate other rows\n    for (let i = 1; i < this.seq1.length + 1; i++) {\n      this.S.push([this.S[i - 1][0] + this.gapPenalty])\n      this.I.push([[null, null, null]])\n      this.T.push([[false, false, true]])\n      for (let j = 1; j < this.seq2.length + 1; j++) {\n        const insert = this.S[i][j - 1] + this.gapPenalty\n        const del = this.S[i - 1][j] + this.gapPenalty\n        // similarity\n        // TODO: support function here\n        const simScore = this.seq1[i - 1] === this.seq2[j - 1] ? this.matchScore : this.mismatchPenalty\n        const match = this.S[i - 1][j - 1] + simScore\n        const intermediateScores = [insert, match, del]\n        const score = Math.max(...intermediateScores)\n        const tracebackTypeStatus = intermediateScores.map(entry => entry === score)\n        this.S[i].push(score)\n        this.I[i].push(intermediateScores)\n        this.T[i].push(tracebackTypeStatus)\n      }\n    }\n\n    // set best match score\n    const lastRow = this.S[this.S.length - 1]\n    this.score = lastRow[lastRow.length - 1]\n  }\n\n  /**\n     * Finds next alignment locations (children) from a position in scoring matrix\n     *\n     * @param {number[]} pos m- Position in scoring matrix\n     * @returns {object[]} children - Children positions and alignment types\n     */\n  alignmentChildren (pos) {\n    const [i, j] = pos\n    const children = []\n    const tracebackTypeStatus = this.T[i][j]\n    if (tracebackTypeStatus[0]) {\n      // insert\n      children.push({ pos: [i, j - 1], tracebackType: 0 })\n    }\n    if (tracebackTypeStatus[1]) {\n      // match\n      children.push({ pos: [i - 1, j - 1], tracebackType: 1 })\n    }\n    if (tracebackTypeStatus[2]) {\n      // delete\n      children.push({ pos: [i - 1, j], tracebackType: 2 })\n    }\n    return children\n  }\n\n  /**\n     * Runs through scoring matrix from bottom-right to top-left using traceback values to create all optimal alignments\n     *\n     * @returns {object[]} e.g. [{ seq1: '-4321', seq2: '54321' }]\n     */\n  alignmentTraceback () {\n    const finalAlignments = []\n    const root = {\n      next: null,\n      pos: [this.seq1.length, this.seq2.length],\n      alignment: {\n        seq1: '',\n        seq2: ''\n        // score: this.score,\n      }\n    }\n    let current, child, children, length, alignment, pos, t\n    current = root\n    while (current) {\n      pos = current.pos\n      alignment = current.alignment\n      // Get children alignments\n      children = this.alignmentChildren(current.pos)\n      // Store completed alignments\n      if (children.length === 0) {\n        finalAlignments.push(alignment)\n      }\n      current = current.next\n      for (t = 0, length = children.length; t < length; t++) {\n        child = children[t]\n        child.alignment = {\n          // -1 refers to offset between  scoring matrix and the sequence\n          seq1: alignment.seq1.concat(child.tracebackType === 0 ? '-' : this.seq1[pos[0] - 1]),\n          seq2: alignment.seq2.concat(child.tracebackType === 2 ? '-' : this.seq2[pos[1] - 1])\n          // TODO: add score for this alignment\n          // score: alignment.score - this.S[pos[0]][pos[1]]\n        }\n        // Move down a layer\n        child.next = current\n        current = child\n      }\n    }\n    return finalAlignments\n  }\n}\n\nexport default NeedlemanWunsch\n", "import { version } from '../package.json'\r\n/**\r\n * Returns the current version of the library\r\n *\r\n * @returns {string} version string\r\n */\r\nexport function getVersion () {\r\n  return version\r\n}\r\n\r\n// Types\r\nexport { default as Note } from './types/Note.js'\r\nexport { default as GuitarNote } from './types/GuitarNote.js'\r\nexport { default as HarmonicaNote } from './types/HarmonicaNote.js'\r\nexport { default as NoteArray } from './types/NoteArray.js'\r\nexport { default as Recording } from './types/Recording.js'\r\nexport { default as MusicPiece } from './types/MusicPiece.js'\r\nexport { default as PitchSequence } from './types/PitchSequence.js'\r\n// File formats\r\nexport * as Midi from './fileFormats/Midi.js'\r\n// Graphics\r\nexport * as Canvas from './graphics/Canvas.js'\r\n// Input\r\nexport { recordAudio } from './input/AudioRecorder.js'\r\nexport { recordMidi } from './input/MidiRecorder.js'\r\nexport { default as MidiInputManager } from './input/MidiInputManager.js'\r\n// Instruments\r\nexport * as Drums from './instruments/Drums.js'\r\nexport * as Guitar from './instruments/Guitar.js'\r\nexport * as Lamellophone from './instruments/Lamellophone.js'\r\nexport * as Piano from './instruments/Piano.js'\r\n// Alignment\r\nexport * as Alignment from './alignment/Alignment.js'\r\nexport * as DiffAlignment from './alignment/DiffAlignment.js'\r\n// Comparison\r\nexport * as Matching from './comparison/Matching.js'\r\nexport * as PriorityMatching from './comparison/PriorityMatching.js'\r\nexport * as Similarity from './comparison/Similarity.js'\r\nexport * as SimilarSections from './comparison/SimilarSections.js'\r\n// Libraries\r\nexport * as Chords from './chords/Chords.js'\r\nexport * as Utils from './utils/index.js'\r\nexport * as StringBased from './stringBased/index.js'\r\n"],
  "mappings": "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AiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK,WAAW,GAAG,OAAO,iBAAiB,OAAO;AAAA,EAC5D,EAAE,QAAQ,KAAK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",
  "names": []
}
