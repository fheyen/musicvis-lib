{
  "version": 3,
  "sources": ["../node_modules/.pnpm/midi-parser-js@4.0.4/node_modules/midi-parser-js/src/main.js", "../src/index.js", "../src/fileFormats/Midi.js", "../src/types/Note.js", "../src/types/GuitarNote.js", "../src/types/HarmonicaNote.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/ascending.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/bisector.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/number.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/bisect.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/variance.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/deviation.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/extent.js", "../node_modules/.pnpm/internmap@1.0.1/node_modules/internmap/src/index.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/identity.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/group.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/ticks.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/max.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/min.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/quickselect.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/quantile.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/mean.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/median.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/minIndex.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/difference.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/set.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/intersection.js", "../node_modules/.pnpm/d3-array@2.12.1/node_modules/d3-array/src/union.js", "../node_modules/.pnpm/d3-dispatch@2.0.0/node_modules/d3-dispatch/src/dispatch.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/namespaces.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/namespace.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/creator.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selector.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/select.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/array.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selectorAll.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/selectAll.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/matcher.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/selectChild.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/selectChildren.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/filter.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/sparse.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/enter.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/constant.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/data.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/exit.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/join.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/merge.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/order.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/sort.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/call.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/nodes.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/node.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/size.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/empty.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/each.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/attr.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/window.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/style.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/property.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/classed.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/text.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/html.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/raise.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/lower.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/append.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/insert.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/remove.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/clone.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/datum.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/on.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/dispatch.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/iterator.js", "../node_modules/.pnpm/d3-selection@2.0.0/node_modules/d3-selection/src/selection/index.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/define.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/color.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/math.js", "../node_modules/.pnpm/d3-color@2.0.0/node_modules/d3-color/src/cubehelix.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/basis.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/basisClosed.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/constant.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/color.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/rgb.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/numberArray.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/array.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/date.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/number.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/object.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/string.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/value.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/round.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/transform/decompose.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/transform/parse.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/transform/index.js", "../node_modules/.pnpm/d3-interpolate@2.0.1/node_modules/d3-interpolate/src/cubehelix.js", "../node_modules/.pnpm/d3-timer@2.0.0/node_modules/d3-timer/src/timer.js", "../node_modules/.pnpm/d3-timer@2.0.0/node_modules/d3-timer/src/timeout.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/schedule.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/interrupt.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/selection/interrupt.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/tween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/interpolate.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/attr.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/attrTween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/delay.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/duration.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/ease.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/easeVarying.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/filter.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/merge.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/on.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/remove.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/select.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/selectAll.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/selection.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/style.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/styleTween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/text.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/textTween.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/transition.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/end.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/transition/index.js", "../node_modules/.pnpm/d3-ease@2.0.0/node_modules/d3-ease/src/cubic.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/selection/transition.js", "../node_modules/.pnpm/d3-transition@2.0.0_d3-selection@2.0.0/node_modules/d3-transition/src/selection/index.js", "../node_modules/.pnpm/d3-brush@2.1.0/node_modules/d3-brush/src/brush.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatDecimal.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/exponent.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatGroup.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatNumerals.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatSpecifier.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatTrim.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatPrefixAuto.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatRounded.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/formatTypes.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/identity.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/locale.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/defaultLocale.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/precisionFixed.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/precisionPrefix.js", "../node_modules/.pnpm/d3-format@2.0.0/node_modules/d3-format/src/precisionRound.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/defaultSource.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/uniform.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/int.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/normal.js", "../node_modules/.pnpm/d3-random@2.2.2/node_modules/d3-random/src/lcg.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/init.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/constant.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/number.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/continuous.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/tickFormat.js", "../node_modules/.pnpm/d3-scale@3.3.0/node_modules/d3-scale/src/linear.js", "../node_modules/.pnpm/d3-scale-chromatic@2.0.0/node_modules/d3-scale-chromatic/src/colors.js", "../node_modules/.pnpm/d3-scale-chromatic@2.0.0/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js", "../node_modules/.pnpm/d3-scale-chromatic@2.0.0/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js", "../node_modules/.pnpm/d3-zoom@2.0.0/node_modules/d3-zoom/src/transform.js", "../src/utils/MathUtils.js", "../src/types/NoteArray.js", "../src/utils/ArrayUtils.js", "../src/types/Recording.js", "../src/types/MusicPiece.js", "../src/fileFormats/MusicXmlParser.js", "../src/utils/MusicUtils.js", "../src/fileFormats/MidiParser.js", "../src/types/PitchSequence.js", "../src/graphics/Canvas.js", "../src/input/AudioRecorder.js", "../src/input/MidiRecorder.js", "../src/input/MidiInputManager.js", "../src/instruments/Drums.js", "../src/instruments/Guitar.js", "../src/instruments/Lamellophone.js", "../src/chords/Chords.js", "../node_modules/.pnpm/@tonaljs+core@4.6.5/node_modules/@tonaljs/core/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+collection@4.6.2/node_modules/@tonaljs/collection/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+pcset@4.6.5/node_modules/@tonaljs/pcset/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+chord-type@4.6.5/node_modules/@tonaljs/chord-type/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+chord-detect@4.6.5/node_modules/@tonaljs/chord-detect/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+scale-type@4.6.5/node_modules/@tonaljs/scale-type/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+chord@4.6.5/node_modules/@tonaljs/chord/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+duration-value@4.6.2/node_modules/@tonaljs/duration-value/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+interval@4.6.5/node_modules/@tonaljs/interval/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+midi@4.6.5/node_modules/@tonaljs/midi/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+roman-numeral@4.6.5/node_modules/@tonaljs/roman-numeral/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+key@4.6.5/node_modules/@tonaljs/key/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+mode@4.6.5/node_modules/@tonaljs/mode/dist/index.es.js", "../node_modules/.pnpm/@tonaljs+scale@4.6.5/node_modules/@tonaljs/scale/dist/index.es.js", "../src/instruments/Piano.js", "../src/alignment/Alignment.js", "../src/comparison/Matching.js", "../src/utils/index.js", "../src/utils/BlobUtils.js", "../src/utils/ColorUtils.js", "../src/utils/FormattingUtils.js", "../src/utils/LocalStorageUtils.js", "../src/utils/MiscUtils.js", "../src/utils/NoteColorUtils.js", "../src/utils/StatisticsUtils.js", "../src/utils/RecordingsUtils.js", "../src/utils/WebMidiUtils.js", "../src/alignment/DiffAlignment.js", "../src/comparison/PriorityMatching.js", "../src/comparison/Similarity.js", "../src/comparison/SimilarSections.js", "../src/stringBased/Levenshtein.js", "../src/stringBased/index.js", "../src/stringBased/LongestCommonSubsequence.js", "../src/stringBased/Gotoh.js", "../src/stringBased/SuffixTree.js", "../src/stringBased/NGrams.js", "../src/stringBased/ImmediateRepetitionCompression.js", "../src/stringBased/NeedlemanWunsch.js"],
  "sourcesContent": ["/*\n    Project Name : midi-parser-js\n    Project Url  : https://github.com/colxi/midi-parser-js/\n    Author       : colxi\n    Author URL   : http://www.colxi.info/\n    Description  : MidiParser library reads .MID binary files, Base64 encoded MIDI Data,\n    or UInt8 Arrays, and outputs as a readable and structured JS object.\n*/\n\n(function(){\n    'use strict';\n\n    /**\n     * CROSSBROWSER & NODEjs POLYFILL for ATOB() -\n     * By: https://github.com/MaxArt2501 (modified)\n     * @param  {string} string [description]\n     * @return {[type]}        [description]\n     */\n    const _atob = function(string) {\n        // base64 character set, plus padding character (=)\n        let b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        // Regular expression to check formal correctness of base64 encoded strings\n        let b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n        // remove data type signatures at the begining of the string\n        // eg :  \"data:audio/mid;base64,\"\n        string = string.replace( /^.*?base64,/ , '');\n        // atob can work with strings with whitespaces, even inside the encoded part,\n        // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n        string = String(string).replace(/[\\t\\n\\f\\r ]+/g, '');\n        if (!b64re.test(string))\n            throw new TypeError('Failed to execute _atob() : The string to be decoded is not correctly encoded.');\n\n        // Adding the padding if missing, for semplicity\n        string += '=='.slice(2 - (string.length & 3));\n        let bitmap, result = '';\n        let r1, r2, i = 0;\n        for (; i < string.length;) {\n            bitmap = b64.indexOf(string.charAt(i++)) << 18 | b64.indexOf(string.charAt(i++)) << 12\n                    | (r1 = b64.indexOf(string.charAt(i++))) << 6 | (r2 = b64.indexOf(string.charAt(i++)));\n\n            result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255)\n                    : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255)\n                    : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);\n        }\n        return result;\n    };\n\n\n    /**\n     * [MidiParser description]\n     * @type {Object}\n     */\n    const MidiParser  = {\n        // debug (bool), when enabled will log in console unimplemented events\n        // warnings and internal handled errors.\n        debug: false,\n\n        /**\n         * [parse description]\n         * @param  {[type]} input     [description]\n         * @param  {[type]} _callback [description]\n         * @return {[type]}           [description]\n         */\n        parse: function(input, _callback){\n            if(input instanceof Uint8Array) return MidiParser.Uint8(input);\n            else if(typeof input === 'string') return MidiParser.Base64(input);\n            else if(input instanceof HTMLElement && input.type === 'file') return MidiParser.addListener(input , _callback);\n            else throw new Error('MidiParser.parse() : Invalid input provided');\n        },\n\n        /**\n         * addListener() should be called in order attach a listener to the INPUT HTML element\n         * that will provide the binary data automating the conversion, and returning\n         * the structured data to the provided callback function.\n         */\n        addListener: function(_fileElement, _callback){\n            if(!File || !FileReader) throw new Error('The File|FileReader APIs are not supported in this browser. Use instead MidiParser.Base64() or MidiParser.Uint8()');\n\n            // validate provided element\n            if( _fileElement === undefined ||\n                !(_fileElement instanceof HTMLElement) ||\n                _fileElement.tagName !== 'INPUT' ||\n                _fileElement.type.toLowerCase() !== 'file' \n            ){\n                console.warn('MidiParser.addListener() : Provided element is not a valid FILE INPUT element');\n                return false;\n            }\n            _callback = _callback || function(){};\n\n            _fileElement.addEventListener('change', function(InputEvt){             // set the 'file selected' event handler\n                if (!InputEvt.target.files.length) return false;                    // return false if no elements where selected\n                console.log('MidiParser.addListener() : File detected in INPUT ELEMENT processing data..');\n                let reader = new FileReader();                                      // prepare the file Reader\n                reader.readAsArrayBuffer(InputEvt.target.files[0]);                 // read the binary data\n                reader.onload =  function(e){\n                    _callback( MidiParser.Uint8(new Uint8Array(e.target.result)));  // encode data with Uint8Array and call the parser\n                };\n            });\n        },\n\n        /**\n         * Base64() : convert baset4 string into uint8 array buffer, before performing the\n         * parsing subroutine.\n         */\n        Base64 : function(b64String){\n            b64String = String(b64String);\n\n            let raw = _atob(b64String);\n            let rawLength = raw.length;\n            let t_array = new Uint8Array(new ArrayBuffer(rawLength));\n\n            for(let i=0; i<rawLength; i++) t_array[i] = raw.charCodeAt(i);\n            return  MidiParser.Uint8(t_array) ;\n        },\n\n        /**\n         * parse() : function reads the binary data, interpreting and spliting each chuck\n         * and parsing it to a structured Object. When job is finised returns the object\n         * or 'false' if any error was generated.\n         */\n        Uint8: function(FileAsUint8Array){\n            let file = {\n                data: null,\n                pointer: 0,\n                movePointer: function(_bytes){                                      // move the pointer negative and positive direction\n                    this.pointer += _bytes;\n                    return this.pointer;\n                },\n                readInt: function(_bytes){                                          // get integer from next _bytes group (big-endian)\n                    _bytes = Math.min(_bytes, this.data.byteLength-this.pointer);\n                    if (_bytes < 1) return -1;                                                                      // EOF\n                    let value = 0;\n                    if(_bytes > 1){\n                        for(let i=1; i<= (_bytes-1); i++){\n                            value += this.data.getUint8(this.pointer) * Math.pow(256, (_bytes - i));\n                            this.pointer++;\n                        }\n                    }\n                    value += this.data.getUint8(this.pointer);\n                    this.pointer++;\n                    return value;\n                },\n                readStr: function(_bytes){                                          // read as ASCII chars, the followoing _bytes\n                    let text = '';\n                    for(let char=1; char <= _bytes; char++) text +=  String.fromCharCode(this.readInt(1));\n                    return text;\n                },\n                readIntVLV: function(){                                             // read a variable length value\n                    let value = 0;\n                    if ( this.pointer >= this.data.byteLength ){\n                        return -1;                                                  // EOF\n                    }else if(this.data.getUint8(this.pointer) < 128){               // ...value in a single byte\n                        value = this.readInt(1);\n                    }else{                                                          // ...value in multiple bytes\n                        let FirstBytes = [];\n                        while(this.data.getUint8(this.pointer) >= 128){\n                            FirstBytes.push(this.readInt(1) - 128);\n                        }\n                        let lastByte  = this.readInt(1);\n                        for(let dt = 1; dt <= FirstBytes.length; dt++){\n                            value += FirstBytes[FirstBytes.length - dt] * Math.pow(128, dt);\n                        }\n                        value += lastByte;\n                    }\n                    return value;\n                }\n            };\n\n            file.data = new DataView(FileAsUint8Array.buffer, FileAsUint8Array.byteOffset, FileAsUint8Array.byteLength);                                            // 8 bits bytes file data array\n            //  ** read FILE HEADER\n            if(file.readInt(4) !== 0x4D546864){\n                console.warn('Header validation failed (not MIDI standard or file corrupt.)');\n                return false;                                                       // Header validation failed (not MIDI standard or file corrupt.)\n            }\n            let headerSize          = file.readInt(4);                              // header size (unused var), getted just for read pointer movement\n            let MIDI                = {};                                           // create new midi object\n            MIDI.formatType         = file.readInt(2);                              // get MIDI Format Type\n            MIDI.tracks             = file.readInt(2);                              // get ammount of track chunks\n            MIDI.track              = [];                                           // create array key for track data storing\n            let timeDivisionByte1   = file.readInt(1);                              // get Time Division first byte\n            let timeDivisionByte2   = file.readInt(1);                              // get Time Division second byte\n            if(timeDivisionByte1 >= 128){                                           // discover Time Division mode (fps or tpf)\n                MIDI.timeDivision    = [];\n                MIDI.timeDivision[0] = timeDivisionByte1 - 128;                     // frames per second MODE  (1st byte)\n                MIDI.timeDivision[1] = timeDivisionByte2;                           // ticks in each frame     (2nd byte)\n            }else MIDI.timeDivision  = (timeDivisionByte1 * 256) + timeDivisionByte2;// else... ticks per beat MODE  (2 bytes value)\n\n            //  ** read TRACK CHUNK\n            for(let t=1; t <= MIDI.tracks; t++){\n                MIDI.track[t-1]     = {event: []};                                  // create new Track entry in Array\n                let headerValidation = file.readInt(4);\n                if ( headerValidation === -1 ) break;                               // EOF\n                if(headerValidation !== 0x4D54726B) return false;                   // Track chunk header validation failed.\n                file.readInt(4);                                                    // move pointer. get chunk size (bytes length)\n                let e               = 0;                                            // init event counter\n                let endOfTrack      = false;                                        // FLAG for track reading secuence breaking\n                // ** read EVENT CHUNK\n                let statusByte;\n                let laststatusByte;\n                while(!endOfTrack){\n                    e++;                                                            // increase by 1 event counter\n                    MIDI.track[t-1].event[e-1] = {};                                // create new event object, in events array\n                    MIDI.track[t-1].event[e-1].deltaTime  = file.readIntVLV();      // get DELTA TIME OF MIDI event (Variable Length Value)\n                    statusByte = file.readInt(1);                                   // read EVENT TYPE (STATUS BYTE)\n                    if(statusByte === -1) break;                                    // EOF\n                    else if(statusByte >= 128) laststatusByte = statusByte;         // NEW STATUS BYTE DETECTED\n                    else{                                                           // 'RUNNING STATUS' situation detected\n                        statusByte = laststatusByte;                                // apply last loop, Status Byte\n                        file.movePointer(-1);                                       // move back the pointer (cause readed byte is not status byte)\n                    }\n\n\n                    //\n                    // ** IS META EVENT\n                    //\n                    if(statusByte === 0xFF){                                        // Meta Event type\n                        MIDI.track[t-1].event[e-1].type = 0xFF;                     // assign metaEvent code to array\n                        MIDI.track[t-1].event[e-1].metaType =  file.readInt(1);     // assign metaEvent subtype\n                        let metaEventLength = file.readIntVLV();                    // get the metaEvent length\n                        switch(MIDI.track[t-1].event[e-1].metaType){\n                            case 0x2F:                                              // end of track, has no data byte\n                            case -1:                                                // EOF\n                                endOfTrack = true;                                  // change FLAG to force track reading loop breaking\n                                break;\n                            case 0x01:                                              // Text Event\n                            case 0x02:                                              // Copyright Notice\n                            case 0x03:\n                            case 0x04:                                              // Instrument Name\n                            case 0x05:                                              // Lyrics)\n                            case 0x07:                                              // Cue point                                         // Sequence/Track Name (documentation: http://www.ta7.de/txt/musik/musi0006.htm)\n                            case 0x06:                                              // Marker\n                                MIDI.track[t-1].event[e-1].data = file.readStr(metaEventLength);\n                                break;\n                            case 0x21:                                              // MIDI PORT\n                            case 0x59:                                              // Key Signature\n                            case 0x51:                                              // Set Tempo\n                                MIDI.track[t-1].event[e-1].data = file.readInt(metaEventLength);\n                                break;\n                            case 0x54:                                              // SMPTE Offset\n                                MIDI.track[t-1].event[e-1].data    = [];\n                                MIDI.track[t-1].event[e-1].data[0] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[1] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[2] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[3] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[4] = file.readInt(1);\n                                break;\n                            case 0x58:                                              // Time Signature\n                                MIDI.track[t-1].event[e-1].data    = [];\n                                MIDI.track[t-1].event[e-1].data[0] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[1] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[2] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[3] = file.readInt(1);\n                                break;\n                            default :\n                                // if user provided a custom interpreter, call it\n                                // and assign to event the returned data\n                                if( this.customInterpreter !== null){\n                                    MIDI.track[t-1].event[e-1].data = this.customInterpreter( MIDI.track[t-1].event[e-1].metaType, file, metaEventLength);\n                                }\n                                // if no customInterpretr is provided, or returned\n                                // false (=apply default), perform default action\n                                if(this.customInterpreter === null || MIDI.track[t-1].event[e-1].data === false){\n                                    file.readInt(metaEventLength);\n                                    MIDI.track[t-1].event[e-1].data = file.readInt(metaEventLength);\n                                    if (this.debug) console.info('Unimplemented 0xFF meta event! data block readed as Integer');\n                                }\n                        }\n                    }\n\n                    //\n                    // IS REGULAR EVENT\n                    //\n                    else{                                                           // MIDI Control Events OR System Exclusive Events\n                        statusByte = statusByte.toString(16).split('');             // split the status byte HEX representation, to obtain 4 bits values\n                        if(!statusByte[1]) statusByte.unshift('0');                 // force 2 digits\n                        MIDI.track[t-1].event[e-1].type = parseInt(statusByte[0], 16);// first byte is EVENT TYPE ID\n                        MIDI.track[t-1].event[e-1].channel = parseInt(statusByte[1], 16);// second byte is channel\n                        switch(MIDI.track[t-1].event[e-1].type){\n                            case 0xF:{                                              // System Exclusive Events\n\n                                // if user provided a custom interpreter, call it\n                                // and assign to event the returned data\n                                if( this.customInterpreter !== null){\n                                    MIDI.track[t-1].event[e-1].data = this.customInterpreter( MIDI.track[t-1].event[e-1].type, file , false);\n                                }\n\n                                // if no customInterpretr is provided, or returned\n                                // false (=apply default), perform default action\n                                if(this.customInterpreter === null || MIDI.track[t-1].event[e-1].data === false){\n                                    let event_length = file.readIntVLV();\n                                    MIDI.track[t-1].event[e-1].data = file.readInt(event_length);\n                                    if (this.debug) console.info('Unimplemented 0xF exclusive events! data block readed as Integer');\n                                }\n                                break;\n                            }\n                            case 0xA:                                               // Note Aftertouch\n                            case 0xB:                                               // Controller\n                            case 0xE:                                               // Pitch Bend Event\n                            case 0x8:                                               // Note off\n                            case 0x9:                                               // Note On\n                                MIDI.track[t-1].event[e-1].data = [];\n                                MIDI.track[t-1].event[e-1].data[0] = file.readInt(1);\n                                MIDI.track[t-1].event[e-1].data[1] = file.readInt(1);\n                                break;\n                            case 0xC:                                               // Program Change\n                            case 0xD:                                               // Channel Aftertouch\n                                MIDI.track[t-1].event[e-1].data = file.readInt(1);\n                                break;\n                            case -1:                                                // EOF\n                                endOfTrack = true;                                  // change FLAG to force track reading loop breaking\n                                break;\n                            default:\n                                // if user provided a custom interpreter, call it\n                                // and assign to event the returned data\n                                if( this.customInterpreter !== null){\n                                    MIDI.track[t-1].event[e-1].data = this.customInterpreter( MIDI.track[t-1].event[e-1].metaType, file , false);\n                                }\n\n                                // if no customInterpretr is provided, or returned\n                                // false (=apply default), perform default action\n                                if(this.customInterpreter === null || MIDI.track[t-1].event[e-1].data === false){\n                                    console.log('Unknown EVENT detected... reading cancelled!');\n                                    return false;\n                                }\n                        }\n                    }\n                }\n            }\n            return MIDI;\n        },\n\n        /**\n         * custom function to handle unimplemented, or custom midi messages.\n         * If message is a meta-event, the value of metaEventLength will be >0.\n         * Function must return the value to store, and pointer of dataView needs\n         * to be manually increased\n         * If you want default action to be performed, return false\n         */\n        customInterpreter : null // function( e_type , arrayByffer, metaEventLength){ return e_data_int }\n    };\n\n\n    // if running in NODE export module\n    if(typeof module !== 'undefined') module.exports = MidiParser;\n    else{\n        // if running in Browser, set a global variable.\n        let _global = typeof window === 'object' && window.self === window && window ||\n                    typeof self === 'object' && self.self === self && self ||\n                    typeof global === 'object' && global.global === global && global;\n\n        _global.MidiParser = MidiParser;\n    }\n\n\n    \n})();", "import packageJson from '../package.json'\r\n\r\n/**\r\n * @module musicvis-lib\r\n */\r\n\r\n/**\r\n * Returns the current version of the library\r\n *\r\n * @returns {string} version string\r\n */\r\nexport function getVersion () {\r\n  return packageJson.version\r\n}\r\n\r\n// Types\r\nexport { default as Note } from './types/Note.js'\r\nexport { default as GuitarNote } from './types/GuitarNote.js'\r\nexport { default as HarmonicaNote } from './types/HarmonicaNote.js'\r\nexport { default as NoteArray } from './types/NoteArray.js'\r\nexport { default as Recording } from './types/Recording.js'\r\nexport { default as MusicPiece } from './types/MusicPiece.js'\r\nexport { default as PitchSequence } from './types/PitchSequence.js'\r\n// File formats\r\nexport * as Midi from './fileFormats/Midi.js'\r\n// Graphics\r\nexport * as Canvas from './graphics/Canvas.js'\r\n// Input\r\nexport { recordAudio } from './input/AudioRecorder.js'\r\nexport { recordMidi } from './input/MidiRecorder.js'\r\nexport { default as MidiInputManager } from './input/MidiInputManager.js'\r\n// Instruments\r\nexport * as Drums from './instruments/Drums.js'\r\nexport * as Guitar from './instruments/Guitar.js'\r\nexport * as Lamellophone from './instruments/Lamellophone.js'\r\nexport * as Piano from './instruments/Piano.js'\r\n// Alignment\r\nexport * as Alignment from './alignment/Alignment.js'\r\nexport * as DiffAlignment from './alignment/DiffAlignment.js'\r\n// Comparison\r\nexport * as Matching from './comparison/Matching.js'\r\nexport * as PriorityMatching from './comparison/PriorityMatching.js'\r\nexport * as Similarity from './comparison/Similarity.js'\r\nexport * as SimilarSections from './comparison/SimilarSections.js'\r\n// Libraries\r\nexport * as Chords from './chords/Chords.js'\r\nexport * as Utils from './utils/index.js'\r\nexport * as StringBased from './stringBased/index.js'\r\n", "/**\r\n * Lookup for many MIDI specifications.\r\n *\r\n * @module fileFormats/Midi\r\n * @see https://soundprogramming.net/file-formats/\r\n */\r\n\r\n/**\r\n * @typedef {object} MidiNote A MIDI note\r\n * @property {number} pitch the MIDI note number e.g. 60 for C4\r\n * @property {string} name e.g. C#\r\n * @property {number} octave number in [-1, 9]\r\n * @property {string} label name and octave, e.g. C#5\r\n * @property {number} frequency physical frequency\r\n * @example <caption>Example for a MIDI note</caption>\r\n *      { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\n\r\nconst MidiNoteByPitch = new Map()\r\nconst MidiNoteByLabel = new Map()\r\nconst MidiInstrumentByNumber = new Map()\r\nconst MidiInstrumentByNumberLev2 = new Map()\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified number.\r\n *\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {...MidiNote} MIDI note information as a {@link MidiNote}\r\n */\r\nexport function getMidiNoteByNr (nr) {\r\n  return MidiNoteByPitch.get(nr)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified label.\r\n *\r\n * @param {string} label note label, e.g. 'D#0'\r\n *      (upper-case and sharp notation necessary)\r\n * @returns {...MidiNote} MIDI note information as a {@link MidiNote}\r\n */\r\nexport function getMidiNoteByLabel (label) {\r\n  return MidiNoteByLabel.get(label)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI note with the specified name and octave.\r\n *\r\n * @param {string} name note name, e.g. 'D#'\r\n *      (upper-case and sharp notation necessary)\r\n * @param {number} octave octave in [-1, 9]\r\n * @returns {...MidiNote} MIDI note information as a {@link MidiNote}\r\n */\r\nexport function getMidiNoteByNameAndOctave (name, octave) {\r\n  return MidiNoteByLabel.get(`${name}${octave}`)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument with the specified number.\r\n *\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @returns {object} note info, e.g.\r\n *      { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' }\r\n */\r\nexport function getMidiInstrumentByNr (nr) {\r\n  return MidiInstrumentByNumber.get(nr)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument (MIDI level 2) with the\r\n * specified number.\r\n *\r\n * @param {number} nr MIDI instrument number in [0, 127]\r\n * @param {number} subNr MIDI instrument sub number in [0, 127]\r\n * @returns {object} note info, e.g.\r\n *      { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' }\r\n */\r\nexport function getMidiInstrumentByNrL2 (nr, subNr) {\r\n  const key = `${nr}-${subNr}`\r\n  return MidiInstrumentByNumberLev2.get(key)\r\n}\r\n\r\n/**\r\n * Returns information on the MIDI instrument with the specified number.\r\n *\r\n * @param {number} nr MIDI drum note number in [27, 87]\r\n * @returns {string} note name, e.g. 'Bass Drum 1\r\n */\r\nexport function getMidiDrumNoteByNr (nr) {\r\n  return GENERAL_MIDI_DRUM_NOTE_NUMBERS.get(nr)\r\n}\r\n\r\n/**\r\n * Returns true if a given MIDI pitch refers to a sharp note.\r\n *\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {boolean} true if sharp, false otherwise\r\n */\r\nexport function isSharp (nr) {\r\n  // return SHARPS.has(nr);\r\n  const chroma = nr % 12\r\n  return chroma === 1 ||\r\n    chroma === 3 ||\r\n    chroma === 6 ||\r\n    chroma === 8 ||\r\n    chroma === 10\r\n}\r\n\r\n/**\r\n * Returns a note name such as 'C#' (without octave) for a given MIDI\r\n * note number.\r\n *\r\n * @param {number} nr MIDI note number in [0, 127]\r\n * @returns {string} note name such as 'C#'\r\n */\r\nexport function getNoteNameFromNoteNr (nr) {\r\n  return NOTE_NAMES[nr % 12]\r\n}\r\n\r\n/**\r\n * Maps flats to sharps, e.g. flatToSharp.get('Db') === 'C#'\r\n *\r\n * @type {Map<string,string>}\r\n */\r\nexport const flatToSharp = new Map([\r\n  ['Cb', 'B'],\r\n  ['Db', 'C#'],\r\n  ['Eb', 'D#'],\r\n  ['Fb', 'E'],\r\n  ['Gb', 'F#'],\r\n  ['Ab', 'G#'],\r\n  ['Bb', 'A#']\r\n])\r\n\r\n/**\r\n * Maps shaprs to flats, e.g. sharpToFlat.get('C#') === 'Db'\r\n *\r\n * @type {Map<string,string>}\r\n */\r\nexport const sharpToFlat = new Map([\r\n  ['C#', 'Db'],\r\n  ['D#', 'Eb'],\r\n  ['E#', 'F'],\r\n  ['F#', 'Gb'],\r\n  ['G#', 'Ab'],\r\n  ['A#', 'Bb'],\r\n  ['B#', 'C']\r\n])\r\n\r\n/**\r\n * Names of notes, indexed like MIDI numbers, i.e. C is 0\r\n *\r\n * @type {string[]}\r\n */\r\nexport const NOTE_NAMES = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B'\r\n]\r\n\r\n/**\r\n * Names of notes, indexed like MIDI numbers, i.e. C is 0, with flats instead of\r\n * sharps.\r\n *\r\n * @type {string[]}\r\n */\r\nexport const NOTE_NAMES_FLAT = [\r\n  'C',\r\n  'Db',\r\n  'D',\r\n  'Eb',\r\n  'E',\r\n  'F',\r\n  'Gb',\r\n  'G',\r\n  'Ab',\r\n  'A',\r\n  'Bb',\r\n  'B'\r\n]\r\n\r\n/**\r\n * Index equals MIDI note number\r\n *\r\n * @type {Array<MidiNote>}\r\n */\r\nexport const MIDI_NOTES = [\r\n  { pitch: 0, name: 'C', octave: -1, label: 'C-1', frequency: 8.176 },\r\n  { pitch: 1, name: 'C#', octave: -1, label: 'C#-1', frequency: 8.662 },\r\n  { pitch: 2, name: 'D', octave: -1, label: 'D-1', frequency: 9.177 },\r\n  { pitch: 3, name: 'D#', octave: -1, label: 'D#-1', frequency: 9.723 },\r\n  { pitch: 4, name: 'E', octave: -1, label: 'E-1', frequency: 10.301 },\r\n  { pitch: 5, name: 'F', octave: -1, label: 'F-1', frequency: 10.913 },\r\n  { pitch: 6, name: 'F#', octave: -1, label: 'F#-1', frequency: 11.562 },\r\n  { pitch: 7, name: 'G', octave: -1, label: 'G-1', frequency: 12.25 },\r\n  { pitch: 8, name: 'G#', octave: -1, label: 'G#-1', frequency: 12.978 },\r\n  { pitch: 9, name: 'A', octave: -1, label: 'A-1', frequency: 13.75 },\r\n  { pitch: 10, name: 'A#', octave: -1, label: 'A#-1', frequency: 14.568 },\r\n  { pitch: 11, name: 'B', octave: -1, label: 'B-1', frequency: 15.434 },\r\n  { pitch: 12, name: 'C', octave: 0, label: 'C0', frequency: 16.352 },\r\n  { pitch: 13, name: 'C#', octave: 0, label: 'C#0', frequency: 17.324 },\r\n  { pitch: 14, name: 'D', octave: 0, label: 'D0', frequency: 18.354 },\r\n  { pitch: 15, name: 'D#', octave: 0, label: 'D#0', frequency: 19.445 },\r\n  { pitch: 16, name: 'E', octave: 0, label: 'E0', frequency: 20.602 },\r\n  { pitch: 17, name: 'F', octave: 0, label: 'F0', frequency: 21.827 },\r\n  { pitch: 18, name: 'F#', octave: 0, label: 'F#0', frequency: 23.125 },\r\n  { pitch: 19, name: 'G', octave: 0, label: 'G0', frequency: 24.5 },\r\n  { pitch: 20, name: 'G#', octave: 0, label: 'G#0', frequency: 25.957 },\r\n  { pitch: 21, name: 'A', octave: 0, label: 'A0', frequency: 27.5 },\r\n  { pitch: 22, name: 'A#', octave: 0, label: 'A#0', frequency: 29.135 },\r\n  { pitch: 23, name: 'B', octave: 0, label: 'B0', frequency: 30.868 },\r\n  { pitch: 24, name: 'C', octave: 1, label: 'C1', frequency: 32.703 },\r\n  { pitch: 25, name: 'C#', octave: 1, label: 'C#1', frequency: 34.648 },\r\n  { pitch: 26, name: 'D', octave: 1, label: 'D1', frequency: 36.708 },\r\n  { pitch: 27, name: 'D#', octave: 1, label: 'D#1', frequency: 38.891 },\r\n  { pitch: 28, name: 'E', octave: 1, label: 'E1', frequency: 41.203 },\r\n  { pitch: 29, name: 'F', octave: 1, label: 'F1', frequency: 43.654 },\r\n  { pitch: 30, name: 'F#', octave: 1, label: 'F#1', frequency: 46.249 },\r\n  { pitch: 31, name: 'G', octave: 1, label: 'G1', frequency: 48.999 },\r\n  { pitch: 32, name: 'G#', octave: 1, label: 'G#1', frequency: 51.913 },\r\n  { pitch: 33, name: 'A', octave: 1, label: 'A1', frequency: 55 },\r\n  { pitch: 34, name: 'A#', octave: 1, label: 'A#1', frequency: 58.27 },\r\n  { pitch: 35, name: 'B', octave: 1, label: 'B1', frequency: 61.735 },\r\n  { pitch: 36, name: 'C', octave: 2, label: 'C2', frequency: 65.406 },\r\n  { pitch: 37, name: 'C#', octave: 2, label: 'C#2', frequency: 69.296 },\r\n  { pitch: 38, name: 'D', octave: 2, label: 'D2', frequency: 73.416 },\r\n  { pitch: 39, name: 'D#', octave: 2, label: 'D#2', frequency: 77.782 },\r\n  { pitch: 40, name: 'E', octave: 2, label: 'E2', frequency: 82.407 },\r\n  { pitch: 41, name: 'F', octave: 2, label: 'F2', frequency: 87.307 },\r\n  { pitch: 42, name: 'F#', octave: 2, label: 'F#2', frequency: 92.499 },\r\n  { pitch: 43, name: 'G', octave: 2, label: 'G2', frequency: 97.999 },\r\n  { pitch: 44, name: 'G#', octave: 2, label: 'G#2', frequency: 103.826 },\r\n  { pitch: 45, name: 'A', octave: 2, label: 'A2', frequency: 110 },\r\n  { pitch: 46, name: 'A#', octave: 2, label: 'A#2', frequency: 116.541 },\r\n  { pitch: 47, name: 'B', octave: 2, label: 'B2', frequency: 123.471 },\r\n  { pitch: 48, name: 'C', octave: 3, label: 'C3', frequency: 130.813 },\r\n  { pitch: 49, name: 'C#', octave: 3, label: 'C#3', frequency: 138.591 },\r\n  { pitch: 50, name: 'D', octave: 3, label: 'D3', frequency: 146.832 },\r\n  { pitch: 51, name: 'D#', octave: 3, label: 'D#3', frequency: 155.563 },\r\n  { pitch: 52, name: 'E', octave: 3, label: 'E3', frequency: 164.814 },\r\n  { pitch: 53, name: 'F', octave: 3, label: 'F3', frequency: 174.614 },\r\n  { pitch: 54, name: 'F#', octave: 3, label: 'F#3', frequency: 184.997 },\r\n  { pitch: 55, name: 'G', octave: 3, label: 'G3', frequency: 195.998 },\r\n  { pitch: 56, name: 'G#', octave: 3, label: 'G#3', frequency: 207.652 },\r\n  { pitch: 57, name: 'A', octave: 3, label: 'A3', frequency: 220 },\r\n  { pitch: 58, name: 'A#', octave: 3, label: 'A#3', frequency: 233.082 },\r\n  { pitch: 59, name: 'B', octave: 3, label: 'B3', frequency: 246.942 },\r\n  { pitch: 60, name: 'C', octave: 4, label: 'C4', frequency: 261.626 },\r\n  { pitch: 61, name: 'C#', octave: 4, label: 'C#4', frequency: 277.183 },\r\n  { pitch: 62, name: 'D', octave: 4, label: 'D4', frequency: 293.665 },\r\n  { pitch: 63, name: 'D#', octave: 4, label: 'D#4', frequency: 311.127 },\r\n  { pitch: 64, name: 'E', octave: 4, label: 'E4', frequency: 329.628 },\r\n  { pitch: 65, name: 'F', octave: 4, label: 'F4', frequency: 349.228 },\r\n  { pitch: 66, name: 'F#', octave: 4, label: 'F#4', frequency: 369.994 },\r\n  { pitch: 67, name: 'G', octave: 4, label: 'G4', frequency: 391.995 },\r\n  { pitch: 68, name: 'G#', octave: 4, label: 'G#4', frequency: 415.305 },\r\n  { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440 },\r\n  { pitch: 70, name: 'A#', octave: 4, label: 'A#4', frequency: 466.164 },\r\n  { pitch: 71, name: 'B', octave: 4, label: 'B4', frequency: 493.883 },\r\n  { pitch: 72, name: 'C', octave: 5, label: 'C5', frequency: 523.251 },\r\n  { pitch: 73, name: 'C#', octave: 5, label: 'C#5', frequency: 554.365 },\r\n  { pitch: 74, name: 'D', octave: 5, label: 'D5', frequency: 587.33 },\r\n  { pitch: 75, name: 'D#', octave: 5, label: 'D#5', frequency: 622.254 },\r\n  { pitch: 76, name: 'E', octave: 5, label: 'E5', frequency: 659.255 },\r\n  { pitch: 77, name: 'F', octave: 5, label: 'F5', frequency: 698.456 },\r\n  { pitch: 78, name: 'F#', octave: 5, label: 'F#5', frequency: 739.989 },\r\n  { pitch: 79, name: 'G', octave: 5, label: 'G5', frequency: 783.991 },\r\n  { pitch: 80, name: 'G#', octave: 5, label: 'G#5', frequency: 830.609 },\r\n  { pitch: 81, name: 'A', octave: 5, label: 'A5', frequency: 880 },\r\n  { pitch: 82, name: 'A#', octave: 5, label: 'A#5', frequency: 932.328 },\r\n  { pitch: 83, name: 'B', octave: 5, label: 'B5', frequency: 987.767 },\r\n  { pitch: 84, name: 'C', octave: 6, label: 'C6', frequency: 1046.502 },\r\n  { pitch: 85, name: 'C#', octave: 6, label: 'C#6', frequency: 1108.731 },\r\n  { pitch: 86, name: 'D', octave: 6, label: 'D6', frequency: 1174.659 },\r\n  { pitch: 87, name: 'D#', octave: 6, label: 'D#6', frequency: 1244.508 },\r\n  { pitch: 88, name: 'E', octave: 6, label: 'E6', frequency: 1318.51 },\r\n  { pitch: 89, name: 'F', octave: 6, label: 'F6', frequency: 1396.913 },\r\n  { pitch: 90, name: 'F#', octave: 6, label: 'F#6', frequency: 1479.978 },\r\n  { pitch: 91, name: 'G', octave: 6, label: 'G6', frequency: 1567.982 },\r\n  { pitch: 92, name: 'G#', octave: 6, label: 'G#6', frequency: 1661.219 },\r\n  { pitch: 93, name: 'A', octave: 6, label: 'A6', frequency: 1760 },\r\n  { pitch: 94, name: 'A#', octave: 6, label: 'A#6', frequency: 1864.655 },\r\n  { pitch: 95, name: 'B', octave: 6, label: 'B6', frequency: 1975.533 },\r\n  { pitch: 96, name: 'C', octave: 7, label: 'C7', frequency: 2093.005 },\r\n  { pitch: 97, name: 'C#', octave: 7, label: 'C#7', frequency: 2217.461 },\r\n  { pitch: 98, name: 'D', octave: 7, label: 'D7', frequency: 2349.318 },\r\n  { pitch: 99, name: 'D#', octave: 7, label: 'D#7', frequency: 2489.016 },\r\n  { pitch: 100, name: 'E', octave: 7, label: 'E7', frequency: 2637.02 },\r\n  { pitch: 101, name: 'F', octave: 7, label: 'F7', frequency: 2793.826 },\r\n  { pitch: 102, name: 'F#', octave: 7, label: 'F#7', frequency: 2959.955 },\r\n  { pitch: 103, name: 'G', octave: 7, label: 'G7', frequency: 3135.963 },\r\n  { pitch: 104, name: 'G#', octave: 7, label: 'G#7', frequency: 3322.438 },\r\n  { pitch: 105, name: 'A', octave: 7, label: 'A7', frequency: 3520 },\r\n  { pitch: 106, name: 'A#', octave: 7, label: 'A#7', frequency: 3729.31 },\r\n  { pitch: 107, name: 'B', octave: 7, label: 'B7', frequency: 3951.066 },\r\n  { pitch: 108, name: 'C', octave: 8, label: 'C8', frequency: 4186.009 },\r\n  { pitch: 109, name: 'C#', octave: 8, label: 'C#8', frequency: 4434.922 },\r\n  { pitch: 110, name: 'D', octave: 8, label: 'D8', frequency: 4698.636 },\r\n  { pitch: 111, name: 'D#', octave: 8, label: 'D#8', frequency: 4978.032 },\r\n  { pitch: 112, name: 'E', octave: 8, label: 'E8', frequency: 5274.041 },\r\n  { pitch: 113, name: 'F', octave: 8, label: 'F8', frequency: 5587.652 },\r\n  { pitch: 114, name: 'F#', octave: 8, label: 'F#8', frequency: 5919.911 },\r\n  { pitch: 115, name: 'G', octave: 8, label: 'G8', frequency: 6271.927 },\r\n  { pitch: 116, name: 'G#', octave: 8, label: 'G#8', frequency: 6644.875 },\r\n  { pitch: 117, name: 'A', octave: 8, label: 'A8', frequency: 7040 },\r\n  { pitch: 118, name: 'A#', octave: 8, label: 'A#8', frequency: 7458.62 },\r\n  { pitch: 119, name: 'B', octave: 8, label: 'B8', frequency: 7902.133 },\r\n  { pitch: 120, name: 'C', octave: 9, label: 'C9', frequency: 8372.018 },\r\n  { pitch: 121, name: 'C#', octave: 9, label: 'C#9', frequency: 8869.844 },\r\n  { pitch: 122, name: 'D', octave: 9, label: 'D9', frequency: 9397.273 },\r\n  { pitch: 123, name: 'D#', octave: 9, label: 'D#9', frequency: 9956.063 },\r\n  { pitch: 124, name: 'E', octave: 9, label: 'E9', frequency: 10_548.08 },\r\n  { pitch: 125, name: 'F', octave: 9, label: 'F9', frequency: 11_175.3 },\r\n  { pitch: 126, name: 'F#', octave: 9, label: 'F#9', frequency: 11_839.82 },\r\n  { pitch: 127, name: 'G', octave: 9, label: 'G9', frequency: 12_543.85 }\r\n]\r\n\r\n/**\r\n * Set of all MIDI notes that are sharp/flat\r\n *\r\n * @type {Set<number>}\r\n * @example <caption>Find out if a note is sharp/flat</caption>\r\n *      const midiNr = 42;\r\n *      const isSharp = Midi.SHARPS.has(midiNr);\r\n *      // true\r\n */\r\nexport const SHARPS = new Set([\r\n  1,\r\n  3,\r\n  6,\r\n  8,\r\n  10,\r\n  13,\r\n  15,\r\n  18,\r\n  20,\r\n  22,\r\n  25,\r\n  27,\r\n  30,\r\n  32,\r\n  34,\r\n  37,\r\n  39,\r\n  42,\r\n  44,\r\n  46,\r\n  49,\r\n  51,\r\n  54,\r\n  56,\r\n  58,\r\n  61,\r\n  63,\r\n  66,\r\n  68,\r\n  70,\r\n  73,\r\n  75,\r\n  78,\r\n  80,\r\n  82,\r\n  85,\r\n  87,\r\n  90,\r\n  92,\r\n  94,\r\n  97,\r\n  99,\r\n  102,\r\n  104,\r\n  106,\r\n  109,\r\n  111,\r\n  114,\r\n  116,\r\n  118,\r\n  121,\r\n  123,\r\n  126\r\n])\r\n\r\n/**\r\n * @typedef {object} MidiCommand A MIDI command\r\n * @property {string} name e.g. 'noteOn'\r\n * @property {string} description e.g. 'Note-on'\r\n * @property {string[]|undefined} params additional prameters of that command\r\n * @example <caption>Example for a MIDI command</caption>\r\n *      { name: 'noteOn', description: 'Note-on', params: ['key', 'velocity'] }],\r\n */\r\n\r\n/**\r\n * MIDI commands with code, name, and parameters\r\n * From: https://ccrma.stanford.edu/~craig/articles/linuxmidi/misc/essenmidi.html\r\n * https://www.midi.org/specifications/item/table-1-summary-of-midi-message\r\n *\r\n * @type {Map<number,MidiCommand>}\r\n */\r\nexport const MIDI_COMMANDS = new Map([\r\n  [0x80, { name: 'noteOff', description: 'Note-off', params: ['key', 'velocity'] }],\r\n  [0x90, { name: 'noteOn', description: 'Note-on', params: ['key', 'velocity'] }],\r\n  [0xA0, { name: 'aftertouch', description: 'Aftertouch', params: ['key', 'touch'] }],\r\n  [0xB0, { name: 'continuousController', description: 'Continuous controller', params: ['controller #', 'controller value'] }],\r\n  [0xC0, { name: 'patchChange', description: 'Patch change', params: ['instrument number', 'instrument number'] }],\r\n  [0xD0, { name: 'channelPressure', description: 'Channel Pressure', params: ['pressure'] }],\r\n  [0xE0, { name: 'pitchBend', description: 'Pitch bend', params: ['lsb (7 bits)', 'msb (7 bits)'] }],\r\n  [0xF0, { name: 'sysExStart', description: 'start of system exclusive message' }],\r\n  [0xF1, { name: 'timeCodeQuarter', description: 'MIDI Time Code Quarter Frame (Sys Common)' }],\r\n  [0xF2, { name: 'posPointer', description: 'Song Position Pointer (Sys Common)' }],\r\n  [0xF3, { name: 'songSelect', description: 'Song Select (Sys Common)' }],\r\n  [0xF4, { name: 'unknown1', description: '???' }],\r\n  [0xF5, { name: 'unknown2', description: '???' }],\r\n  [0xF6, { name: 'tuneRequest', description: 'Tune Request (Sys Common)' }],\r\n  [0xF7, { name: 'syExEnd', description: 'end of system exclusive message 0' }],\r\n  [0xF8, { name: 'timingClock', description: 'Timing Clock (Sys Realtime)' }],\r\n  [0xFA, { name: 'start', description: 'Start (Sys Realtime)' }],\r\n  [0xFB, { name: 'continue', description: 'Continue (Sys Realtime)' }],\r\n  [0xFC, { name: 'stop', description: 'Stop (Sys Realtime)' }],\r\n  [0xFD, { name: 'unknwon3', description: '???' }],\r\n  [0xFE, { name: 'activeSensing', description: 'Active Sensing (Sys Realtime)' }],\r\n  [0xFF, { name: 'systemReset', description: 'System Reset (Sys Realtime)' }]\r\n])\r\n\r\n/*\r\n * MIDI instruments with number, group, and label\r\n */\r\nconst MIDI_INSTRUMENTS = [\r\n  { number: 0, group: 'Piano', label: 'Acoustic Grand Piano' },\r\n  { number: 1, group: 'Piano', label: 'Bright Acoustic Piano' },\r\n  { number: 2, group: 'Piano', label: 'Electric Grand Piano' },\r\n  { number: 3, group: 'Piano', label: 'Honky-tonk Piano' },\r\n  { number: 4, group: 'Piano', label: 'Electric Piano 1' },\r\n  { number: 5, group: 'Piano', label: 'Electric Piano 2' },\r\n  { number: 6, group: 'Piano', label: 'Harpsichord' },\r\n  { number: 7, group: 'Piano', label: 'Clavinet' },\r\n  { number: 8, group: 'Chromatic Percussion', label: 'Celesta' },\r\n  { number: 9, group: 'Chromatic Percussion', label: 'Glockenspiel' },\r\n  { number: 10, group: 'Chromatic Percussion', label: 'Music Box' },\r\n  { number: 11, group: 'Chromatic Percussion', label: 'Vibraphone' },\r\n  { number: 12, group: 'Chromatic Percussion', label: 'Marimba' },\r\n  { number: 13, group: 'Chromatic Percussion', label: 'Xylophone' },\r\n  { number: 14, group: 'Chromatic Percussion', label: 'Tubular Bells' },\r\n  { number: 15, group: 'Chromatic Percussion', label: 'Dulcimer' },\r\n  { number: 16, group: 'Organ', label: 'Drawbar Organ' },\r\n  { number: 17, group: 'Organ', label: 'Percussive Organ' },\r\n  { number: 18, group: 'Organ', label: 'Rock Organ' },\r\n  { number: 19, group: 'Organ', label: 'Church Organ' },\r\n  { number: 20, group: 'Organ', label: 'Reed Organ' },\r\n  { number: 21, group: 'Organ', label: 'Accordion' },\r\n  { number: 22, group: 'Organ', label: 'Harmonica' },\r\n  { number: 23, group: 'Organ', label: 'Tango Accordion' },\r\n  { number: 24, group: 'Guitar', label: 'Acoustic Guitar(nylon)' },\r\n  { number: 25, group: 'Guitar', label: 'Acoustic Guitar(steel)' },\r\n  { number: 26, group: 'Guitar', label: 'Electric Guitar(jazz)' },\r\n  { number: 27, group: 'Guitar', label: 'Electric Guitar(clean)' },\r\n  { number: 28, group: 'Guitar', label: 'Electric Guitar(muted)' },\r\n  { number: 29, group: 'Guitar', label: 'Overdriven Guitar' },\r\n  { number: 30, group: 'Guitar', label: 'Distortion Guitar' },\r\n  { number: 31, group: 'Guitar', label: 'Guitar harmonics' },\r\n  { number: 32, group: 'Bass', label: 'Acoustic Bass' },\r\n  { number: 33, group: 'Bass', label: 'Electric Bass(finger)' },\r\n  { number: 34, group: 'Bass', label: 'Electric Bass(pick)' },\r\n  { number: 35, group: 'Bass', label: 'Fretless Bass' },\r\n  { number: 36, group: 'Bass', label: 'Slap Bass 1' },\r\n  { number: 37, group: 'Bass', label: 'Slap Bass 2' },\r\n  { number: 38, group: 'Bass', label: 'Synth Bass 1' },\r\n  { number: 39, group: 'Bass', label: 'Synth Bass 2' },\r\n  { number: 40, group: 'Strings', label: 'Violin' },\r\n  { number: 41, group: 'Strings', label: 'Viola' },\r\n  { number: 42, group: 'Strings', label: 'Cello' },\r\n  { number: 43, group: 'Strings', label: 'Contrabass' },\r\n  { number: 44, group: 'Strings', label: 'Tremolo Strings' },\r\n  { number: 45, group: 'Strings', label: 'Pizzicato Strings' },\r\n  { number: 46, group: 'Strings', label: 'Orchestral Harp' },\r\n  { number: 47, group: 'Strings', label: 'Timpani' },\r\n  { number: 48, group: 'Strings (continued)', label: 'String Ensemble 1' },\r\n  { number: 49, group: 'Strings (continued)', label: 'String Ensemble 2' },\r\n  { number: 50, group: 'Strings (continued)', label: 'Synth Strings 1' },\r\n  { number: 51, group: 'Strings (continued)', label: 'Synth Strings 2' },\r\n  { number: 52, group: 'Strings (continued)', label: 'Choir Aahs' },\r\n  { number: 53, group: 'Strings (continued)', label: 'Voice Oohs' },\r\n  { number: 54, group: 'Strings (continued)', label: 'Synth Voice' },\r\n  { number: 55, group: 'Strings (continued)', label: 'Orchestra Hit' },\r\n  { number: 56, group: 'Brass', label: 'Trumpet' },\r\n  { number: 57, group: 'Brass', label: 'Trombone' },\r\n  { number: 58, group: 'Brass', label: 'Tuba' },\r\n  { number: 59, group: 'Brass', label: 'Muted Trumpet' },\r\n  { number: 60, group: 'Brass', label: 'French Horn' },\r\n  { number: 61, group: 'Brass', label: 'Brass Section' },\r\n  { number: 62, group: 'Brass', label: 'Synth Brass 1' },\r\n  { number: 63, group: 'Brass', label: 'Synth Brass 2' },\r\n  { number: 64, group: 'Reed', label: 'Soprano Sax' },\r\n  { number: 65, group: 'Reed', label: 'Alto Sax' },\r\n  { number: 66, group: 'Reed', label: 'Tenor Sax' },\r\n  { number: 67, group: 'Reed', label: 'Baritone Sax' },\r\n  { number: 68, group: 'Reed', label: 'Oboe' },\r\n  { number: 69, group: 'Reed', label: 'English Horn' },\r\n  { number: 70, group: 'Reed', label: 'Bassoon' },\r\n  { number: 71, group: 'Reed', label: 'Clarinet' },\r\n  { number: 72, group: 'Pipe', label: 'Piccolo' },\r\n  { number: 73, group: 'Pipe', label: 'Flute' },\r\n  { number: 74, group: 'Pipe', label: 'Recorder' },\r\n  { number: 75, group: 'Pipe', label: 'Pan Flute' },\r\n  { number: 76, group: 'Pipe', label: 'Blown Bottle' },\r\n  { number: 77, group: 'Pipe', label: 'Shakuhachi' },\r\n  { number: 78, group: 'Pipe', label: 'Whistle' },\r\n  { number: 79, group: 'Pipe', label: 'Ocarina' },\r\n  { number: 80, group: 'Synth Lead', label: 'Lead 1(square)' },\r\n  { number: 81, group: 'Synth Lead', label: 'Lead 2(sawtooth)' },\r\n  { number: 82, group: 'Synth Lead', label: 'Lead 3(calliope)' },\r\n  { number: 83, group: 'Synth Lead', label: 'Lead 4(chiff)' },\r\n  { number: 84, group: 'Synth Lead', label: 'Lead 5(charang)' },\r\n  { number: 85, group: 'Synth Lead', label: 'Lead 6(voice)' },\r\n  { number: 86, group: 'Synth Lead', label: 'Lead 7(fifths)' },\r\n  { number: 87, group: 'Synth Lead', label: 'Lead 8(bass + lead)' },\r\n  { number: 88, group: 'Synth Pad', label: 'Pad 1(new age)' },\r\n  { number: 89, group: 'Synth Pad', label: 'Pad 2(warm)' },\r\n  { number: 90, group: 'Synth Pad', label: 'Pad 3(polysynth)' },\r\n  { number: 91, group: 'Synth Pad', label: 'Pad 4(choir)' },\r\n  { number: 92, group: 'Synth Pad', label: 'Pad 5(bowed)' },\r\n  { number: 93, group: 'Synth Pad', label: 'Pad 6(metallic)' },\r\n  { number: 94, group: 'Synth Pad', label: 'Pad 7(halo)' },\r\n  { number: 95, group: 'Synth Pad', label: 'Pad 8(sweep)' },\r\n  { number: 96, group: 'Synth Effects', label: 'FX 1(rain)' },\r\n  { number: 97, group: 'Synth Effects', label: 'FX 2(soundtrack)' },\r\n  { number: 98, group: 'Synth Effects', label: 'FX 3(crystal)' },\r\n  { number: 99, group: 'Synth Effects', label: 'FX 4(atmosphere)' },\r\n  { number: 100, group: 'Synth Effects', label: 'FX 5(brightness)' },\r\n  { number: 101, group: 'Synth Effects', label: 'FX 6(goblins)' },\r\n  { number: 102, group: 'Synth Effects', label: 'FX 7(echoes)' },\r\n  { number: 103, group: 'Synth Effects', label: 'FX 8(sci-fi)' },\r\n  { number: 104, group: 'Ethnic', label: 'Sitar' },\r\n  { number: 105, group: 'Ethnic', label: 'Banjo' },\r\n  { number: 106, group: 'Ethnic', label: 'Shamisen' },\r\n  { number: 107, group: 'Ethnic', label: 'Koto' },\r\n  { number: 108, group: 'Ethnic', label: 'Kalimba' },\r\n  { number: 109, group: 'Ethnic', label: 'Bag pipe' },\r\n  { number: 110, group: 'Ethnic', label: 'Fiddle' },\r\n  { number: 111, group: 'Ethnic', label: 'Shanai' },\r\n  { number: 112, group: 'Percussive', label: 'Tinkle Bell' },\r\n  { number: 113, group: 'Percussive', label: 'Agogo' },\r\n  { number: 114, group: 'Percussive', label: 'Steel Drums' },\r\n  { number: 115, group: 'Percussive', label: 'Woodblock' },\r\n  { number: 116, group: 'Percussive', label: 'Taiko Drum' },\r\n  { number: 117, group: 'Percussive', label: 'Melodic Tom' },\r\n  { number: 118, group: 'Percussive', label: 'Synth Drum' },\r\n  { number: 119, group: 'Sound Effects', label: 'Reverse Cymbal' },\r\n  { number: 120, group: 'Sound Effects', label: 'Guitar Fret Noise' },\r\n  { number: 121, group: 'Sound Effects', label: 'Breath Noise' },\r\n  { number: 122, group: 'Sound Effects', label: 'Seashore' },\r\n  { number: 123, group: 'Sound Effects', label: 'Bird Tweet' },\r\n  { number: 124, group: 'Sound Effects', label: 'Telephone Ring' },\r\n  { number: 125, group: 'Sound Effects', label: 'Helicopter' },\r\n  { number: 126, group: 'Sound Effects', label: 'Applause' },\r\n  { number: 127, group: 'Sound Effects', label: 'Gunshot' }\r\n]\r\n\r\nconst MIDI_INSTRUMENTS_LEV2 = [\r\n  { number: 1, subnumber: 0, group: 'Piano', label: 'Acoustic Grand Piano' },\r\n  { number: 1, subnumber: 1, group: 'Piano', label: 'Wide Acoustic Grand' },\r\n  { number: 1, subnumber: 2, group: 'Piano', label: 'Dark Acoustic Grand' },\r\n  { number: 2, subnumber: 0, group: 'Piano', label: 'Bright Acoustic Piano' },\r\n  { number: 2, subnumber: 1, group: 'Piano', label: 'Wide Bright Acoustic' },\r\n  { number: 3, subnumber: 0, group: 'Piano', label: 'Electric Grand Piano' },\r\n  { number: 3, subnumber: 1, group: 'Piano', label: 'Wide Electric Grand' },\r\n  { number: 4, subnumber: 0, group: 'Piano', label: 'Honky-tonk Piano' },\r\n  { number: 4, subnumber: 1, group: 'Piano', label: 'Wide Honky-tonk' },\r\n  { number: 5, subnumber: 0, group: 'Piano', label: 'Rhodes Piano' },\r\n  { number: 5, subnumber: 1, group: 'Piano', label: 'Detuned Electric Piano 1' },\r\n  { number: 5, subnumber: 2, group: 'Piano', label: 'Electric Piano 1 Variation' },\r\n  { number: 5, subnumber: 3, group: 'Piano', label: '60\\'s Electric Piano' },\r\n  { number: 6, subnumber: 0, group: 'Piano', label: 'Chorused Electric Piano' },\r\n  { number: 6, subnumber: 1, group: 'Piano', label: 'Detuned Electric Piano 2' },\r\n  { number: 6, subnumber: 2, group: 'Piano', label: 'Electric Piano 2 Variation' },\r\n  { number: 6, subnumber: 3, group: 'Piano', label: 'Electric Piano Legend' },\r\n  { number: 6, subnumber: 4, group: 'Piano', label: 'Electric Piano Phase' },\r\n  { number: 7, subnumber: 0, group: 'Piano', label: 'Harpsichord' },\r\n  { number: 7, subnumber: 1, group: 'Piano', label: 'Coupled Harpsichord' },\r\n  { number: 7, subnumber: 2, group: 'Piano', label: 'Wide Harpsichord' },\r\n  { number: 7, subnumber: 3, group: 'Piano', label: 'Open Harpsichord' },\r\n  { number: 8, subnumber: 0, group: 'Piano', label: 'Clavinet' },\r\n  { number: 8, subnumber: 1, group: 'Piano', label: 'Pulse Clavinet' },\r\n  { number: 9, subnumber: 0, group: 'Chromatic Percussion', label: 'Celesta' },\r\n  { number: 10, subnumber: 0, group: 'Chromatic Percussion', label: 'Glockenspiel' },\r\n  { number: 11, subnumber: 0, group: 'Chromatic Percussion', label: 'Music Box' },\r\n  { number: 12, subnumber: 0, group: 'Chromatic Percussion', label: 'Vibraphone' },\r\n  { number: 12, subnumber: 1, group: 'Chromatic Percussion', label: 'Wet Vibraphone' },\r\n  { number: 13, subnumber: 0, group: 'Chromatic Percussion', label: 'Marimba' },\r\n  { number: 13, subnumber: 1, group: 'Chromatic Percussion', label: 'Wide Marimba' },\r\n  { number: 14, subnumber: 0, group: 'Chromatic Percussion', label: 'Xylophone' },\r\n  { number: 15, subnumber: 0, group: 'Chromatic Percussion', label: 'Tubular Bells' },\r\n  { number: 15, subnumber: 1, group: 'Chromatic Percussion', label: 'Church Bells' },\r\n  { number: 15, subnumber: 2, group: 'Chromatic Percussion', label: 'Carillon' },\r\n  { number: 16, subnumber: 0, group: 'Chromatic Percussion', label: 'Dulcimer / Santur' },\r\n  { number: 17, subnumber: 0, group: 'Organ', label: 'Hammond Organ' },\r\n  { number: 17, subnumber: 1, group: 'Organ', label: 'Detuned Organ 1' },\r\n  { number: 17, subnumber: 2, group: 'Organ', label: '60\\'s Organ 1' },\r\n  { number: 17, subnumber: 3, group: 'Organ', label: 'Organ 4' },\r\n  { number: 18, subnumber: 0, group: 'Organ', label: 'Percussive Organ' },\r\n  { number: 18, subnumber: 1, group: 'Organ', label: 'Detuned Organ 2' },\r\n  { number: 18, subnumber: 2, group: 'Organ', label: 'Organ 5' },\r\n  { number: 19, subnumber: 0, group: 'Organ', label: 'Rock Organ' },\r\n  { number: 20, subnumber: 0, group: 'Organ', label: 'Church Organ 1' },\r\n  { number: 20, subnumber: 1, group: 'Organ', label: 'Church Organ 2' },\r\n  { number: 20, subnumber: 2, group: 'Organ', label: 'Church Organ 3' },\r\n  { number: 21, subnumber: 0, group: 'Organ', label: 'Reed Organ' },\r\n  { number: 21, subnumber: 1, group: 'Organ', label: 'Puff Organ' },\r\n  { number: 22, subnumber: 0, group: 'Organ', label: 'French Accordion' },\r\n  { number: 22, subnumber: 1, group: 'Organ', label: 'Italian Accordion' },\r\n  { number: 23, subnumber: 0, group: 'Organ', label: 'Harmonica' },\r\n  { number: 24, subnumber: 0, group: 'Organ', label: 'Bandoneon' },\r\n  { number: 25, subnumber: 0, group: 'Guitar', label: 'Nylon-String Guitar' },\r\n  { number: 25, subnumber: 1, group: 'Guitar', label: 'Ukelele' },\r\n  { number: 25, subnumber: 2, group: 'Guitar', label: 'Open Nylon Guitar' },\r\n  { number: 25, subnumber: 3, group: 'Guitar', label: 'Nylon Guitar 2' },\r\n  { number: 26, subnumber: 0, group: 'Guitar', label: 'Steel-String Guitar' },\r\n  { number: 26, subnumber: 1, group: 'Guitar', label: '12-String Guitar' },\r\n  { number: 26, subnumber: 2, group: 'Guitar', label: 'Mandolin' },\r\n  { number: 26, subnumber: 3, group: 'Guitar', label: 'Steel + Body' },\r\n  { number: 27, subnumber: 0, group: 'Guitar', label: 'Jazz Guitar' },\r\n  { number: 27, subnumber: 1, group: 'Guitar', label: 'Hawaiian Guitar' },\r\n  { number: 28, subnumber: 0, group: 'Guitar', label: 'Clean Electric Guitar' },\r\n  { number: 28, subnumber: 1, group: 'Guitar', label: 'Chorus Guitar' },\r\n  { number: 28, subnumber: 2, group: 'Guitar', label: 'Mid Tone Guitar' },\r\n  { number: 29, subnumber: 0, group: 'Guitar', label: 'Muted Electric Guitar' },\r\n  { number: 29, subnumber: 1, group: 'Guitar', label: 'Funk Guitar' },\r\n  { number: 29, subnumber: 2, group: 'Guitar', label: 'Funk Guitar 2' },\r\n  { number: 29, subnumber: 3, group: 'Guitar', label: 'Jazz Man' },\r\n  { number: 30, subnumber: 0, group: 'Guitar', label: 'Overdriven Guitar' },\r\n  { number: 30, subnumber: 1, group: 'Guitar', label: 'Guitar Pinch' },\r\n  { number: 31, subnumber: 0, group: 'Guitar', label: 'Distortion Guitar' },\r\n  { number: 31, subnumber: 1, group: 'Guitar', label: 'Feedback Guitar' },\r\n  { number: 31, subnumber: 2, group: 'Guitar', label: 'Distortion Rtm Guitar' },\r\n  { number: 32, subnumber: 0, group: 'Guitar', label: 'Guitar Harmonics' },\r\n  { number: 32, subnumber: 1, group: 'Guitar', label: 'Guitar Feedback' },\r\n  { number: 33, subnumber: 0, group: 'Bass', label: 'Acoustic Bass' },\r\n  { number: 34, subnumber: 0, group: 'Bass', label: 'Fingered Bass' },\r\n  { number: 34, subnumber: 1, group: 'Bass', label: 'Finger Slap' },\r\n  { number: 35, subnumber: 0, group: 'Bass', label: 'Picked Bass' },\r\n  { number: 36, subnumber: 0, group: 'Bass', label: 'Fretless Bass' },\r\n  { number: 37, subnumber: 0, group: 'Bass', label: 'Slap Bass 1' },\r\n  { number: 38, subnumber: 0, group: 'Bass', label: 'Slap Bass 2' },\r\n  { number: 39, subnumber: 0, group: 'Bass', label: 'Synth Bass 1' },\r\n  { number: 39, subnumber: 1, group: 'Bass', label: 'Synth Bass 101' },\r\n  { number: 39, subnumber: 2, group: 'Bass', label: 'Synth Bass 3' },\r\n  { number: 39, subnumber: 3, group: 'Bass', label: 'Clavi Bass' },\r\n  { number: 39, subnumber: 4, group: 'Bass', label: 'Hammer' },\r\n  { number: 40, subnumber: 0, group: 'Bass', label: 'Synth Bass 2' },\r\n  { number: 40, subnumber: 1, group: 'Bass', label: 'Synth Bass 4' },\r\n  { number: 40, subnumber: 2, group: 'Bass', label: 'Rubber Bass' },\r\n  { number: 40, subnumber: 3, group: 'Bass', label: 'Attack Pulse' },\r\n  { number: 41, subnumber: 0, group: 'Strings', label: 'Violin' },\r\n  { number: 41, subnumber: 1, group: 'Strings', label: 'Slow Violin' },\r\n  { number: 42, subnumber: 0, group: 'Strings', label: 'Viola' },\r\n  { number: 43, subnumber: 0, group: 'Strings', label: 'Cello' },\r\n  { number: 44, subnumber: 0, group: 'Strings', label: 'Contrabass' },\r\n  { number: 45, subnumber: 0, group: 'Strings', label: 'Tremolo Strings' },\r\n  { number: 46, subnumber: 0, group: 'Strings', label: 'Pizzicato Strings' },\r\n  { number: 47, subnumber: 0, group: 'Strings', label: 'Harp' },\r\n  { number: 47, subnumber: 1, group: 'Strings', label: 'Yang Qin' },\r\n  { number: 48, subnumber: 0, group: 'Strings', label: 'Timpani' },\r\n  { number: 49, subnumber: 0, group: 'Orchestral Ensemble', label: 'String Ensemble' },\r\n  { number: 49, subnumber: 1, group: 'Orchestral Ensemble', label: 'Orchestra Strings' },\r\n  { number: 49, subnumber: 2, group: 'Orchestral Ensemble', label: '60\\'s Strings' },\r\n  { number: 50, subnumber: 0, group: 'Orchestral Ensemble', label: 'Slow String Ensemble' },\r\n  { number: 51, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Strings 1' },\r\n  { number: 51, subnumber: 1, group: 'Orchestral Ensemble', label: 'Synth Strings 3' },\r\n  { number: 52, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Strings 2' },\r\n  { number: 53, subnumber: 0, group: 'Orchestral Ensemble', label: 'Choir Aahs' },\r\n  { number: 53, subnumber: 1, group: 'Orchestral Ensemble', label: 'Choir Aahs 2' },\r\n  { number: 54, subnumber: 0, group: 'Orchestral Ensemble', label: 'Voice Oohs' },\r\n  { number: 54, subnumber: 1, group: 'Orchestral Ensemble', label: 'Humming' },\r\n  { number: 55, subnumber: 0, group: 'Orchestral Ensemble', label: 'Synth Voice' },\r\n  { number: 55, subnumber: 1, group: 'Orchestral Ensemble', label: 'Analog Voice' },\r\n  { number: 56, subnumber: 0, group: 'Orchestral Ensemble', label: 'Orchestra Hit' },\r\n  { number: 56, subnumber: 1, group: 'Orchestral Ensemble', label: 'Bass Hit' },\r\n  { number: 56, subnumber: 2, group: 'Orchestral Ensemble', label: '6th Hit' },\r\n  { number: 56, subnumber: 3, group: 'Orchestral Ensemble', label: 'Euro Hit' },\r\n  { number: 57, subnumber: 0, group: 'Brass', label: 'Trumpet' },\r\n  { number: 57, subnumber: 1, group: 'Brass', label: 'Dark Trumpet' },\r\n  { number: 58, subnumber: 0, group: 'Brass', label: 'Trombone' },\r\n  { number: 58, subnumber: 1, group: 'Brass', label: 'Trombone 2' },\r\n  { number: 58, subnumber: 2, group: 'Brass', label: 'Bright Trombone' },\r\n  { number: 59, subnumber: 0, group: 'Brass', label: 'Tuba' },\r\n  { number: 60, subnumber: 0, group: 'Brass', label: 'Muted Trumpet' },\r\n  { number: 60, subnumber: 1, group: 'Brass', label: 'Muted Trumpet 2' },\r\n  { number: 61, subnumber: 0, group: 'Brass', label: 'French Horn' },\r\n  { number: 61, subnumber: 1, group: 'Brass', label: 'French Horn 2' },\r\n  { number: 62, subnumber: 0, group: 'Brass', label: 'Brass Section' },\r\n  { number: 62, subnumber: 1, group: 'Brass', label: 'Brass Section' },\r\n  { number: 63, subnumber: 0, group: 'Brass', label: 'Synth Brass 1' },\r\n  { number: 63, subnumber: 1, group: 'Brass', label: 'Synth Brass 3' },\r\n  { number: 63, subnumber: 2, group: 'Brass', label: 'Analog Brass 1' },\r\n  { number: 63, subnumber: 3, group: 'Brass', label: 'Jump Brass' },\r\n  { number: 64, subnumber: 0, group: 'Brass', label: 'Synth Brass 2' },\r\n  { number: 64, subnumber: 1, group: 'Brass', label: 'Synth Brass 4' },\r\n  { number: 64, subnumber: 2, group: 'Brass', label: 'Analog Brass 2' },\r\n  { number: 65, subnumber: 0, group: 'Reed', label: 'Soprano Sax' },\r\n  { number: 66, subnumber: 0, group: 'Reed', label: 'Alto Sax' },\r\n  { number: 67, subnumber: 0, group: 'Reed', label: 'Tenor Sax' },\r\n  { number: 68, subnumber: 0, group: 'Reed', label: 'Baritone Sax' },\r\n  { number: 69, subnumber: 0, group: 'Reed', label: 'Oboe' },\r\n  { number: 70, subnumber: 0, group: 'Reed', label: 'English Horn' },\r\n  { number: 71, subnumber: 0, group: 'Reed', label: 'Bassoon' },\r\n  { number: 72, subnumber: 0, group: 'Reed', label: 'Clarinet' },\r\n  { number: 73, subnumber: 0, group: 'Wind', label: 'Piccolo' },\r\n  { number: 74, subnumber: 0, group: 'Wind', label: 'Flute' },\r\n  { number: 75, subnumber: 0, group: 'Wind', label: 'Recorder' },\r\n  { number: 76, subnumber: 0, group: 'Wind', label: 'Pan Flute' },\r\n  { number: 77, subnumber: 0, group: 'Wind', label: 'Blown Bottle' },\r\n  { number: 78, subnumber: 0, group: 'Wind', label: 'Shakuhachi' },\r\n  { number: 79, subnumber: 0, group: 'Wind', label: 'Whistle' },\r\n  { number: 80, subnumber: 0, group: 'Wind', label: 'Ocarina' },\r\n  { number: 81, subnumber: 0, group: 'Lead', label: 'Square Lead' },\r\n  { number: 81, subnumber: 1, group: 'Lead', label: 'Square Wave' },\r\n  { number: 81, subnumber: 2, group: 'Lead', label: 'Sine Wave' },\r\n  { number: 82, subnumber: 0, group: 'Lead', label: 'Saw Lead' },\r\n  { number: 82, subnumber: 1, group: 'Lead', label: 'Saw Wave' },\r\n  { number: 82, subnumber: 2, group: 'Lead', label: 'Doctor Solo' },\r\n  { number: 82, subnumber: 3, group: 'Lead', label: 'Natural Lead' },\r\n  { number: 82, subnumber: 4, group: 'Lead', label: 'Sequenced Saw' },\r\n  { number: 83, subnumber: 0, group: 'Lead', label: 'Synth Calliope' },\r\n  { number: 84, subnumber: 0, group: 'Lead', label: 'Chiffer Lead' },\r\n  { number: 85, subnumber: 0, group: 'Lead', label: 'Charang' },\r\n  { number: 85, subnumber: 1, group: 'Lead', label: 'Wire Lead' },\r\n  { number: 86, subnumber: 0, group: 'Lead', label: 'Solo Synth Vox' },\r\n  { number: 87, subnumber: 0, group: 'Lead', label: '5th Saw Wave' },\r\n  { number: 88, subnumber: 0, group: 'Lead', label: 'Bass & Lead' },\r\n  { number: 88, subnumber: 1, group: 'Lead', label: 'Delayed Lead' },\r\n  { number: 89, subnumber: 0, group: 'Synth Pad', label: 'Fantasia Pad' },\r\n  { number: 90, subnumber: 0, group: 'Synth Pad', label: 'Warm Pad' },\r\n  { number: 90, subnumber: 1, group: 'Synth Pad', label: 'Sine Pad' },\r\n  { number: 91, subnumber: 0, group: 'Synth Pad', label: 'Polysynth Pad' },\r\n  { number: 92, subnumber: 0, group: 'Synth Pad', label: 'Space Voice Pad' },\r\n  { number: 92, subnumber: 1, group: 'Synth Pad', label: 'Itopia' },\r\n  { number: 93, subnumber: 0, group: 'Synth Pad', label: 'Bowed Glass Pad' },\r\n  { number: 94, subnumber: 0, group: 'Synth Pad', label: 'Metal Pad' },\r\n  { number: 95, subnumber: 0, group: 'Synth Pad', label: 'Halo Pad' },\r\n  { number: 96, subnumber: 0, group: 'Synth Pad', label: 'Sweep Pad' },\r\n  { number: 97, subnumber: 0, group: 'Synth Effects', label: 'Ice Rain' },\r\n  { number: 98, subnumber: 0, group: 'Synth Effects', label: 'Soundtrack' },\r\n  { number: 99, subnumber: 0, group: 'Synth Effects', label: 'Crystal' },\r\n  { number: 99, subnumber: 1, group: 'Synth Effects', label: 'Synth Mallet' },\r\n  { number: 100, subnumber: 0, group: 'Synth Effects', label: 'Atmosphere' },\r\n  { number: 101, subnumber: 0, group: 'Synth Effects', label: 'Brightness' },\r\n  { number: 102, subnumber: 0, group: 'Synth Effects', label: 'Goblin' },\r\n  { number: 103, subnumber: 0, group: 'Synth Effects', label: 'Echo Drops' },\r\n  { number: 103, subnumber: 1, group: 'Synth Effects', label: 'Echo Bell' },\r\n  { number: 103, subnumber: 2, group: 'Synth Effects', label: 'Echo Pan' },\r\n  { number: 104, subnumber: 0, group: 'Synth Effects', label: 'Star Theme' },\r\n  { number: 105, subnumber: 0, group: 'Ethnic', label: 'Sitar' },\r\n  { number: 105, subnumber: 1, group: 'Ethnic', label: 'Sitar 2' },\r\n  { number: 106, subnumber: 0, group: 'Ethnic', label: 'Banjo' },\r\n  { number: 107, subnumber: 0, group: 'Ethnic', label: 'Shamisen' },\r\n  { number: 108, subnumber: 0, group: 'Ethnic', label: 'Koto' },\r\n  { number: 108, subnumber: 1, group: 'Ethnic', label: 'Taisho Koto' },\r\n  { number: 109, subnumber: 0, group: 'Ethnic', label: 'Kalimba' },\r\n  { number: 110, subnumber: 0, group: 'Ethnic', label: 'Bagpipe' },\r\n  { number: 111, subnumber: 0, group: 'Ethnic', label: 'Fiddle' },\r\n  { number: 112, subnumber: 0, group: 'Ethnic', label: 'Shanai' },\r\n  { number: 113, subnumber: 0, group: 'Percussive', label: 'Tinkle Bell' },\r\n  { number: 114, subnumber: 0, group: 'Percussive', label: 'Agogo' },\r\n  { number: 115, subnumber: 0, group: 'Percussive', label: 'Steel Drums' },\r\n  { number: 116, subnumber: 0, group: 'Percussive', label: 'Woodblock' },\r\n  { number: 116, subnumber: 1, group: 'Percussive', label: 'Castanets' },\r\n  { number: 117, subnumber: 0, group: 'Percussive', label: 'Taiko Drum' },\r\n  { number: 117, subnumber: 1, group: 'Percussive', label: 'Concert Bass Drum' },\r\n  { number: 118, subnumber: 0, group: 'Percussive', label: 'Melodic Tom 1' },\r\n  { number: 118, subnumber: 1, group: 'Percussive', label: 'Melodic Tom 2' },\r\n  { number: 119, subnumber: 0, group: 'Percussive', label: 'Synth Drum' },\r\n  { number: 119, subnumber: 1, group: 'Percussive', label: '808 Tom' },\r\n  { number: 119, subnumber: 2, group: 'Percussive', label: 'Electric Percussion' },\r\n  { number: 120, subnumber: 0, group: 'Percussive', label: 'Reverse Cymbal' },\r\n  { number: 121, subnumber: 0, group: 'Sound Effects', label: 'Guitar Fret Noise' },\r\n  { number: 121, subnumber: 1, group: 'Sound Effects', label: 'Guitar Cut Noise' },\r\n  { number: 121, subnumber: 2, group: 'Sound Effects', label: 'String Slap' },\r\n  { number: 122, subnumber: 0, group: 'Sound Effects', label: 'Breath Noise' },\r\n  { number: 122, subnumber: 1, group: 'Sound Effects', label: 'Flute Key Click' },\r\n  { number: 123, subnumber: 0, group: 'Sound Effects', label: 'Seashore' },\r\n  { number: 123, subnumber: 1, group: 'Sound Effects', label: 'Rain' },\r\n  { number: 123, subnumber: 2, group: 'Sound Effects', label: 'Thunder' },\r\n  { number: 123, subnumber: 3, group: 'Sound Effects', label: 'Wind' },\r\n  { number: 123, subnumber: 4, group: 'Sound Effects', label: 'Stream' },\r\n  { number: 123, subnumber: 5, group: 'Sound Effects', label: 'Bubble' },\r\n  { number: 124, subnumber: 0, group: 'Sound Effects', label: 'Bird Tweet' },\r\n  { number: 124, subnumber: 1, group: 'Sound Effects', label: 'Dog' },\r\n  { number: 124, subnumber: 2, group: 'Sound Effects', label: 'Horse Gallop' },\r\n  { number: 124, subnumber: 3, group: 'Sound Effects', label: 'Bird 2' },\r\n  { number: 125, subnumber: 0, group: 'Sound Effects', label: 'Telephone 1' },\r\n  { number: 125, subnumber: 1, group: 'Sound Effects', label: 'Telephone 2' },\r\n  { number: 125, subnumber: 2, group: 'Sound Effects', label: 'Door Creaking' },\r\n  { number: 125, subnumber: 3, group: 'Sound Effects', label: 'Door Closing' },\r\n  { number: 125, subnumber: 4, group: 'Sound Effects', label: 'Scratch' },\r\n  { number: 125, subnumber: 5, group: 'Sound Effects', label: 'Wind Chimes' },\r\n  { number: 126, subnumber: 0, group: 'Sound Effects', label: 'Helicopter' },\r\n  { number: 126, subnumber: 1, group: 'Sound Effects', label: 'Car Engine' },\r\n  { number: 126, subnumber: 2, group: 'Sound Effects', label: 'Car Stop' },\r\n  { number: 126, subnumber: 3, group: 'Sound Effects', label: 'Car Pass' },\r\n  { number: 126, subnumber: 4, group: 'Sound Effects', label: 'Car Crash' },\r\n  { number: 126, subnumber: 5, group: 'Sound Effects', label: 'Siren' },\r\n  { number: 126, subnumber: 6, group: 'Sound Effects', label: 'Train' },\r\n  { number: 126, subnumber: 7, group: 'Sound Effects', label: 'Jetplane' },\r\n  { number: 126, subnumber: 8, group: 'Sound Effects', label: 'Starship' },\r\n  { number: 126, subnumber: 9, group: 'Sound Effects', label: 'Burst Noise' },\r\n  { number: 127, subnumber: 0, group: 'Sound Effects', label: 'Applause' },\r\n  { number: 127, subnumber: 1, group: 'Sound Effects', label: 'Laughing' },\r\n  { number: 127, subnumber: 2, group: 'Sound Effects', label: 'Screaming' },\r\n  { number: 127, subnumber: 3, group: 'Sound Effects', label: 'Punch' },\r\n  { number: 127, subnumber: 4, group: 'Sound Effects', label: 'Heart Beat' },\r\n  { number: 127, subnumber: 5, group: 'Sound Effects', label: 'Footsteps' },\r\n  { number: 128, subnumber: 0, group: 'Sound Effects', label: 'Gun Shot' },\r\n  { number: 128, subnumber: 1, group: 'Sound Effects', label: 'Machine Gun' },\r\n  { number: 128, subnumber: 2, group: 'Sound Effects', label: 'Lasergun' },\r\n  { number: 128, subnumber: 3, group: 'Sound Effects', label: 'Explosion' }\r\n]\r\n\r\n/**\r\n * @type {Map<number,string>}\r\n */\r\nconst GENERAL_MIDI_DRUM_NOTE_NUMBERS = new Map([\r\n  [27, 'High Q(GM2)'],\r\n  [28, 'Slap(GM2)'],\r\n  [29, 'Scratch Push(GM2)'],\r\n  [30, 'Scratch Pull(GM2)'],\r\n  [31, 'Sticks(GM2)'],\r\n  [32, 'Square Click(GM2)'],\r\n  [33, 'Metronome Click(GM2)'],\r\n  [34, 'Metronome Bell(GM2)'],\r\n  [35, 'Bass Drum 2'],\r\n  [36, 'Bass Drum 1'],\r\n  [37, 'Side Stick'],\r\n  [38, 'Snare Drum 1'],\r\n  [39, 'Hand Clap'],\r\n  [40, 'Snare Drum 2'],\r\n  [41, 'Low Tom 2'],\r\n  [42, 'Closed Hi-hat'],\r\n  [43, 'Low Tom 1'],\r\n  [44, 'Pedal Hi-hat'],\r\n  [45, 'Mid Tom 2'],\r\n  [46, 'Open Hi-hat'],\r\n  [47, 'Mid Tom 1'],\r\n  [48, 'High Tom 2'],\r\n  [49, 'Crash Cymbal 1'],\r\n  [50, 'High Tom 1'],\r\n  [51, 'Ride Cymbal 1'],\r\n  [52, 'Chinese Cymbal'],\r\n  [53, 'Ride Bell'],\r\n  [54, 'Tambourine'],\r\n  [55, 'Splash Cymbal'],\r\n  [56, 'Cowbell'],\r\n  [57, 'Crash Cymbal 2'],\r\n  [58, 'Vibra Slap'],\r\n  [59, 'Ride Cymbal 2'],\r\n  [60, 'High Bongo'],\r\n  [61, 'Low Bongo'],\r\n  [62, 'Mute High Conga'],\r\n  [63, 'Open High Conga'],\r\n  [64, 'Low Conga'],\r\n  [65, 'High Timbale'],\r\n  [66, 'Low Timbale'],\r\n  [67, 'High Agogo'],\r\n  [68, 'Low Agogo'],\r\n  [69, 'Cabasa'],\r\n  [70, 'Maracas'],\r\n  [71, 'Short Whistle'],\r\n  [72, 'Long Whistle'],\r\n  [73, 'Short Guiro'],\r\n  [74, 'Long Guiro'],\r\n  [75, 'Claves'],\r\n  [76, 'High Wood Block'],\r\n  [77, 'Low Wood Block'],\r\n  [78, 'Mute Cuica'],\r\n  [79, 'Open Cuica'],\r\n  [80, 'Mute Triangle'],\r\n  [81, 'Open Triangle'],\r\n  [82, 'Shaker(GM2)'],\r\n  [83, 'Jingle Bell(GM2)'],\r\n  [84, 'Belltree(GM2)'],\r\n  [85, 'Castanets(GM2)'],\r\n  [86, 'Mute Surdo(GM2)'],\r\n  [87, 'Open Surdo(GM2)']\r\n])\r\n\r\n/**\r\n * @type {object[]}\r\n * @todo add instrument numbers\r\n * @todo This might be useful, e.g. to check which notes Player can play\r\n */\r\nexport const MIDI_NOTE_RANGES = [\r\n  // Strings\r\n  { instrNr: 40, nrL2: -1, subNrL2: -1, label: 'Violin', min: 55, max: 103 },\r\n  { instrNr: 41, nrL2: -1, subNrL2: -1, label: 'Viola', min: 48, max: 91 },\r\n  { instrNr: 42, nrL2: -1, subNrL2: -1, label: 'Cello', min: 36, max: 76 },\r\n  { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Double Bass', min: 28, max: 67 },\r\n  { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Bass Guitar', min: 28, max: 67 },\r\n  { instrNr: -1, nrL2: -1, subNrL2: -1, label: 'Acoustic Guitar', min: 40, max: 88 },\r\n  // Brass\r\n  { instrNr: 58, nrL2: 59, subNrL2: 0, label: 'Tuba', min: 28, max: 58 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Trombone', min: 34, max: 67 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'French Horn', min: 34, max: 77 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Trombone', min: 40, max: 72 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Trumpet', min: 55, max: 82 },\r\n  // Woodwinds\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Piccolo', min: 74, max: 102 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Flute', min: 60, max: 96 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Oboe', min: 58, max: 91 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Flute', min: 55, max: 91 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Cor Anglais (English Horn)', min: 52, max: 81 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Clarinet', min: 50, max: 94 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Clarinet', min: 38, max: 77 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bassoon', min: 34, max: 75 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Contrabassoon', min: 22, max: 53 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Soprano Recorder', min: 72, max: 98 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Recorder', min: 65, max: 91 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tenor Recorder', min: 60, max: 86 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Recorder', min: 53, max: 79 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Baritone Sax', min: 36, max: 69 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tenor Sax', min: 44, max: 76 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Alto Sax', min: 49, max: 81 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Soprano Sax', min: 56, max: 88 },\r\n  // Tuned Percussion\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Glockenspiel', min: 79, max: 108 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Xylophone', min: 65, max: 108 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Vibraphone', min: 53, max: 89 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Marimba', min: 45, max: 96 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Bass Marimba', min: 33, max: 81 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Celeste', min: 60, max: 108 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Tubular Bells', min: 60, max: 77 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Timpani', min: 40, max: 55 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Harpsichord', min: 29, max: 89 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Kalimba', min: 60, max: 88 },\r\n  { instrNr: 0, nrL2: -1, subNrL2: -1, label: 'Harp', min: 24, max: 103 }\r\n]\r\n\r\n// Build lookup maps\r\nfor (const note of MIDI_NOTES) {\r\n  MidiNoteByPitch.set(note.pitch, note)\r\n  MidiNoteByLabel.set(note.label, note)\r\n}\r\nfor (const instrument of MIDI_INSTRUMENTS) {\r\n  MidiInstrumentByNumber.set(instrument.number, instrument)\r\n}\r\nfor (const instrument of MIDI_INSTRUMENTS_LEV2) {\r\n  const key = `${instrument.number}-${instrument.subnumber}`\r\n  MidiInstrumentByNumberLev2.set(key, instrument)\r\n}\r\n", "import { getMidiNoteByLabel, getMidiNoteByNr } from '../fileFormats/Midi.js'\r\n\r\n/**\r\n * Note class that reflects MIDI properties but has\r\n * absolute start and end times in seconds.\r\n */\r\nclass Note {\r\n  /**\r\n     * Creates a new Note. Note.from() is preferred over using the constructor.\r\n     *\r\n     * @param {number} pitch pitch\r\n     * @param {number} start start time in seconds\r\n     * @param {number} velocity velocity\r\n     * @param {number} channel MIDI channel\r\n     * @param {number} end end time in seconds\r\n     */\r\n  constructor (\r\n    pitch = 0,\r\n    start = 0,\r\n    velocity = 127,\r\n    channel = 0,\r\n    end = null\r\n  ) {\r\n    // Get note name, e.g. C#4\r\n    if (pitch < 0 || pitch > 127) {\r\n      throw new Error(`Invalid pitch ${pitch}`)\r\n    }\r\n    try {\r\n      this.name = getMidiNoteByNr(pitch).label\r\n    } catch {\r\n      throw new Error(`Invalid pitch ${pitch}`)\r\n    }\r\n    this.pitch = pitch\r\n    this.start = start\r\n    this.velocity = velocity\r\n    this.channel = channel\r\n    this.end = end\r\n    // TODO: breaks tests\r\n    // const duration = end - start;\r\n    // this.duration = Number.isNaN(duration) ? null : duration;\r\n  }\r\n\r\n  /**\r\n     * Creates a Note object from an object via destructuring.\r\n     * Use either 'end' or 'duration', if both are specified, end will be used.\r\n     *\r\n     * @example <caption>Using end</caption>\r\n     *  const n = Note.from({\r\n     *      pitch: 'C#4',     // e.g. 12 or C#4\r\n     *      start: 0.5,       // start time in seconds\r\n     *      end: 1.5,         // end time in seconds\r\n     *      velocity: 127,    // MIDI velocity\r\n     *      channel: 0,       // MIDI channel\r\n     *  });\r\n     * @example <caption>Using duration</caption>\r\n     *  const n = Note.from({\r\n     *      pitch: 'C#4',\r\n     *      start: 0.5,\r\n     *      duration: 1.2,\r\n     *  });\r\n     * @param {object} object object with at least {pitch}\r\n     * @param {number|string} object.pitch e.G. 12 or C#4\r\n     * @param {number} object.start start time in seconds\r\n     * @param {number} object.end end time in seconds\r\n     * @param {number} object.duration duration in seconds\r\n     * @param {number} object.velocity MIDI velocity\r\n     * @param {number} object.channel MIDI channel\r\n     * @returns {Note} new note\r\n     * @throws {Error} when pitch is invalid\r\n     */\r\n  static from (object) {\r\n    let {\r\n      pitch = 0,\r\n      start = 0,\r\n      velocity = 127,\r\n      channel = 0,\r\n      end = null,\r\n      duration = null\r\n    } = object\r\n    // Pitch can either be a number or a string\r\n    if ((typeof pitch === 'string') && Number.isNaN(+pitch)) {\r\n      const note = getMidiNoteByLabel(pitch)\r\n      if (note === null || note === undefined) {\r\n        throw new Error('Invalid pitch for Note.from()')\r\n      }\r\n      pitch = note.pitch\r\n    }\r\n    // Use either end or duration\r\n    if (\r\n      (end === undefined || end === null) &&\r\n            duration !== null &&\r\n            !Number.isNaN(duration)\r\n    ) {\r\n      end = start + duration\r\n    }\r\n    return new Note(pitch, start, velocity, channel, end)\r\n  }\r\n\r\n  /**\r\n     * Returns a copy of the Note object\r\n     *\r\n     * @returns {Note} new note\r\n     */\r\n  clone () {\r\n    return new Note(\r\n      this.pitch,\r\n      this.start,\r\n      this.velocity,\r\n      this.channel,\r\n      this.end\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Returns the duration of this note in seconds\r\n     *\r\n     * @returns {number} note duration\r\n     */\r\n  getDuration () {\r\n    if (this.end === null) {\r\n      return 0\r\n    }\r\n    return this.end - this.start\r\n  }\r\n\r\n  /**\r\n     * Returns the note's name and octave, e.g. 'C#3'\r\n     *\r\n     * @returns {string} note name as string\r\n     */\r\n  getName () {\r\n    return this.name\r\n  }\r\n\r\n  /**\r\n     * Returns the note's name WITHOUT the octave, e.g. 'C#'\r\n     *\r\n     * @returns {string} note name as string\r\n     */\r\n  getLetter () {\r\n    return getMidiNoteByNr(this.pitch).name\r\n  }\r\n\r\n  /**\r\n     * Returns the note's octave\r\n     *\r\n     * @returns {number} the note's octave\r\n     */\r\n  getOctave () {\r\n    return getMidiNoteByNr(this.pitch).octave\r\n  }\r\n\r\n  /**\r\n     * Returns a new Note where start and end are multiplied by factor\r\n     *\r\n     * @param {number} addedSeconds seconds to be added to start and end\r\n     * @returns {Note} new note\r\n     */\r\n  shiftTime (addedSeconds) {\r\n    const n = this.clone()\r\n    n.start += addedSeconds\r\n    n.end = n.end === null ? null : n.end + addedSeconds\r\n    return n\r\n  }\r\n\r\n  /**\r\n     * Returns a new Note where start and end are multiplied by factor\r\n     *\r\n     * @param {number} factor factor to scale start and end with\r\n     * @returns {Note} new note\r\n     */\r\n  scaleTime (factor) {\r\n    const n = this.clone()\r\n    n.start *= factor\r\n    n.end = n.end === null ? null : n.end * factor\r\n    return n\r\n  }\r\n\r\n  /**\r\n     * Returns true, if this Note and otherNote overlap in time.\r\n     *\r\n     * @param {Note} otherNote another Note\r\n     * @returns {boolean} true if they overlap\r\n     */\r\n  overlapsInTime (otherNote) {\r\n    return (this.start >= otherNote.start && this.start <= otherNote.end) ||\r\n            (this.end >= otherNote.start && this.end <= otherNote.end)\r\n  }\r\n\r\n  /**\r\n     * Returns the amount of seconds this Note and otherNote overlap in time.\r\n     *\r\n     * @param {Note} otherNote another Note\r\n     * @returns {number} seconds of overlap\r\n     */\r\n  overlapInSeconds (otherNote) {\r\n    if (!this.overlapsInTime(otherNote)) {\r\n      return 0\r\n    }\r\n    const laterStart = Math.max(this.start, otherNote.start)\r\n    const earlierEnd = Math.min(this.end, otherNote.end)\r\n    return earlierEnd - laterStart\r\n  }\r\n\r\n  /**\r\n     * Returns true if this note and otherNote have equal attributes.\r\n     *\r\n     * @param {Note} otherNote another Note\r\n     * @returns {boolean} true if equal\r\n     */\r\n  equals (otherNote) {\r\n    if (!(otherNote instanceof Note)) {\r\n      return false\r\n    }\r\n    return (\r\n      this.pitch === otherNote.pitch &&\r\n            this.start === otherNote.start &&\r\n            this.velocity === otherNote.velocity &&\r\n            this.channel === otherNote.channel &&\r\n            this.end === otherNote.end\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Human-readable string representation of this Note\r\n     *\r\n     * @param {boolean} short if true, attribute names will be shortened\r\n     * @returns {string} string representation\r\n     */\r\n  toString (short = false) {\r\n    if (short) {\r\n      return `Note(n: ${this.name}, p: ${this.pitch}, s: ${this.start}, e: ${this.end}, v: ${this.velocity}, c: ${this.channel})`\r\n    }\r\n    return `Note(name: ${this.name}, pitch: ${this.pitch}, start: ${this.start}, end: ${this.end}, velocity: ${this.velocity}, channel: ${this.channel})`\r\n  }\r\n}\r\n\r\nexport default Note\r\n", "import { getMidiNoteByLabel } from '../fileFormats/Midi.js'\nimport Note from './Note.js'\n\n/**\n * Guitar note class that reflects MIDI properties but has\n * absolute start and end times in seconds and\n * information on how to play it.\n *\n * @augments Note\n */\nclass GuitarNote extends Note {\n  /**\n     * Creates a new Note\n     *\n     * @param {number} pitch pitch\n     * @param {number} start start time in seconds\n     * @param {number} velocity velocity\n     * @param {number} channel MIDI channel\n     * @param {number} end end time in seconds\n     * @param {number} string guitar string\n     * @param {number} fret guitar fret\n     */\n  constructor (\n    pitch = 0,\n    start = 0,\n    velocity = 127,\n    channel = 0,\n    end = null,\n    // This is different to the base Note class\n    string = null,\n    fret = null\n  ) {\n    super(pitch, start, velocity, channel, end)\n    this.string = string\n    this.fret = fret\n  }\n\n  /**\n     * Creates a GuitarNote object from an object via destructuring\n     *\n     * @param {object} object object with at least {pitch}\n     *  {\n     *      pitch: number|string    e.g. 12 or C#4\n     *      start: number           start time in seconds\n     *      end: number             end time in seconds\n     *      velocity: number        MIDI velocity\n     *      channel: number         MIDI channel\n     *      string: number          guitar string\n     *      fret: number            guitar fret\n     *  }\n     * @returns {GuitarNote} new note\n     * @throws {Error} when pitch is invalid\n     */\n  static from (object) {\n    let {\n      pitch = 0,\n      start = 0,\n      velocity = 127,\n      channel = 0,\n      end = null,\n      // This is different to the base Note class\n      string = null,\n      fret = null\n    } = object\n    if (typeof pitch === 'string' && Number.isNaN(+pitch)) {\n      const note = getMidiNoteByLabel(pitch)\n      if (note === null || note === undefined) {\n        throw new Error('Invalid pitch for GuitarNote.from()')\n      }\n      pitch = note.pitch\n    }\n    return new GuitarNote(\n      pitch,\n      start,\n      velocity,\n      channel,\n      end,\n      string,\n      fret\n    )\n  }\n\n  /**\n     * Converts a Note to a GuitarNote\n     *\n     * @param {Note} note note\n     * @param {number} string string\n     * @param {number} fret fret\n     * @returns {GuitarNote} guitar note\n     */\n  static fromNote (note, string, fret) {\n    return new GuitarNote(\n      note.pitch,\n      note.start,\n      note.velocity,\n      note.channel,\n      note.end,\n      string,\n      fret\n    )\n  }\n\n  /**\n     * Simplifies the GuitarNote to a Note\n     *\n     * @returns {Note} note\n     */\n  toNote () {\n    return new Note(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end\n    )\n  }\n\n  /**\n     * Returns a copy of the Note object\n     *\n     * @returns {GuitarNote} new note\n     */\n  clone () {\n    return new GuitarNote(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end,\n      // This is different to the base Note class\n      this.string,\n      this.fret\n    )\n  }\n\n  /**\n     * Returns true if this note and otherNote have equal attributes.\n     *\n     * @param {GuitarNote} otherNote another GuitarNote\n     * @returns {boolean} true if equal\n     */\n  equals (otherNote) {\n    if (!(otherNote instanceof GuitarNote)) {\n      return false\n    }\n    return (\n      this.pitch === otherNote.pitch &&\n            this.start === otherNote.start &&\n            this.velocity === otherNote.velocity &&\n            this.channel === otherNote.channel &&\n            this.end === otherNote.end &&\n            // This is different to the base Note class\n            this.string === otherNote.string &&\n            this.fret === otherNote.fret\n    )\n  }\n\n  /**\n     * Human-readable string representation of this GuitarNote\n     *\n     * @param {boolean} short if true, attribute names will be shortened\n     * @returns {string} string representation\n     */\n  toString (short = false) {\n    if (short) {\n      return `GuitarNote(n: ${this.name}, p: ${this.pitch}, s: ${this.start}, e: ${this.end}, v: ${this.velocity}, c: ${this.channel}, s: ${this.string}, f: ${this.fret})`\n    }\n    return `GuitarNote(name: ${this.name}, pitch: ${this.pitch}, start: ${this.start}, end: ${this.end}, velocity: ${this.velocity}, channel: ${this.channel}, string: ${this.string}, fret: ${this.fret})`\n  }\n}\n\nexport default GuitarNote\n", "import { getMidiNoteByLabel } from '../fileFormats/Midi.js'\nimport Note from './Note.js'\n\n/**\n * Harmonica note class that reflects MIDI properties but has\n * absolute start and end times in seconds and\n * information on how to play it.\n *\n * @augments Note\n */\nclass HarmonicaNote extends Note {\n  /**\n     * Creates a new Note\n     *\n     * @param {number} pitch pitch\n     * @param {number} start start time in seconds\n     * @param {number} velocity velocity\n     * @param {number} channel MIDI channel\n     * @param {number} end end time in seconds\n     * @param {number} hole harmonica hole\n     * @param {'blow'|'draw'|'bend'|'overblow'} instruction instruction, e.g., blow or draw\n     */\n  constructor (\n    pitch = 0,\n    start = 0,\n    velocity = 127,\n    channel = 0,\n    end = null,\n    // This is different to the base Note class\n    hole = null,\n    instruction = null\n  ) {\n    super(pitch, start, velocity, channel, end)\n    this.hole = hole\n    this.instruction = instruction\n  }\n\n  /**\n     * Creates a HarmonicaNote object from an object via destructuring\n     *\n     * @param {object} object object with at least {pitch}\n     *  {\n     *      pitch: number|string    e.g. 12 or C#4\n     *      start: number           start time in seconds\n     *      end: number             end time in seconds\n     *      velocity: number        MIDI velocity\n     *      channel: number         MIDI channel\n     *      hole: number            harmonica hole\n     *      instruction: string     instruction, e.g., blow or draw\n     *  }\n     * @returns {HarmonicaNote} new note\n     * @throws {Error} when pitch is invalid\n     */\n  static from (object) {\n    let {\n      pitch = 0,\n      start = 0,\n      velocity = 127,\n      channel = 0,\n      end = null,\n      // This is different to the base Note class\n      hole = null,\n      instruction = null\n    } = object\n    if (typeof pitch === 'string' && Number.isNaN(+pitch)) {\n      const note = getMidiNoteByLabel(pitch)\n      if (note === null || note === undefined) {\n        throw new Error('Invalid pitch for HarmonicaNote.from()')\n      }\n      pitch = note.pitch\n    }\n    return new HarmonicaNote(\n      pitch,\n      start,\n      velocity,\n      channel,\n      end,\n      hole,\n      instruction\n    )\n  }\n\n  /**\n     * Converts a Note to a Harmonica\n     *\n     * @param {Note} note note\n     * @param {number} hole harmonica hole\n     * @param {'blow'|'draw'|'bend'|'overblow'} instruction instruction, e.g., blow or draw\n     * @returns {HarmonicaNote} harmonica note\n     */\n  static fromNote (note, hole, instruction) {\n    return new HarmonicaNote(\n      note.pitch,\n      note.start,\n      note.velocity,\n      note.channel,\n      note.end,\n      hole,\n      instruction\n    )\n  }\n\n  /**\n     * Simplifies the HarmonicaNote to a Note\n     *\n     * @returns {Note} note\n     */\n  toNote () {\n    return new Note(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end\n    )\n  }\n\n  /**\n     * Returns a copy of the Note object\n     *\n     * @returns {GuitarNote} new note\n     */\n  clone () {\n    return new HarmonicaNote(\n      this.pitch,\n      this.start,\n      this.velocity,\n      this.channel,\n      this.end,\n      // This is different to the base Note class\n      this.hole,\n      this.instruction\n    )\n  }\n\n  /**\n     * Returns true if this note and otherNote have equal attributes.\n     *\n     * @param {GuitarNote} otherNote another GuitarNote\n     * @returns {boolean} true if equal\n     */\n  equals (otherNote) {\n    if (!(otherNote instanceof HarmonicaNote)) {\n      return false\n    }\n    return (\n      this.pitch === otherNote.pitch &&\n            this.start === otherNote.start &&\n            this.velocity === otherNote.velocity &&\n            this.channel === otherNote.channel &&\n            this.end === otherNote.end &&\n            // This is different to the base Note class\n            this.hole === otherNote.hole &&\n            this.instruction === otherNote.instruction\n    )\n  }\n\n  /**\n     * Human-readable string representation of this HarmonicaNote\n     *\n     * @param {boolean} short if true, attribute names will be shortened\n     * @returns {string} string representation\n     */\n  toString (short = false) {\n    if (short) {\n      return `HarmonicaNote(n: ${this.name}, p: ${this.pitch}, s: ${this.start}, e: ${this.end}, v: ${this.velocity}, c: ${this.channel}, h: ${this.hole}, i: ${this.instruction})`\n    }\n    return `HarmonicaNote(name: ${this.name}, pitch: ${this.pitch}, start: ${this.start}, end: ${this.end}, velocity: ${this.velocity}, channel: ${this.channel}, hole: ${this.hole}, instruction: ${this.instruction})`\n  }\n}\n\nexport default HarmonicaNote\n", "export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending.js\";\n\nexport default function(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n", "export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n", "import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n", "export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n", "import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n", "export default function(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n", "export class InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nexport class InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(value);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n", "export default function(x) {\n  return x;\n}\n", "import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n", "export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n", "import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n", "import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n", "export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n", "import quantile from \"./quantile.js\";\n\nexport default function(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n", "export default function minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n", "export default function difference(values, ...others) {\n  values = new Set(values);\n  for (const other of others) {\n    for (const value of other) {\n      values.delete(value);\n    }\n  }\n  return values;\n}\n", "export default function set(values) {\n  return values instanceof Set ? values : new Set(values);\n}\n", "import set from \"./set.js\";\n\nexport default function intersection(values, ...others) {\n  values = new Set(values);\n  others = others.map(set);\n  out: for (const value of values) {\n    for (const other of others) {\n      if (!other.has(value)) {\n        values.delete(value);\n        continue out;\n      }\n    }\n  }\n  return values;\n}\n", "export default function union(...others) {\n  const set = new Set();\n  for (const other of others) {\n    for (const o of other) {\n      set.add(o);\n    }\n  }\n  return set;\n}\n", "var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n", "export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n", "import namespaces from \"./namespaces.js\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n", "import namespace from \"./namespace.js\";\nimport {xhtml} from \"./namespaces.js\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n", "function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n", "import {Selection} from \"./index.js\";\nimport selector from \"../selector.js\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n", "export default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n", "function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n", "import {Selection} from \"./index.js\";\nimport array from \"../array.js\";\nimport selectorAll from \"../selectorAll.js\";\n\nfunction arrayAll(select) {\n  return function() {\n    var group = select.apply(this, arguments);\n    return group == null ? [] : array(group);\n  };\n}\n\nexport default function(select) {\n  if (typeof select === \"function\") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n", "export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nexport function childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n", "import {childMatcher} from \"../matcher.js\";\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\nexport default function(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n}\n", "import {childMatcher} from \"../matcher.js\";\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return this.children;\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\nexport default function(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n}\n", "import {Selection} from \"./index.js\";\nimport matcher from \"../matcher.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n", "export default function(update) {\n  return new Array(update.length);\n}\n", "import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport array from \"../array.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don\u2019t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = array(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n", "import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n", "export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n  if (onupdate != null) update = onupdate(update);\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n", "import {Selection} from \"./index.js\";\n\nexport default function(selection) {\n  if (!(selection instanceof Selection)) throw new Error(\"invalid merge\");\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n", "export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n", "import {Selection} from \"./index.js\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n", "export default function() {\n  return Array.from(this);\n}\n", "export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n", "export default function() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n", "export default function() {\n  return !this.node();\n}\n", "export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n", "import namespace from \"../namespace.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n", "export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n", "import defaultView from \"../window.js\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n", "function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n", "function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n", "function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n", "function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n", "function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n", "function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n", "import creator from \"../creator.js\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n", "import creator from \"../creator.js\";\nimport selector from \"../selector.js\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n", "function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n", "function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n", "export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n", "function contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, options) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n", "import defaultView from \"../window.js\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n", "export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n", "import selection_select from \"./select.js\";\nimport selection_selectAll from \"./selectAll.js\";\nimport selection_selectChild from \"./selectChild.js\";\nimport selection_selectChildren from \"./selectChildren.js\";\nimport selection_filter from \"./filter.js\";\nimport selection_data from \"./data.js\";\nimport selection_enter from \"./enter.js\";\nimport selection_exit from \"./exit.js\";\nimport selection_join from \"./join.js\";\nimport selection_merge from \"./merge.js\";\nimport selection_order from \"./order.js\";\nimport selection_sort from \"./sort.js\";\nimport selection_call from \"./call.js\";\nimport selection_nodes from \"./nodes.js\";\nimport selection_node from \"./node.js\";\nimport selection_size from \"./size.js\";\nimport selection_empty from \"./empty.js\";\nimport selection_each from \"./each.js\";\nimport selection_attr from \"./attr.js\";\nimport selection_style from \"./style.js\";\nimport selection_property from \"./property.js\";\nimport selection_classed from \"./classed.js\";\nimport selection_text from \"./text.js\";\nimport selection_html from \"./html.js\";\nimport selection_raise from \"./raise.js\";\nimport selection_lower from \"./lower.js\";\nimport selection_append from \"./append.js\";\nimport selection_insert from \"./insert.js\";\nimport selection_remove from \"./remove.js\";\nimport selection_clone from \"./clone.js\";\nimport selection_datum from \"./datum.js\";\nimport selection_on from \"./on.js\";\nimport selection_dispatch from \"./dispatch.js\";\nimport selection_iterator from \"./iterator.js\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  selectChild: selection_selectChild,\n  selectChildren: selection_selectChildren,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  selection: selection_selection,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: selection_iterator\n};\n\nexport default selection;\n", "export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n", "import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy: function(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\")\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n      + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\")\n        + (this.h || 0) + \", \"\n        + (this.s || 0) * 100 + \"%, \"\n        + (this.l || 0) * 100 + \"%\"\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n", "export const radians = Math.PI / 180;\nexport const degrees = 180 / Math.PI;\n", "import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n", "export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n", "import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n", "export default x => () => x;\n", "import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n", "import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n", "export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n", "import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n", "export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n", "export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n", "import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n", "import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n", "import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n", "export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n", "var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n", "import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n", "import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n", "import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n", "var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we\u2019ve set an alarm, if we haven\u2019t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n", "import {Timer} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n", "import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n", "import {STARTING, ENDING, ENDED} from \"./transition/schedule.js\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n", "import interrupt from \"../interrupt.js\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n", "import {get, set} from \"./schedule.js\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n", "import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n", "import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n", "import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n", "import {get, init} from \"./schedule.js\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n", "import {get, set} from \"./schedule.js\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n", "import {get, set} from \"./schedule.js\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n", "import {set} from \"./schedule.js\";\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== \"function\") throw new Error;\n    set(this, id).ease = v;\n  };\n}\n\nexport default function(value) {\n  if (typeof value !== \"function\") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n", "import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n", "import {Transition} from \"./index.js\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n", "import {get, set, init} from \"./schedule.js\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n", "function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n", "import {selector} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n", "import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n", "import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n", "import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule.js\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we\u2019re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n", "function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n", "import {tweenValue} from \"./tween.js\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n", "function textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(value) {\n  var key = \"text\";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, textTween(value));\n}\n", "import {Transition, newId} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n", "import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we\u2019re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n", "import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr.js\";\nimport transition_attrTween from \"./attrTween.js\";\nimport transition_delay from \"./delay.js\";\nimport transition_duration from \"./duration.js\";\nimport transition_ease from \"./ease.js\";\nimport transition_easeVarying from \"./easeVarying.js\";\nimport transition_filter from \"./filter.js\";\nimport transition_merge from \"./merge.js\";\nimport transition_on from \"./on.js\";\nimport transition_remove from \"./remove.js\";\nimport transition_select from \"./select.js\";\nimport transition_selectAll from \"./selectAll.js\";\nimport transition_selection from \"./selection.js\";\nimport transition_style from \"./style.js\";\nimport transition_styleTween from \"./styleTween.js\";\nimport transition_text from \"./text.js\";\nimport transition_textTween from \"./textTween.js\";\nimport transition_transition from \"./transition.js\";\nimport transition_tween from \"./tween.js\";\nimport transition_end from \"./end.js\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  easeVarying: transition_easeVarying,\n  end: transition_end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n", "export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n", "import {Transition, newId} from \"../transition/index.js\";\nimport schedule from \"../transition/schedule.js\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n", "import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt.js\";\nimport selection_transition from \"./transition.js\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n", "import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {pointer, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport BrushEvent from \"./event.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: \"x\",\n  handles: [\"w\", \"e\"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\n// Like d3.local, but with the name \u201C__brush\u201D rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .on(\"mousedown.brush\", started)\n      .filter(touchable)\n        .on(\"touchstart.brush\", started)\n        .on(\"touchmove.brush\", touchmoved)\n        .on(\"touchend.brush touchcancel.brush\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  brush.move = function(group, selection) {\n    if (group.tween) {\n      group\n          .on(\"start.brush\", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on(\"interrupt.brush end.brush\", function(event) { emitter(this, arguments).end(event); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start().brush().end();\n          });\n    }\n  };\n\n  brush.clear = function(group) {\n    brush.move(group, null);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit(\"start\", event, mode);\n      else this.emit(\"brush\", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit(\"brush\", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    if (type === \"overlay\") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move();\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n      if (keys) view\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move();\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n", "export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, \u00B1Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n", "import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n", "export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n", "export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n", "// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n", "// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n", "import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n", "import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n", "import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n", "export default function(x) {\n  return x;\n}\n", "import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\u00B5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"\u2212\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer \u201Cvalue\u201D part that can be\n        // grouped, and fractional or exponential \u201Csuffix\u201D part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n", "import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n", "import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n", "import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n", "import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n", "export default Math.random;\n", "import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomUniform(source) {\n  function randomUniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return source() * max + min;\n    };\n  }\n\n  randomUniform.source = sourceRandomUniform;\n\n  return randomUniform;\n})(defaultSource);\n", "import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomInt(source) {\n  function randomInt(min, max) {\n    if (arguments.length < 2) max = min, min = 0;\n    min = Math.floor(min);\n    max = Math.floor(max) - min;\n    return function() {\n      return Math.floor(source() * max + min);\n    };\n  }\n\n  randomInt.source = sourceRandomInt;\n\n  return randomInt;\n})(defaultSource);\n", "import defaultSource from \"./defaultSource.js\";\n\nexport default (function sourceRandomNormal(source) {\n  function randomNormal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = source() * 2 - 1;\n        y = source() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  randomNormal.source = sourceRandomNormal;\n\n  return randomNormal;\n})(defaultSource);\n", "// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst mul = 0x19660D;\nconst inc = 0x3C6EF35F;\nconst eps = 1 / 0x100000000;\n\nexport default function lcg(seed = Math.random()) {\n  let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;\n  return () => (state = mul * state + inc | 0, eps * (state >>> 0));\n}\n", "export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n", "export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function number(x) {\n  return +x;\n}\n", "import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n", "import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n", "import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n", "export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n", "import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar c = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n}\n", "import colors from \"../colors.js\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n", "export function Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\nTransform.prototype = {\n  constructor: Transform,\n  scale: function(k) {\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n  }\n};\n\nexport var identity = new Transform(1, 0, 0);\n\ntransform.prototype = Transform.prototype;\n\nexport default function transform(node) {\n  while (!node.__zoom) if (!(node = node.parentNode)) return identity;\n  return node.__zoom;\n}\n", "import * as d3 from 'd3'\n\n/**\n * @module utils/MathUtils\n */\n\n/**\n * Generates a random float in [min, max)\n *\n * @param {number} min minimum\n * @param {number} max maximum\n * @returns {number} random float\n */\nexport function randFloat (min = 0, max = 1) {\n  return Math.random() * (max - min) + min\n}\n\n/**\n * Returns a random element from the given array.\n *\n * @param {Array} array an array\n * @returns {any} random element from the array\n */\nexport function choose (array) {\n  const index = d3.randomInt(0, array.length)()\n  return array[index]\n}\n\n/**\n * Shortcut for Math.max(minValue, Math.min(maxValue, value))\n *\n * @param {number} value value\n * @param {number} minValue lower limit\n * @param {number} maxValue upper limit\n * @returns {number} clipped number\n */\nexport function clipValue (value, minValue, maxValue) {\n  return Math.max(minValue, Math.min(maxValue, value))\n}\n\n/**\n * Rounds a number to a given number of decimals\n *\n * @param {number} number a number\n * @param {number} n number of digits\n * @returns {number} rounded number\n */\nexport function roundToNDecimals (number, n) {\n  return +number.toFixed(n)\n}\n\n/**\n * Swaps two numbers if the first is larger than the second\n *\n * @param {number} x a number\n * @param {number} y a number\n * @returns {number[]} array with the smaller number first\n */\nexport function swapSoSmallerFirst (x, y) {\n  if (x <= y) {\n    return [x, y]\n  }\n  return [y, x]\n}\n\n/**\n * Counts the number of 1s in a binary number, e.g 100101 has 3 1s\n *\n * @see https://prismoskills.appspot.com/lessons/Bitwise_Operators/Count_ones_in_an_integer.jsp\n * @param {number} integer an integer number\n * @returns {number} number of 1s\n */\nexport function countOnesOfBinary (integer) {\n  let count = 0\n  while (integer !== 0) {\n    // eslint-disable-next-line no-bitwise\n    integer = integer & (integer - 1)\n    count++\n  }\n  return count\n}\n\n/**\n * Local maxima are found by looking at entries that are higher than their left\n * and right neighbor, or higher than their only neighbor if they are at the\n * boundary.\n * IMPORTANT: does not find plateaus\n *\n * @param {number[]} array array\n * @returns {number[]} array with indices of maxima\n */\nexport function findLocalMaxima (array) {\n  if (array.length <= 1) { return [] }\n  if (array.length === 2) {\n    if (array[0] > array[1]) { return [0] }\n    if (array[1] > array[0]) { return [1] }\n    return []\n  }\n  // General case with 3 or more\n  const maximaIndices = []\n  if (array[0] > array[1]) {\n    maximaIndices.push(0)\n  }\n  let last = array[0]\n  let current = array[1]\n  for (let index = 1; index < array.length - 1; index++) {\n    const next = array[index + 1]\n    if (current > last && current > next) {\n      maximaIndices.push(index)\n    }\n    last = current\n    current = next\n  }\n  const lastIndex = array.length - 1\n  if (array[lastIndex] > array[lastIndex - 1]) {\n    maximaIndices.push(array.length - 1)\n  }\n  return maximaIndices\n}\n", "import { min } from 'd3'\r\nimport Note from './Note.js'\r\nimport GuitarNote from './GuitarNote.js'\r\nimport { clipValue } from '../utils/MathUtils.js'\r\n\r\n/**\r\n * This class represents an array of note objects.\r\n * It can be used to simplify operations on a track.\r\n *\r\n * @example\r\n *   const notes = [\r\n *       // Some Note objects\r\n *   ];\r\n *   const noteArr = new NoteArray(notes)\r\n *       // Add more notes (all notes will be sorted by time by default after this)\r\n *       .addNotes([])\r\n *       // Scale all note's sart and end time to make a track slower or faster\r\n *       .scaleTime(0.5)\r\n *       // Do more ...\r\n *       // This class also mirrors many functions from the Array class\r\n *       .sort(sortFunction).filter(filterFunction).map(mapFunction).slice(0, 20)\r\n *\r\n *   // Get Note objects back in a simple Array\r\n *   const transformedNotes = noteArr.getNotes();\r\n *   // [Note, Note, Note, ...]\r\n *\r\n *   // Or use an iterator\r\n *   for (const note of noteArr) {\r\n *       console.log(note);\r\n *   }\r\n */\r\nclass NoteArray {\r\n  /**\r\n       * Creates a new NoteArray,\r\n       * will make a copy of the passed array and cast all notes\r\n       *\r\n       * @param {Note[]} [notes=[]] notes\r\n       * @param {boolean} [reUseNotes=false] if true, will directly use the passed notes.\r\n       *      This can be dangerous if you do not want them to change.\r\n       */\r\n  constructor (notes = [], reUseNotes = false) {\r\n    if (reUseNotes) {\r\n      this._notes = notes\r\n    } else {\r\n      // Parse notes\r\n      this._notes = notes.map(d => {\r\n        if (d.string !== undefined && d.fret !== undefined) {\r\n          return GuitarNote.from(d)\r\n        }\r\n        return Note.from(d)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n       * Returns a simple array with all Note objects.\r\n       *\r\n       * @returns {Note[]} array with Note objects\r\n       * @example <caption>Getting notes as simple Note[]</caption>\r\n       *      const na = new NoteArray(someNotes);\r\n       *      const notes = na.getNotes();\r\n       * @example <caption>Using an iterator instead</caption>\r\n       *      const na = new NoteArray(someNotes);\r\n       *      for (const note of na) {\r\n       *          console.log(note);\r\n       *      }\r\n       *      // Or copy all Notes to an array with\r\n       *      const array = [...na];\r\n       */\r\n  getNotes () {\r\n    return this._notes\r\n  }\r\n\r\n  /**\r\n       * Overwrite the NoteArray's notes with another Array of Notes\r\n       *\r\n       * @param {Note[]} notes notes\r\n       * @returns {NoteArray} itself\r\n       */\r\n  setNotes (notes) {\r\n    this._notes = notes\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Makes this class iterable\r\n       *\r\n       * @yields {Note} note\r\n       * @example <caption>Using an iterator for NoteArray</caption>\r\n       *      const na = new NoteArray(someNotes);\r\n       *      for (const note of na) {\r\n       *          console.log(note);\r\n       *      }\r\n       */\r\n  * [Symbol.iterator] () {\r\n    for (const note of this._notes) {\r\n      yield note\r\n    }\r\n  }\r\n\r\n  /**\r\n       * Appends notes to this NoteArray\r\n       *\r\n       * @param {Note[]} notes notes\r\n       * @param {boolean} sort iff ture, sorts notes by start timeafter adding\r\n       *      the new ones (default:true)\r\n       * @returns {NoteArray} itself\r\n       */\r\n  addNotes (notes, sort = true) {\r\n    this._notes = [...this._notes, ...notes]\r\n    if (sort) {\r\n      this.sortByTime()\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Adds the notes from another NoteArray to this NoteArray\r\n       * IMPORTANT: this does not change the notes or sort them!\r\n       * Take a look at NoteArray.append() if you want to extend\r\n       * a track at its end.\r\n       *\r\n       * @param {NoteArray} noteArray another NoteArray\r\n       * @returns {NoteArray} itself\r\n       */\r\n  concat (noteArray) {\r\n    this._notes = [...this._notes, ...noteArray._notes]\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Appends notes to the end of this NoteArray, after shifting them by its\r\n       * duration. Set gap to something != 0 to create a gap or overlap.\r\n       *\r\n       * @param {NoteArray} noteArray another NoteArray\r\n       * @param {number} gap in seconds between the two parts\r\n       * @returns {NoteArray} itself\r\n       */\r\n  append (noteArray, gap = 0) {\r\n    const duration = this.getDuration()\r\n    const clone = noteArray.clone()\r\n    clone.shiftTime(duration + gap)\r\n    this._notes = [...this._notes, ...clone._notes]\r\n    this.sortByTime()\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Repeats the notes of this array by concatenating a time-shifted copy\r\n       *\r\n       * @param {number} times number of times to repeat it\r\n       * @returns {NoteArray} a new NoteArray with the repeated note sequence\r\n       */\r\n  repeat (times) {\r\n    const result = this.clone()\r\n    if (times < 1) {\r\n      return new NoteArray()\r\n    }\r\n    if (times === 1) {\r\n      return result\r\n    }\r\n    const copy = this.clone()\r\n    const duration = this.getDuration()\r\n    for (let index = 1; index < times; index++) {\r\n      // Shift notes in time\r\n      copy.shiftTime(duration)\r\n      // Result is a NoteArray so use .concat\r\n      result.concat(copy)\r\n    }\r\n    return result\r\n  }\r\n\r\n  /**\r\n       * Returns the number of Note objects in this NoteArray\r\n       *\r\n       * @returns {number} note count\r\n       */\r\n  length () {\r\n    return this._notes.length\r\n  }\r\n\r\n  /**\r\n       * Returns the start time of the earliest note in this NoteArray\r\n       *\r\n       * @returns {number} start time\r\n       */\r\n  getStartTime () {\r\n    return min(this._notes, d => d.start)\r\n  }\r\n\r\n  /**\r\n       * Returns the duration of this note array in seconds from 0 to the end of\r\n       * the latest note.\r\n       *\r\n       * @returns {number} duration\r\n       */\r\n  getDuration () {\r\n    let duration = 0\r\n    for (const note of this._notes) {\r\n      const noteEnd = note.end === null ? note.start : note.end\r\n      if (noteEnd > duration) {\r\n        duration = noteEnd\r\n      }\r\n    }\r\n    return duration\r\n  }\r\n\r\n  /**\r\n       * Scales the time of each note by factor\r\n       *\r\n       * @param {number} factor factor\r\n       * @returns {NoteArray} itself\r\n       */\r\n  scaleTime (factor) {\r\n    this._notes = this._notes.map(n => n.scaleTime(factor))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Adds the speicifed number of seconds to each note\r\n       *\r\n       * @param {number} addedSeconds time to add in seconds\r\n       * @returns {NoteArray} itself\r\n       */\r\n  shiftTime (addedSeconds) {\r\n    this._notes = this._notes.map(n => n.shiftTime(addedSeconds))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Moves all notes s.t. the first starts at <start>\r\n       * Will sort the notes by start time.\r\n       *\r\n       * @param {number} startTime the new start time for the earliest note\r\n       * @returns {NoteArray} itself\r\n       */\r\n  shiftToStartAt (startTime) {\r\n    this.sortByTime()\r\n    const firstNoteStart = this._notes[0].start\r\n    const offset = firstNoteStart - startTime\r\n    this._notes.forEach(n => {\r\n      n.start -= offset\r\n      if (n.end !== null) {\r\n        n.end -= offset\r\n      }\r\n    })\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Similar to Array.forEach\r\n       *\r\n       * @param {Function} func a function\r\n       * @returns {NoteArray} this\r\n       */\r\n  forEach (func) {\r\n    this._notes.forEach(\r\n      (element, index, array) => func(element, index, array)\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Sorts the notes\r\n       *\r\n       * @param {Function} sortFunction sort function, e.g. (a, b)=>a.start-b.start\r\n       * @returns {NoteArray} itself\r\n       */\r\n  sort (sortFunction) {\r\n    this._notes = this._notes.sort(sortFunction)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Sorts the notes by start time\r\n       *\r\n       * @returns {NoteArray} itself\r\n       */\r\n  sortByTime () {\r\n    this._notes = this._notes.sort((a, b) => a.start - b.start)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Maps the notes using some mapping function\r\n       *\r\n       * @param {Function} mapFunction mapping function with same signature as\r\n       *      Array.map()\r\n       * @returns {NoteArray} itself\r\n       */\r\n  map (mapFunction) {\r\n    this._notes = this._notes.map(\r\n      (element, index, array) => mapFunction(element, index, array)\r\n    )\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Slices the notes by index, like Array.slice()\r\n       *\r\n       * @param {number} start start index\r\n       * @param {number} end end index\r\n       * @returns {NoteArray} itself\r\n       */\r\n  slice (start, end) {\r\n    this._notes = this._notes.slice(start, end)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Slices the notes by time.\r\n       * The modes 'end' and 'contained' will remove all notes with end === null!\r\n       * Notes will not be changed, e.g. start time will remain the same.\r\n       *\r\n       * @param {number} startTime start of the filter range in seconds\r\n       * @param {number} endTime end of the filter range in seconds (exclusive)\r\n       * @param {string} [mode=contained] controls which note time to consider,\r\n       *      one of:\r\n       *      - start: note.start must be inside range\r\n       *      - end: note.end must be inside range\r\n       *      - contained: BOTH note.start and note.end must be inside range\r\n       *      - touched: EITHER start or end (or both) must be inside range)\r\n       *      - touched-included: like touched, but also includes notes where\r\n       *          neither start nor end inside range, but range is completely\r\n       *          inside the note\r\n       *      (contained is default)\r\n       * @returns {NoteArray} itself\r\n       * @throws {'Invalid slicing mode'} When slicing mode is not one of the\r\n       *      above values\r\n       */\r\n  sliceTime (startTime, endTime, mode = 'contained') {\r\n    const start = startTime\r\n    const end = endTime\r\n    let filterFunc\r\n    if (mode === 'start') {\r\n      filterFunc = n => n.start >= start && n.start < end\r\n    } else if (mode === 'end') {\r\n      filterFunc = n => n.end !== null && n.end >= start && n.end < end\r\n    } else if (mode === 'contained') {\r\n      filterFunc = n => n.end !== null && n.start >= start && n.end < end\r\n    } else if (mode === 'touched') {\r\n      filterFunc = n =>\r\n        (n.start >= start && n.start <= end) ||\r\n                (n.end !== null && n.end >= start && n.end <= end)\r\n    } else if (mode === 'touched-included') {\r\n      filterFunc = n =>\r\n      // like touched\r\n        (n.start >= start && n.start <= end) ||\r\n                (n.end !== null && n.end >= start && n.end <= end) ||\r\n                // filter range inside note range\r\n                (n.end !== null && n.start <= start && n.end >= end)\r\n    } else {\r\n      throw new Error('Invalid slicing mode')\r\n    }\r\n    this._notes = this._notes.filter(filterFunc)\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Slices this NoteArray into slices by the given times. Will not return\r\n       * NoteArrays but simple Note[][], where each item contains all notes of one\r\n       * time slice. Do not include 0, it will be assumed as first time to slice.\r\n       * To make sure notes are not contained twice in different slices use the\r\n       * mode 'start'.\r\n       *\r\n       * @param {number[]} times points of time at which to slice (in seconds)\r\n       * @param {string} mode see NoteArray.sliceTime()\r\n       * @returns {Note[][]} time slices\r\n       * @param {boolean} [reUseNotes=false] if true, will not clone notes.\r\n       *      This can be dangerous if you do not want them to change.\r\n       * @example\r\n       *      // Slice into 1 second slices\r\n       *      const slices = noteArray.sliceAtTimes([1, 2, 3], 'start)\r\n       */\r\n  sliceAtTimes (times, mode, reUseNotes = false) {\r\n    if (times.length === 0) {\r\n      return [this._notes]\r\n    }\r\n    // Make sure notes at the end are also in a slice\r\n    const duration = this.getDuration()\r\n    if (Math.max(...times) <= duration) {\r\n      times.push(duration + 1)\r\n    }\r\n    const slices = []\r\n    let lastTime = 0\r\n    for (const time of times) {\r\n      slices.push(\r\n        // this.clone()\r\n        new NoteArray(this._notes, reUseNotes)\r\n          .sliceTime(lastTime, time, mode)\r\n          .getNotes()\r\n      )\r\n      lastTime = time\r\n    }\r\n    return slices\r\n  }\r\n\r\n  /**\r\n       * Segments the NoteArray into smaller ones at times where no note occurs\r\n       * for a specified amount of time.\r\n       * This method is useful for segmenting a recording session into separate\r\n       * songs, riffs, licks, ...\r\n       *\r\n       * @param {number} gapDuration duration of seconds for a gap to be used as\r\n       *      segmenting time\r\n       * @param {'start-start'|'end-start'} mode gaps can either be considered as\r\n       *      the maximum time between two note's starts or the end of the first\r\n       *      and the start of the second note\r\n       * @returns {Note[][]} segments\r\n       */\r\n  segmentAtGaps (gapDuration, mode) {\r\n    if (this._notes.length < 2) {\r\n      return [this._notes]\r\n    }\r\n    if (mode === 'start-start') {\r\n      const notes = this.clone().sortByTime().getNotes()\r\n      const cuts = []\r\n      for (let index = 1; index < notes.length; index++) {\r\n        if (notes[index].start - notes[index - 1].start >= gapDuration) {\r\n          cuts.push(notes[index].start)\r\n        }\r\n      }\r\n      return this.sliceAtTimes(cuts, 'start')\r\n    } else {\r\n      // Get blocks of occupied time in the NoteArray's duration\r\n      const occupiedTimes = []\r\n      // TODO: can probably be made faster in the future\r\n      for (const note of this._notes) {\r\n        const { start, end } = note\r\n        // Check for collision\r\n        const collisions = []\r\n        for (let index = 0; index < occupiedTimes.length; index++) {\r\n          const [s, e] = occupiedTimes[index]\r\n          if (\r\n            (s >= start && s <= end) ||\r\n                        (e >= start && e <= end)\r\n          ) {\r\n            occupiedTimes.splice(index, 1)\r\n            collisions.push([s, e])\r\n          }\r\n        }\r\n        if (collisions.length === 0) {\r\n          // Just add note time span\r\n          occupiedTimes.push([start, end])\r\n        } else {\r\n          // Merge\r\n          const newStart = Math.min(start, ...collisions.map(d => d[0]))\r\n          const newEnd = Math.max(end, ...collisions.map(d => d[1]))\r\n          occupiedTimes.push([newStart, newEnd])\r\n        }\r\n      }\r\n      // Gaps are just between two following blocks of occupied time\r\n      if (occupiedTimes.length === 1) {\r\n        // One block, so no gaps\r\n        return [this._notes]\r\n      }\r\n      const cuts = []\r\n      for (let index = 1; index < occupiedTimes.length; index++) {\r\n        const currentStart = occupiedTimes[index][0]\r\n        const lastEnd = occupiedTimes[index - 1][1]\r\n        if (currentStart - lastEnd >= gapDuration) {\r\n          cuts.push(currentStart)\r\n        }\r\n      }\r\n      return this.sliceAtTimes(cuts, 'start')\r\n    }\r\n  }\r\n\r\n  /**\r\n       * Segments the NoteArray into Arrays of Notes at given indices\r\n       *\r\n       * @param {number[]} indices indices\r\n       * @returns {Note[][]} segments\r\n       * @example <caption>Get notes in partions of 4</caption>\r\n       *      const noteGroups = myNoteArray.segmentAtIndices([4, 8, 12, 16, 20]);\r\n       *      // noteGroups = [\r\n       *      //     Array(4),\r\n       *      //     Array(4),\r\n       *      //     Array(4),\r\n       *      // ]\r\n       */\r\n  segmentAtIndices (indices) {\r\n    const segments = []\r\n    let lastIndex = 0\r\n    for (const index of indices) {\r\n      segments.push(this._notes.slice(lastIndex, index))\r\n      lastIndex = index\r\n    }\r\n    return segments\r\n  }\r\n\r\n  /**\r\n       * Filters the NoteArray like you would filter via Array.filter().\r\n       *\r\n       * @param {Function} filterFunction filter function, same signature as\r\n       *      Array.filter()\r\n       * @returns {NoteArray} itself\r\n       * @example\r\n       *      // Only keep notes longer than 1 second\r\n       *      const filtered = noteArray.filter(note=>note.getDuration()>1);\r\n       */\r\n  filter (filterFunction) {\r\n    this._notes = this._notes.filter((element, index, array) => filterFunction(element, index, array))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Filters by pitch, keeping only pitches specified in <pitches>\r\n       *\r\n       * @param {number[]|Set<number>} pitches array or Set of pitches to keep\r\n       * @returns {NoteArray} itself\r\n       */\r\n  filterPitches (pitches) {\r\n    if (!(pitches instanceof Set)) {\r\n      pitches = new Set(pitches)\r\n    }\r\n    this._notes = this._notes.filter(n => pitches.has(n.pitch))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Transposes each note by <steps> semitones, will clip pitches to [0, 127]\r\n       *\r\n       * @param {number} steps number of semitones to transpose, can be negative\r\n       * @returns {NoteArray} itself\r\n       */\r\n  transpose (steps) {\r\n    this._notes = this._notes.map(n => Note.from({\r\n      ...n,\r\n      pitch: clipValue(n.pitch + steps, 0, 127)\r\n    }))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Will set the octave of all notes to -1.\r\n       * This might cause two notes to exist at the same time and pitch!\r\n       *\r\n       * @returns {NoteArray} itself\r\n       */\r\n  removeOctaves () {\r\n    this._notes = this._notes.map(note => Note.from({\r\n      ...note,\r\n      pitch: note.pitch % 12\r\n    }))\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Reverses the note array, such that it can be played backwards.\r\n       *\r\n       * @returns {NoteArray} itself\r\n       */\r\n  reverse () {\r\n    // Update note start and end times\r\n    const duration = this.getDuration()\r\n    this._notes = this._notes.map(n => {\r\n      const newNote = n.clone()\r\n      newNote.start = duration - n.end\r\n      newNote.end = newNote.start + n.getDuration()\r\n      return newNote\r\n    })\r\n    // Sort by time\r\n    this.sortByTime()\r\n    return this\r\n  }\r\n\r\n  /**\r\n       * Returns true if this NoteArray and otherNoteArray have equal attributes.\r\n       *\r\n       * @param {NoteArray} otherNoteArray another NoteArray\r\n       * @returns {boolean} true if equal\r\n       */\r\n  equals (otherNoteArray) {\r\n    if (!(otherNoteArray instanceof NoteArray)) {\r\n      return false\r\n    }\r\n    const notes = otherNoteArray.getNotes()\r\n    if (this._notes.length !== notes.length) {\r\n      return false\r\n    }\r\n    for (const [index, note] of notes.entries()) {\r\n      if (!this._notes[index].equals(note)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n       * Deep clone, all contained notes are cloned as well.\r\n       *\r\n       * @returns {NoteArray} clone\r\n       */\r\n  clone () {\r\n    return new NoteArray(this._notes)\r\n  }\r\n}\r\n\r\nexport default NoteArray\r\n", "/**\r\n * @module utils/ArrayUtils\r\n */\r\n\r\nimport * as d3 from 'd3'\r\n\r\n/**\r\n * Shallow compares two arrays\r\n *\r\n * @param {Array} a an array\r\n * @param {Array} b another array\r\n * @returns {boolean} true iff equal\r\n */\r\nexport function arrayShallowEquals (a, b) {\r\n  if (a.length !== b.length) {\r\n    return false\r\n  }\r\n  for (const [index, element] of a.entries()) {\r\n    if (element !== b[index]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Checks if two arrays contain the same elements,\r\n * ignoring their ordering in each array.\r\n *\r\n * @param {Array} a an array\r\n * @param {Array} b another array\r\n * @param {boolean} checkLength also checks if arrays have the same length\r\n * @returns {boolean} true iff arrays contain same elements\r\n */\r\nexport function arrayHasSameElements (a, b, checkLength = true) {\r\n  if (checkLength && a.length !== b.length) {\r\n    return false\r\n  }\r\n  const setA = new Set(a)\r\n  const setB = new Set(b)\r\n  for (const element of setA) {\r\n    if (!setB.has(element)) {\r\n      return false\r\n    }\r\n  }\r\n  for (const element of setB) {\r\n    if (!setA.has(element)) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Jaccard index calulates the similarity of the sets as the size of the set\r\n * interaction divided by the size of the set union:\r\n * jackard_index = |intersection| / |union|\r\n *\r\n * @see https://en.wikipedia.org/wiki/Jaccard_index\r\n * @param {number[]} set1 set 1\r\n * @param {number[]} set2 set 2\r\n * @returns {number} similarity in [0, 1]\r\n */\r\nexport function jaccardIndex (set1, set2) {\r\n  if (set1.length === 0 && set2.length === 0) {\r\n    return 1\r\n  }\r\n  return d3.intersection(set1, set2).size / d3.union(set1, set2).size\r\n}\r\n\r\n/**\r\n * Kendall Tau distance\r\n *\r\n * @see https://en.wikipedia.org/wiki/Kendall_tau_distance\r\n * @todo naive implementation, can be sped up with hints on Wikipedia,\r\n *    see also https://stackoverflow.com/questions/6523712/calculating-the-number-of-inversions-in-a-permutation/6523781#6523781\r\n * @param {number[]} ranking1 a ranking, i.e. for each entry the rank\r\n * @param {number[]} ranking2 a ranking, i.e. for each entry the rank\r\n * @param {boolean} [normalize=true] normalize to [0, 1]?\r\n * @returns {number} Kendall tau distance\r\n * @throws {'Ranking length must be equal'} if rankings don't have euqal length\r\n */\r\nexport function kendallTau (ranking1, ranking2, normalize = true) {\r\n  if (ranking1.length !== ranking2.length) {\r\n    throw new Error('Ranking length must be equal')\r\n  }\r\n  if (ranking1.length === 0) {\r\n    return 0\r\n  }\r\n  let inversions = 0\r\n  const n = ranking1.length\r\n  for (let a = 0; a < n; a++) {\r\n    for (let b = a + 1; b < n; b++) {\r\n      const r1smaller = ranking1[a] < ranking1[b]\r\n      const r2smaller = ranking2[a] < ranking2[b]\r\n      if (r1smaller !== r2smaller) {\r\n        inversions++\r\n      }\r\n    }\r\n  }\r\n  if (normalize) {\r\n    inversions /= n * (n - 1) / 2\r\n  }\r\n  return inversions\r\n}\r\n\r\n/**\r\n * Removes duplicates from an Array by converting to a Set and back\r\n *\r\n * @param {Array} array an array\r\n * @returns {Array} array without duplicates\r\n */\r\nexport function removeDuplicates (array) {\r\n  return [...new Set(array)]\r\n}\r\n\r\n/**\r\n * Checks whether the array a contains the array b, i.e. whether the first\r\n * b.length elements are the same.\r\n *\r\n * @todo rename to arrayStartsWithArray\r\n * @param {Array} a an array\r\n * @param {Array} b a shorter array\r\n * @returns {boolean} true iff a contains b\r\n */\r\nexport function arrayContainsArray (a, b) {\r\n  if (a.length < b.length) {\r\n    return false\r\n  }\r\n  for (const [index, element] of b.entries()) {\r\n    if (a[index] !== element) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Compares a slice of a with a slice of b.\r\n * Slices start at startA and startB and have the same length\r\n *\r\n * @param {Array} a an Array\r\n * @param {Array} b an Array\r\n * @param {number} length slice length\r\n * @param {number} [startA=0] start index for the slice in a to compare\r\n * @param {number} [startB=0] start index for the slice in b to compare\r\n * @returns {boolean} true if slices are equal\r\n * @throws {'undefined length'} length is undefined\r\n * @throws {'start < 0'} when start is negative\r\n */\r\nexport function arraySlicesEqual (a, b, length, startA = 0, startB = 0) {\r\n  if (length === null || length === undefined) {\r\n    throw new Error('undefined length')\r\n  }\r\n  if (startA < 0 || startB < 0) {\r\n    throw new Error('start < 0')\r\n  }\r\n  if (a.length < startA + length || b.length < startB + length) {\r\n    // Array(s) too small for slicing with this start and length\r\n    return false\r\n  }\r\n  for (let offset = 0; offset < length; offset++) {\r\n    if (a[startA + offset] !== b[startB + offset]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Finds an array in another array, only shallow comparison\r\n *\r\n * @param {Array} haystack array to search in\r\n * @param {Array} needle array to search for\r\n * @param {number} [startIndex=0] index from which to start searching\r\n * @returns {number} index or -1 when not found\r\n */\r\nexport function arrayIndexOf (haystack, needle, startIndex = 0) {\r\n  if (needle.length === 0) { return -1 }\r\n  for (\r\n    let index = startIndex;\r\n    index < haystack.length - needle.length + 1;\r\n    ++index\r\n  ) {\r\n    if (haystack[index] === needle[0]) {\r\n      let found = true\r\n      for (let offset = 1; offset < needle.length; ++offset) {\r\n        if (haystack[index + offset] !== needle[offset]) {\r\n          found = false\r\n          break\r\n        }\r\n      }\r\n      if (found) {\r\n        return index\r\n      }\r\n    }\r\n  }\r\n  return -1\r\n}\r\n\r\n/**\r\n * Returns the maximum numerical value from an array of arrays with arbitrary\r\n * depth and structure.\r\n *\r\n * @param {Array} array array\r\n * @returns {number} maximum value\r\n */\r\nexport function getArrayMax (array) {\r\n  return d3.max(array.flat(Number.POSITIVE_INFINITY))\r\n}\r\n\r\n/**\r\n * Normalizes by dividing all entries by the maximum.\r\n * Only for positive values!\r\n *\r\n * @param {Array} array nD array with arbitrary depth and structure\r\n * @returns {Array} normalized array\r\n */\r\nexport function normalizeNdArray (array) {\r\n  const max = d3.max(array.flat(Number.POSITIVE_INFINITY))\r\n  const normalize = (array_, maxValue) =>\r\n    array_.map((d) => {\r\n      return d.length !== undefined ? normalize(d, maxValue) : d / maxValue\r\n    })\r\n  return normalize(array, max)\r\n}\r\n\r\n/**\r\n * Assumes same shape of matrices.\r\n *\r\n * @param {number[][]} matrixA a matrix\r\n * @param {number[][]} matrixB a matrix\r\n * @returns {number} Euclidean distance of the two matrices\r\n */\r\nexport function euclideanDistance (matrixA, matrixB) {\r\n  const valuesA = matrixA.flat()\r\n  const valuesB = matrixB.flat()\r\n  const diffs = valuesA.map((d, i) => d - valuesB[i])\r\n  return Math.hypot(...diffs)\r\n}\r\n\r\n/**\r\n * Stringifies a 2D array / matrix for logging onto the console.\r\n *\r\n * @param {any[][]} matrix the matrix\r\n * @param {string} colSeparator column separator\r\n * @param {string} rowSeparator row separator\r\n * @param {Function} formatter formatting for each element\r\n * @returns {string} stringified matrix\r\n */\r\nexport function formatMatrix (matrix, colSeparator = ', ', rowSeparator = '\\n', formatter) {\r\n  if (!matrix || matrix.length === 0) { return '' }\r\n  if (formatter) {\r\n    matrix = matrix.map(row => row.map(value => formatter(value)))\r\n  }\r\n  return matrix.map(row => row.join(colSeparator)).join(rowSeparator)\r\n}\r\n\r\n/**\r\n * Returns the value in array that is closest to value.\r\n * Array MUST be sorted ascending.\r\n *\r\n * @param {Array} array array\r\n * @param {*} value value\r\n * @param {Function} accessor accessor\r\n * @returns {*} value in array closest to value\r\n */\r\nexport function binarySearch (array, value, accessor = d => d) {\r\n  // Handle short arrays\r\n  if (array.length <= 3) {\r\n    let closest = null\r\n    let diff = Number.POSITIVE_INFINITY\r\n    for (const element of array) {\r\n      const value_ = accessor(element)\r\n      const diff2 = Math.abs(value - value_)\r\n      if (diff2 < diff) {\r\n        closest = element\r\n        diff = diff2\r\n      }\r\n    }\r\n    return closest\r\n  }\r\n  // Split longer array in two for binary search\r\n  const pivotPosition = Math.floor(array.length / 2)\r\n  const pivotElement = array[pivotPosition]\r\n  const pivotValue = accessor(pivotElement)\r\n  if (value === pivotValue) {\r\n    return pivotElement\r\n  }\r\n  if (value < pivotValue) {\r\n    return binarySearch(array.slice(0, pivotPosition + 1), value, accessor)\r\n  }\r\n  if (value > pivotValue) {\r\n    return binarySearch(array.slice(pivotPosition - 1), value, accessor)\r\n  }\r\n}\r\n\r\n/**\r\n * Finds streaks of values in an array.\r\n *\r\n * @param {Array} values array\r\n * @param {Function} accessor value to compare\r\n * @param {Function} equality comparator for equality of two values\r\n * @returns {object[]} {startIndex, endIndex, length}[]\r\n * @example\r\n *   const arr = [1, 1, 2, 3, 3, 3];\r\n *   const streaks = findStreaks(arr);\r\n */\r\nexport function findStreaks (\r\n  values,\r\n  accessor = (d) => d,\r\n  equality = (a, b) => a === b\r\n) {\r\n  let startIndex = 0\r\n  const result = []\r\n  let startValue = accessor(values[0])\r\n  for (const [index, value] of values.entries()) {\r\n    const v = accessor(value)\r\n    if (!equality(startValue, v)) {\r\n      result.push({\r\n        startIndex,\r\n        endIndex: index - 1,\r\n        length: index - startIndex\r\n      })\r\n      startIndex = index\r\n      startValue = v\r\n    }\r\n  }\r\n  // Finish last streak\r\n  if (values.length > 0) {\r\n    result.push({\r\n      startIndex,\r\n      endIndex: values.length - 1,\r\n      length: values.length - startIndex\r\n    })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * For each element in a sequence, finds the lowest index where an equal element\r\n * occurs.\r\n *\r\n * @param {Array} sequence an Array\r\n * @param {Function} equals euqality function\r\n * @returns {number[]} result\r\n */\r\nexport function findRepeatedIndices (sequence, equals = (a, b) => a === b) {\r\n  return sequence.map((element) => {\r\n    for (const [index2, element2] of sequence.entries()) {\r\n      if (equals(element, element2)) {\r\n        return index2\r\n      }\r\n    }\r\n    return null\r\n  })\r\n}\r\n", "import NoteArray from './NoteArray.js'\r\nimport { arrayShallowEquals } from '../utils/ArrayUtils.js'\r\n\r\n/**\r\n * Class for storing recorded notes alongside meta information.\r\n */\r\nclass Recording extends NoteArray {\r\n  /**\r\n     * Creates a new Recording\r\n     *\r\n     * @param {string} name name if the song\r\n     * @param {Date} date date of the recording\r\n     * @param {Note[]} notes array of Note objects\r\n     * @param {number} [speed=1] relative speed compared to ground truth,\r\n     *      e.g. 0.5 for half as fast\r\n     * @param {number} [selectedTrack=0] track number of the ground truth to which\r\n     *      this recording belongs\r\n     * @param {number[]|null} [timeSelection=null] time selection of the ground\r\n     *      truth to which this recording belongs, or null if full duration\r\n     * @param {string} [comment=''] a free-text comment for the user to annotate\r\n     *      the recording\r\n     */\r\n  constructor (name, date, notes, speed = 1, selectedTrack = 0, timeSelection = null, comment = '') {\r\n    super(notes)\r\n    this.name = name\r\n    this.date = date\r\n    // Save formatted date for faster access\r\n    this.dateString = date.toISOString()\r\n      .slice(0, 19)\r\n      .replace('T', ' ')\r\n    this.speed = +speed\r\n    this.selectedTrack = +selectedTrack\r\n    this.timeSelection = timeSelection\r\n    this.comment = comment\r\n    this.sortByTime()\r\n  }\r\n\r\n  /**\r\n     * Returns a copy of the Note object\r\n     *\r\n     * @returns {Recording} new recording\r\n     */\r\n  clone () {\r\n    return new Recording(\r\n      this.name,\r\n      this.date,\r\n      this.getNotes().map(d => d.clone()),\r\n      this.speed,\r\n      this.selectedTrack,\r\n      this.timeSelection === null ? null : [...this.timeSelection],\r\n      this.comment\r\n    )\r\n  }\r\n\r\n  /**\r\n     * Returns true if this Recording and otherRecording have equal attributes.\r\n     *\r\n     * @param {Recording} otherRecording another Recording\r\n     * @returns {boolean} true if equal\r\n     */\r\n  equals (otherRecording) {\r\n    if (!(otherRecording instanceof Recording)) { return false }\r\n    if (this.name !== otherRecording.name) { return false }\r\n    if (this.date.getTime() !== otherRecording.date.getTime()) { return false }\r\n    if (this.speed !== otherRecording.speed) { return false }\r\n    if (this.selectedTrack !== otherRecording.selectedTrack) { return false }\r\n    if (this.timeSelection !== otherRecording.timeSelection) {\r\n      if (this.timeSelection === null || otherRecording.timeSelection === null) {\r\n        return false\r\n      }\r\n      if (!arrayShallowEquals(this.timeSelection, otherRecording.timeSelection)) {\r\n        return false\r\n      }\r\n    }\r\n    // Below is the same as NoteArray\r\n    const notes1 = this.getNotes()\r\n    const notes2 = otherRecording.getNotes()\r\n    if (notes1.length !== notes2.length) {\r\n      return false\r\n    }\r\n    for (const [index, element] of notes1.entries()) {\r\n      if (!element.equals(notes2[index])) {\r\n        return false\r\n      }\r\n    }\r\n    if (this.comment !== otherRecording.comment) { return false }\r\n    return true\r\n  }\r\n\r\n  /**\r\n     * Turns the recoring into a simple object with the same properties\r\n     *\r\n     * @returns {object} simple object representation of the recording\r\n     */\r\n  toSimpleObject () {\r\n    return {\r\n      name: this.name,\r\n      date: this.date,\r\n      notes: this.getNotes(),\r\n      speed: this.speed,\r\n      selectedTrack: this.selectedTrack,\r\n      timeSelection: this.timeSelection,\r\n      comment: this.comment\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Creates a Note object from an object via destructuring\r\n     *\r\n     * @param {object} object object with at least {name, date, notes, speed}\r\n     * @returns {Recording} new note\r\n     * @throws {Error} when name, date, or notes are missing\r\n     */\r\n  static from (object) {\r\n    let { name, date, notes } = object\r\n    // Check for undefined\r\n    const values = [name, date, notes]\r\n    const names = ['name', 'date', 'notes']\r\n    for (const [index, value] of values.entries()) {\r\n      if (value === undefined || value === null) {\r\n        throw new Error(`Cannot create Recording with undefined ${names[index]}`)\r\n      }\r\n    }\r\n    // Parse date if it is a string\r\n    if (typeof (date) === 'string') {\r\n      date = new Date(Date.parse(date))\r\n    }\r\n    const { speed, selectedTrack, timeSelection, comment } = object\r\n    return new Recording(\r\n      name,\r\n      date,\r\n      notes,\r\n      speed,\r\n      selectedTrack,\r\n      timeSelection,\r\n      comment\r\n    )\r\n  }\r\n}\r\n\r\nexport default Recording\r\n", "import * as midiParser from 'midi-parser-js'\r\nimport Note from './Note.js'\r\nimport { preprocessMusicXmlData } from '../fileFormats/MusicXmlParser.js'\r\nimport { preprocessMidiFileData } from '../fileFormats/MidiParser.js'\r\nimport NoteArray from './NoteArray.js'\r\nimport GuitarNote from './GuitarNote.js'\r\n\r\n/**\r\n * Represents a parsed MIDI or MusicXML file in a uniform format.\r\n */\r\nclass MusicPiece {\r\n  /**\r\n   * @deprecated Do not use this constructor, but the static methods MusicPiece.fromMidi\r\n   * and MusicPiece.fromMusicXml instead.\r\n   * @param {string} name name (e.g. file name or piece name)\r\n   * @param {TempoDefinition[]} tempos tempos\r\n   * @param {TimeSignature[]} timeSignatures time signatures\r\n   * @param {KeySignature[]} keySignatures key signatures\r\n   * @param {number[]} measureTimes time in seconds for each measure line\r\n   * @param {Track[]} tracks tracks\r\n   * @param {number[]} [xmlMeasureIndices] for each parsed measure, the index of\r\n   *   the corresponding XML measure (only for MusicXML)\r\n   * @throws {'No or invalid tracks given!'} when invalid tracks are given\r\n   */\r\n  constructor (\r\n    name,\r\n    tempos,\r\n    timeSignatures,\r\n    keySignatures,\r\n    measureTimes,\r\n    tracks,\r\n    xmlMeasureIndices\r\n  ) {\r\n    if (!tracks || tracks.length === 0) {\r\n      throw new Error('No or invalid tracks given! Use .fromMidi or .fromMusicXml?')\r\n    }\r\n    this.name = name\r\n    this.measureTimes = measureTimes\r\n    this.xmlMeasureIndices = xmlMeasureIndices\r\n    this.tracks = tracks\r\n    this.duration = Math.max(...this.tracks.map(d => d.duration))\r\n    // Filter multiple identical consecutive infos\r\n    this.tempos = tempos.slice(0, 1)\r\n    let currentTempo = tempos[0]\r\n    for (const tempo of tempos) {\r\n      if (tempo.string !== currentTempo.string) {\r\n        currentTempo = tempo\r\n        this.tempos.push(tempo)\r\n      }\r\n    }\r\n    this.timeSignatures = timeSignatures.slice(0, 1)\r\n    let currentTimeSig = timeSignatures[0]\r\n    for (const timeSignature of timeSignatures) {\r\n      if (timeSignature.string !== currentTimeSig.string) {\r\n        currentTimeSig = timeSignature\r\n        this.timeSignatures.push(timeSignature)\r\n      }\r\n    }\r\n    this.keySignatures = keySignatures.slice(0, 1)\r\n    let currentKeySig = keySignatures[0]\r\n    for (const keySignature of keySignatures) {\r\n      if (keySignature.string !== currentKeySig.string) {\r\n        currentKeySig = keySignature\r\n        this.keySignatures.push(keySignature)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a MusicPiece object from a MIDI file binary\r\n   *\r\n   * @param {string} name name\r\n   * @param {ArrayBuffer} midiFile MIDI file\r\n   * @returns {MusicPiece} new MusicPiece\r\n   * @throws {'No MIDI file content given'} when MIDI file is undefined or null\r\n   * @example <caption>In Node.js</caption>\r\n   *      const file = path.join(directory, fileName);\r\n   *      const data = fs.readFileSync(file, 'base64');\r\n   *      const mp = MusicPiece.fromMidi(fileName, data);\r\n   * @example <caption>In the browser</caption>\r\n   *      const uintArray = new Uint8Array(midiBinary);\r\n   *      const MP = MusicPiece.fromMidi(filename, uintArray);\r\n   */\r\n  static fromMidi (name, midiFile) {\r\n    if (!midiFile) {\r\n      throw new Error('No MIDI file content given')\r\n    }\r\n    const midi = midiParser.parse(midiFile)\r\n    const parsed = preprocessMidiFileData(midi)\r\n    let tempos = []\r\n    let timeSignatures = []\r\n    let keySignatures = []\r\n    let measureTimes = []\r\n    if (parsed.tracks.length > 0) {\r\n      // Tempos\r\n      tempos = parsed.tempoChanges\r\n        .map(d => new TempoDefinition(d.time, d.tempo))\r\n      // Time signatures\r\n      timeSignatures = parsed.beatTypeChanges\r\n        .map(d => new TimeSignature(d.time, [d.beats, d.beatType]))\r\n      // Key signatures\r\n      keySignatures = parsed.keySignatureChanges\r\n        .map(d => new KeySignature(d.time, d.key, d.scale))\r\n      // Measure times\r\n      measureTimes = parsed.measureLinePositions\r\n    }\r\n    // Tracks\r\n    const tracks = parsed.tracks.map((track) => new Track(\r\n      track.trackName,\r\n      track.instrumentName,\r\n      track.noteObjs,\r\n      null,\r\n      track.measureIndices,\r\n      new Map(),\r\n      new Map()\r\n    ))\r\n    return new MusicPiece(\r\n      name,\r\n      tempos,\r\n      timeSignatures,\r\n      keySignatures,\r\n      measureTimes,\r\n      tracks\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Creates a MusicPiece object from a MIDI file binary\r\n   *\r\n   * @deprecated This is not fully implemented yet\r\n   * @todo on hold until @tonejs/midi adds time in seconds for meta events\r\n   * @todo use @tonejs/midi for parsing, but the same information as with\r\n   * MusicPiece.fromMidi()\r\n   * @see https://github.com/Tonejs/Midi\r\n   * @param {string} name name\r\n   * @param {ArrayBuffer} midiFile MIDI file\r\n   * @returns {MusicPiece} new MusicPiece\r\n   * @throws {'No MIDI file content given'} when MIDI file is undefined or null\r\n   * @example <caption>In Node.js</caption>\r\n   *      const file = path.join(directory, fileName);\r\n   *      const data = fs.readFileSync(file);\r\n   *      const mp = MusicPiece.fromMidi(fileName, data);\r\n   * @example <caption>In the browser</caption>\r\n   *      const uintArray = new Uint8Array(midiBinary);\r\n   *      const MP = MusicPiece.fromMidi(filename, uintArray);\r\n   */\r\n  // static fromMidi2 (name, midiFile) {\r\n  //   if (!midiFile) {\r\n  //     throw new Error('No MIDI file content given')\r\n  //   }\r\n\r\n  //   const parsed = new Midi(midiFile)\r\n  //   // const uintArray = new Uint8Array(midiFile);\r\n  //   // const parsed = new Midi(uintArray);\r\n\r\n  //   // Tracks\r\n  //   const tracks = []\r\n  //   for (const track of parsed.tracks) {\r\n  //     if (track.notes.length === 0) { continue }\r\n  //     const notes = track.notes.map(note => Note.from({\r\n  //       pitch: note.midi,\r\n  //       start: note.time,\r\n  //       end: note.time + note.duration,\r\n  //       velocity: Math.round(note.velocity * 127),\r\n  //       channel: track.channel\r\n  //     }))\r\n  //     tracks.push(\r\n  //       Track.fromMidi(\r\n  //         track.trackName,\r\n  //         track.instrumentName,\r\n  //         notes\r\n  //       )\r\n  //     )\r\n  //   }\r\n\r\n  //   // TODO: convert ticks to seconds\r\n  //   let tempos = []\r\n  //   let timeSignatures = []\r\n  //   let keySignatures = []\r\n  //   let measureTimes = []\r\n  //   if (parsed.tracks.length > 0) {\r\n  //     // tempos\r\n  //     tempos = parsed.header.tempos\r\n  //       .map(d => new TempoDefinition(d.time, d.tempo))\r\n  //     // time signatures\r\n  //     timeSignatures = parsed.header.timeSignatures\r\n  //       .map(d => new TimeSignature(d.time, [d.beats, d.beatType]))\r\n  //     // key signatures\r\n  //     keySignatures = parsed.header.keySignatures\r\n  //       .map(d => new KeySignature(d.time, d.key, d.scale))\r\n  //     // measure times\r\n  //     measureTimes = parsed.measureLinePositions\r\n  //   }\r\n  //   return new MusicPiece(\r\n  //     name,\r\n  //     tempos,\r\n  //     timeSignatures,\r\n  //     keySignatures,\r\n  //     measureTimes,\r\n  //     tracks\r\n  //   )\r\n  // }\r\n\r\n  /**\r\n   * Creates a MusicPiece object from a MusicXML string\r\n   *\r\n   * @param {string} name name\r\n   * @param {string|object} xmlFile MusicXML file content as string or object\r\n   *      If it is an object, it must behave like a DOM, e.g. provide methods\r\n   *      such as .querySelectorAll()\r\n   * @returns {MusicPiece} new MusicPiece\r\n   * @throws {'No MusicXML file content given'} when MusicXML file is\r\n   *  undefined or null\r\n   * @example Parsing a MusicPiece in Node.js\r\n   *    const jsdom = require('jsdom');\r\n   *    const xmlFile = fs.readFileSync('My Song.musicxml');\r\n   *    const dom = new jsdom.JSDOM(xmlFile);\r\n   *    const xmlDocument = dom.window.document;\r\n   *    const mp = musicvislib.MusicPiece.fromMusicXml('My Song', xmlDocument);\r\n   */\r\n  static fromMusicXml (name, xmlFile) {\r\n    if (!xmlFile) {\r\n      throw new Error('No MusicXML file content given')\r\n    }\r\n    let xmlDocument = xmlFile\r\n    if (typeof xmlDocument === 'string') {\r\n      const parser = new DOMParser()\r\n      xmlDocument = parser.parseFromString(xmlFile, 'text/xml')\r\n    }\r\n    const parsed = preprocessMusicXmlData(xmlDocument)\r\n    let tempos = []\r\n    let timeSignatures = []\r\n    let keySignatures = []\r\n    if (parsed.parts.length > 0) {\r\n      // Tempos\r\n      tempos = parsed.parts[0].tempoChanges\r\n        .map(d => new TempoDefinition(d.time, d.tempo))\r\n      // Time signatures\r\n      timeSignatures = parsed.parts[0].beatTypeChanges\r\n        .map(d => new TimeSignature(d.time, [d.beats, d.beatType]))\r\n      // Key signatures\r\n      keySignatures = parsed.parts[0].keySignatureChanges\r\n        .map(d => new KeySignature(d.time, d.key, d.scale))\r\n    }\r\n    // Measure times\r\n    let measureTimes = []\r\n    let xmlMeasureIndices = []\r\n    if (parsed.parts.length > 0) {\r\n      measureTimes = parsed.parts[0].measureLinePositions\r\n      xmlMeasureIndices = parsed.parts[0].xmlMeasureIndices\r\n    }\r\n    // Tracks\r\n    const tracks = parsed.parts\r\n      .map((track, index) => {\r\n        for (const n of track.noteObjs) {\r\n          n.channel = index\r\n        }\r\n        return new Track(\r\n          parsed.partNames[index],\r\n          parsed.instruments[index],\r\n          track.noteObjs,\r\n          track.tuning,\r\n          track.measureIndices,\r\n          track.measureRehearsalMap,\r\n          track.noteLyricsMap,\r\n          track.xmlNoteIndices\r\n        )\r\n      })\r\n    return new MusicPiece(\r\n      name,\r\n      tempos,\r\n      timeSignatures,\r\n      keySignatures,\r\n      measureTimes,\r\n      tracks,\r\n      xmlMeasureIndices\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Allows to get a MusicPiece from JSON after doing JSON.stringify()\r\n   *\r\n   * @param {string|object} json JSON\r\n   * @returns {MusicPiece} new MusicPiece\r\n   * @example\r\n   *      const jsonString = mp.toJson();\r\n   *      const recovered = MusicPiece.fromJson(jsonString);\r\n   */\r\n  static fromJson (json) {\r\n    json = (typeof json === 'string') ? JSON.parse(json) : json\r\n    const tempos = json.tempos.map(d => new TempoDefinition(d.time, d.bpm))\r\n    const timeSignatures = json.timeSignatures.map(d => new TimeSignature(d.time, d.signature))\r\n    const keySignatures = json.keySignatures.map(d => new KeySignature(d.time, d.key, d.scale))\r\n    const tracks = json.tracks.map(track => Track.from(track))\r\n    return new MusicPiece(\r\n      json.name,\r\n      tempos, timeSignatures,\r\n      keySignatures,\r\n      json.measureTimes,\r\n      tracks,\r\n      json.xmlMeasureIndices\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a JSON-serialized representation\r\n   *\r\n   * @param {boolean} pretty true for readable (prettified) JSON\r\n   * @returns {string} JSON as string\r\n   * @example\r\n   *      const jsonString = mp.toJson();\r\n   *      const recovered = MusicPiece.fromJson(jsonString);\r\n   */\r\n  toJson (pretty = false) {\r\n    const _this = {\r\n      ...this,\r\n      tracks: this.tracks.map(d => d.toObject())\r\n    }\r\n    return JSON.stringify(_this, undefined, pretty ? 2 : 0)\r\n  }\r\n\r\n  /**\r\n   * Returns an array with all notes from all tracks.\r\n   *\r\n   * @deprecated use getNotesFromTracks('all') instead.\r\n   * @param {boolean} sortByTime true: sort notes by time\r\n   * @returns {Note[]} all notes of this piece\r\n   */\r\n  getAllNotes (sortByTime = false) {\r\n    const notes = this.tracks.flatMap(t => t.notes)\r\n    if (sortByTime) {\r\n      notes.sort((a, b) => a.start - b.start)\r\n    }\r\n    return notes\r\n  }\r\n\r\n  /**\r\n   * Returns an array with notes from the specified tracks.\r\n   *\r\n   * @param {'all'|number|number[]} indices either 'all', a number, or an\r\n   *      Array with numbers\r\n   * @param {boolean} sortByTime true: sort notes by time (not needed for a\r\n   *      single track)\r\n   * @returns {Note[]} Array with all notes from the specified tracks\r\n   */\r\n  getNotesFromTracks (indices = 'all', sortByTime = false) {\r\n    let notes = []\r\n    if (indices === 'all') {\r\n      // Return all notes from all tracks\r\n      notes = this.tracks.flatMap(t => t.notes)\r\n    } else if (Array.isArray(indices)) {\r\n      // Return notes from some tracks\r\n      notes = this.tracks\r\n        .filter((d, i) => indices.includes(i))\r\n        .flatMap(t => t.notes)\r\n    } else {\r\n      // Return notes from a single track\r\n      notes = this.tracks[indices].notes\r\n      // Notes in each tracks are already sorted\r\n      sortByTime = false\r\n    }\r\n    if (sortByTime) {\r\n      notes.sort((a, b) => a.start - b.start)\r\n    }\r\n    return notes\r\n  }\r\n\r\n  /**\r\n   * Transposes all or only the specified tracks by the specified number of\r\n   * (semitone) steps.\r\n   * Will return a new MusicPiece instance.\r\n   * Note pitches will be clipped to [0, 127].\r\n   * Will not change playing instructions such as string and fret.\r\n   *\r\n   * @param {number} steps number of semitones to transpose (can be negative)\r\n   * @param {'all'|number|number[]} tracks tracks to transpose\r\n   * @returns {MusicPiece} a new, transposed MusicPiece\r\n   */\r\n  transpose (steps = 0, tracks = 'all') {\r\n    const newTracks = this.tracks.map((track, index) => {\r\n      const change = (\r\n        tracks === 'all' ||\r\n        (Array.isArray(tracks) && tracks.includes(index)) ||\r\n        tracks === index\r\n      )\r\n      const na = new NoteArray(track.notes)\r\n      let tuning = track.tuningPitches\r\n      if (change) {\r\n        // Transpose notes and tuning pitches\r\n        na.transpose(steps)\r\n        tuning = track.tuningPitches.map(d => d + steps)\r\n      }\r\n      return new Track(\r\n        track.name,\r\n        track.instrument,\r\n        na.getNotes(),\r\n        tuning,\r\n        track.measureIndices\r\n      )\r\n    })\r\n    return new MusicPiece(\r\n      this.name,\r\n      [...this.tempos],\r\n      [...this.timeSignatures],\r\n      [...this.keySignatures],\r\n      [...this.measureTimes],\r\n      newTracks\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Used by MusicPiece, should not be used directly\r\n */\r\nexport class Track {\r\n  /**\r\n   * Do not use this constructor, but the static methods Track.fromMidi\r\n   * and Track.fromMusicXml instead.\r\n   *\r\n   * Notes will be sorted by start time.\r\n   *\r\n   * @param {string} name name\r\n   * @param {string} instrument instrument name\r\n   * @param {Note[]} notes notes\r\n   * @param {number[]} [tuningPitches=null] MIDI note numbers of the track's\r\n   *  tuning\r\n   * @param {number[]} [measureIndices=null] note indices where new measures\r\n   *  start\r\n   * @param {Map<number,object>} measureRehearsalMap maps measure index to\r\n   *  rehearsal marks\r\n   * @param {Map<number,object>} noteLyricsMap maps note index to lyrics text\r\n   * @param {number[][]} xmlNoteIndices for each parsed note, the indices of\r\n   *  the XML note elements that correspond to it\r\n   * @throws {'Notes are undefined or not an array'} for invalid notes\r\n   */\r\n  constructor (\r\n    name,\r\n    instrument,\r\n    notes,\r\n    tuningPitches = null,\r\n    measureIndices = null,\r\n    measureRehearsalMap,\r\n    noteLyricsMap,\r\n    xmlNoteIndices = null\r\n  ) {\r\n    name = !name?.length ? 'unnamed' : name.replace('\\u0000', '')\r\n    this.name = name\r\n    this.instrument = instrument\r\n    if (!notes || notes.length === undefined) {\r\n      throw new Error('Notes are undefined or not an array')\r\n    }\r\n    this.notes = notes.sort((a, b) => a.start - b.start)\r\n    this.tuningPitches = tuningPitches\r\n    this.measureIndices = measureIndices\r\n    this.measureRehearsalMap = measureRehearsalMap\r\n    this.noteLyricsMap = noteLyricsMap\r\n    this.xmlNoteIndices = xmlNoteIndices\r\n    // Computed properties\r\n    this.duration = new NoteArray(notes).getDuration()\r\n    this.hasStringFret = false\r\n    for (const note of notes) {\r\n      if (note.string !== undefined && note.fret !== undefined) {\r\n        this.hasStringFret = true\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an object representation of this Track, turns Maps into Arrays\r\n   *  to work with JSON.stringify\r\n   *\r\n   * @returns {object} object represntation\r\n   */\r\n  toObject () {\r\n    return {\r\n      ...this,\r\n      measureRehearsalMap: [...this.measureRehearsalMap],\r\n      noteLyricsMap: [...this.noteLyricsMap]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses an object into a Track, must have same format as the result of\r\n   * Track.toObject().\r\n   *\r\n   * @param {object} object object represntation of a Track\r\n   * @returns {Track} track\r\n   */\r\n  static from (object) {\r\n    const notes = object.notes.map(note => {\r\n      return note.string !== undefined && note.fret !== undefined\r\n        ? GuitarNote.from(note)\r\n        : Note.from(note)\r\n    })\r\n    const measureRehearsalMap = new Map(object.measureRehearsalMap)\r\n    const noteLyricsMap = new Map(object.noteLyricsMap)\r\n    return new Track(\r\n      object.name,\r\n      object.instrument,\r\n      notes,\r\n      object.tuningPitches,\r\n      object.measureIndices,\r\n      measureRehearsalMap,\r\n      noteLyricsMap,\r\n      object.xmlNoteIndices\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Tempo definition\r\n */\r\nexport class TempoDefinition {\r\n  /**\r\n   * @param {number} time in seconds\r\n   * @param {number} bpm tempo in seconds per beat\r\n   */\r\n  constructor (time, bpm) {\r\n    this.time = time\r\n    this.bpm = bpm\r\n    this.string = `${bpm} bpm`\r\n  }\r\n}\r\n\r\n/**\r\n * Time signature definition\r\n */\r\nexport class TimeSignature {\r\n  /**\r\n   * @param {number} time in seconds\r\n   * @param {number[]} signature time signature as [beats, beatType]\r\n   */\r\n  constructor (time, signature) {\r\n    this.time = time\r\n    this.signature = signature\r\n    this.string = signature.join('/')\r\n  }\r\n}\r\n\r\n/**\r\n * Key signature definition\r\n */\r\nexport class KeySignature {\r\n  /**\r\n   * @param {number} time in seconds\r\n   * @param {string} key key e.g. 'C'\r\n   * @param {string} scale scale e.g. 'major'\r\n   */\r\n  constructor (time, key, scale) {\r\n    this.time = time\r\n    this.key = key\r\n    this.scale = scale\r\n    this.string = `${key} ${scale}`\r\n  }\r\n}\r\n\r\nexport default MusicPiece\r\n", "import { max } from 'd3'\nimport Note from '../types/Note.js'\nimport GuitarNote from '../types/GuitarNote.js'\nimport { getMidiNoteByNameAndOctave } from './Midi.js'\nimport { roundToNDecimals } from '../utils/MathUtils.js'\n// import DrumNote from '../types/DrumNote.js';\n\n/**\n * @module fileFormats/MusicXmlParser\n */\n\n// Precision in number of digits when rounding seconds\nconst ROUNDING_PRECISION = 5\n\n/**\n * Converts a collection of MusicXML measures to JavaScript Objects with timing information in seconds.\n * Also calculates the position of measure lines and the total time in seconds.\n *\n * @param {XMLDocument} xml MusicXML document\n * @param {boolean} log set to true to log results etc. to the console\n * @returns {object} parsed document\n */\nexport function preprocessMusicXmlData (xml, log = false) {\n  if (log) {\n    console.groupCollapsed('[MusicXmlParser] Parsing MusicXML')\n    console.log(xml)\n  }\n  // Get part and instrument names\n  const partNameElements = xml.querySelectorAll('part-name')\n  const instruments = xml.querySelectorAll('score-instrument')\n  const partNames = []\n  const instrumentNames = []\n  for (const p of partNameElements) {\n    partNames.push(p.innerHTML)\n  }\n  for (const index of instruments) {\n    instrumentNames.push(index.children[0].innerHTML)\n  }\n  // Get instrument definitions\n  const drumInstrumentMap = getDrumInstrumentMap(xml)\n  // Preprocess notes\n  const parts = xml.querySelectorAll('part')\n  const parsedParts = []\n  for (const part of parts) {\n    parsedParts.push(preprocessMusicXmlPart(part, drumInstrumentMap))\n  }\n  const result = {\n    parts: parsedParts,\n    partNames,\n    instruments: instrumentNames,\n    totalTime: max(parsedParts, d => d.totalTime)\n  }\n  if (log) {\n    console.log(result)\n    console.groupEnd()\n  }\n  return result\n}\n\n/**\n * Converts a collection of MusicXML measures to JavaScript Objects with timing information in seconds.\n * Also calculates the position of measure lines and the total time in seconds.\n *\n * @private\n * @param {HTMLElement} part MusicXML part\n * @param {Map} drumInstrumentMap midiPitch = map.get(partId).get(instrId)\n * @returns {object} parsed measures\n */\nfunction preprocessMusicXmlPart (part, drumInstrumentMap) {\n  // Handle Guitar sheets with stave and tab (so dublicate notes)\n  part = handleStaveAndTab(part)\n  // Handle repetitions by duplicating measures\n  const { resultMeasures: measures, xmlMeasureIndices } = duplicateRepeatedMeasures(part.children)\n\n  // For each parsed note, store the corresponding XML notes\n  const xmlNotes = part.querySelectorAll('note')\n  const xmlNoteIndexMap = new Map([...xmlNotes].map((d, i) => [d, i]))\n  const xmlNoteIndices = []\n\n  let currentTime = 0\n  let divisions\n  let tempo = 120\n  let beats = 4\n  let beatType = 4\n  // Default velocity is 90 https://www.musicxml.com/tutorial/the-midi-compatible-part/sound-suggestions/\n  const defaultVelocity = 90\n  const velocityFactor = 64 / 71\n  let velocity = Math.round(defaultVelocity * velocityFactor)\n\n  // Handle changing tempo and beat type\n  const tempoChanges = []\n  const beatTypeChanges = []\n  const keySignatureChanges = []\n  const noteObjs = []\n  const measureRehearsalMap = new Map()\n  const noteLyricsMap = new Map()\n  // Time in seconds of the start of new measures\n  const measureLinePositions = []\n  // Indices of notes where a new measure starts\n  const measureIndices = []\n  for (const measure of measures) {\n    const currentTimeRounded = roundToNDecimals(currentTime, ROUNDING_PRECISION)\n    // Try to update metrics (if they are not set, keep the old ones)\n    try {\n      const soundElements = measure.querySelectorAll('sound')\n      // eslint-disable-next-line\n      for (const element of soundElements) {\n        const tempoValue = element.getAttribute('tempo')\n        if (tempoValue !== null) {\n          tempo = roundToNDecimals(+tempoValue, 3)\n          tempoChanges.push({\n            time: currentTimeRounded,\n            tempo\n          })\n        }\n        // TODO: this only support one tempo change per measure!\n        // TODO: tempo changes that are not at the measure start will be false\n        // TODO: solution: go trough all children of measure: notes and other children\n        // notes will update the time\n        break\n      }\n    } catch { }\n    try {\n      divisions = +measure.querySelectorAll('divisions')[0].innerHTML\n    } catch { }\n    try {\n      beats = +measure.querySelectorAll('beats')[0].innerHTML\n      beatType = +measure.querySelectorAll('beat-type')[0].innerHTML\n      beatTypeChanges.push({\n        time: currentTimeRounded,\n        beats,\n        beatType\n      })\n    } catch { }\n    const secondsPerBeat = 1 / (tempo / 60)\n    try {\n      const fifths = +measure.querySelectorAll('fifths')[0].innerHTML\n      const { key, scale } = keySignatureMap.get(fifths)\n      keySignatureChanges.push({\n        time: currentTimeRounded,\n        key,\n        scale\n      })\n    } catch { }\n\n    // If measure is empty, still increase currentTime\n    if (measure.querySelectorAll('note').length === 0) {\n      const measureDuration = beats * (beatType / 4) * secondsPerBeat\n      currentTime += measureDuration\n    }\n\n    // Read notes\n    let lastNoteDuration = 0\n    for (const child of measure.children) {\n      if (child.nodeName === 'backup') {\n        // Handle backup, which reduces the current time to handle multiple staves\n        const duration = +child.querySelectorAll('duration')[0].innerHTML\n        const durationInSeconds = getDurationInSeconds(duration, divisions, secondsPerBeat)\n        currentTime -= durationInSeconds\n      } else if (child.nodeName === 'forward') {\n        // Forward is inverse of backward\n        const duration = +child.querySelectorAll('duration')[0].innerHTML\n        const durationInSeconds = getDurationInSeconds(duration, divisions, secondsPerBeat)\n        currentTime += durationInSeconds\n      } else if (child.nodeName === 'direction') {\n        // Handle directions such as dynamics\n        for (const direction of child.children) {\n          if (direction.nodeName === 'sound' && direction.getAttribute('dynamics')) {\n            // Dynamics: convert number...\n            // https://www.musicxml.com/tutorial/the-midi-compatible-part/sound-suggestions/\n            velocity = Math.round(velocityFactor * +direction.getAttribute('dynamics'))\n          }\n          if (child.querySelectorAll('rehearsal').length > 0) {\n            // Reheasal marks (used as section indicators by GuitarPro)\n            const rehearsals = child.querySelectorAll('rehearsal')\n            const marks = []\n            for (const r of rehearsals) {\n              if (r.textContent !== '') {\n                marks.push(r.textContent)\n              }\n            }\n            if (marks.length > 0) {\n              let text = marks.join(' ')\n              const measureIndex = measureIndices.length\n              if (measureRehearsalMap.has(measureIndex)) {\n                const oldText = measureRehearsalMap.get(measureIndex)\n                text = `${oldText} ${text}`\n              }\n              measureRehearsalMap.set(measureIndex, text)\n            }\n          }\n          // TODO: handle others, e.g. tempo\n          // if (direction.nodeName === 'sound' && direction.getAttribute('tempo')) {\n          //     const tempoValue = Math.round(+direction.getAttribute('tempo'));\n          //     tempo = roundToNDecimals(tempoValue, 3);\n          //     tempoChanges.push({\n          //         time: roundToNDecimals(currentTime, ROUNDING_PRECISION),\n          //         tempo,\n          //     });\n          // }\n        }\n      } else if (child.nodeName === 'note') {\n        const note = child\n\n        try {\n          // Get note duration in seconds\n          let durationInSeconds\n          // Handle grace notes\n          if (note.querySelectorAll('grace').length > 0) {\n            // Take duration from type\n            const type = note.querySelectorAll('type').textContent\n            if (type === '64th') {\n              durationInSeconds = secondsPerBeat / 16\n            } else if (type === '32nd') {\n              durationInSeconds = secondsPerBeat / 8\n            } else if (type === '16th') {\n              durationInSeconds = secondsPerBeat / 4\n            } else if (type === 'eighth') {\n              durationInSeconds = secondsPerBeat / 2\n            } else if (type === 'quarter') {\n              durationInSeconds = secondsPerBeat\n            } else if (type === 'half') {\n              durationInSeconds = secondsPerBeat * 2\n            } else {\n              // TODO: better fallback solution?\n              durationInSeconds = 0.01\n            }\n          } else {\n            const duration = +note.querySelectorAll('duration')[0].innerHTML\n            durationInSeconds = getDurationInSeconds(duration, divisions, secondsPerBeat)\n          }\n\n          // Do not create note object for rests, only increase time\n          const isRest = note.querySelectorAll('rest').length > 0\n          if (isRest) {\n            currentTime += durationInSeconds\n            continue\n          }\n          const isUnpitched = note.querySelectorAll('unpitched').length > 0\n          let pitch\n          if (isUnpitched) {\n            // Handle drum notes\n            const instrumentId = note.querySelectorAll('instrument')[0].id\n            pitch = drumInstrumentMap.get(part.id).get(instrumentId)\n          } else {\n            // Get MIDI pitch\n            // Handle <alter> tag for accidentals\n            const alter = +(note.querySelectorAll('alter')[0]?.innerHTML ?? 0)\n            const step = note.querySelectorAll('step')[0].innerHTML\n            const octave = +note.querySelectorAll('octave')[0].innerHTML\n            pitch = getMidiNoteByNameAndOctave(step, octave).pitch + alter\n          }\n          // TODO: Handle dynamics defined as tag inside a note\n          const dynamicsTag = note.querySelectorAll('dynamics')[0]?.children[0]\n          if (dynamicsTag) {\n            velocity = dynamicsMap.get(dynamicsTag.nodeName)\n          }\n\n          // Is this a chord?\n          // https://www.musicxml.com/tutorial/the-midi-compatible-part/chords/\n          const isChord = note.querySelectorAll('chord').length > 0\n          if (isChord) {\n            currentTime -= lastNoteDuration\n          }\n          // Is this note tied?\n          const tieElement = note.querySelectorAll('tie')[0]\n          if (tieElement && tieElement.getAttribute('type') === 'stop') {\n            const noteEnd = currentTime + durationInSeconds\n            // Find last note with this pitch and update end\n            for (let index = noteObjs.length - 1; index > 0; index--) {\n              const noteObject = noteObjs[index]\n              if (noteObject.pitch === pitch) {\n                noteObject.end = noteEnd\n                // Read lyrics and add to note\n                const lyrics = getLyricsFromNote(note)\n                if (lyrics.length > 0) {\n                  const oldLyrics = noteLyricsMap.get(index) ?? ''\n                  const newLyrics = `${oldLyrics} ${lyrics}`\n                  noteLyricsMap.set(index, newLyrics)\n                }\n                // Save XML note index\n                xmlNoteIndices[index].push(xmlNoteIndexMap.get(note))\n                break\n              }\n            }\n          } else {\n            // Save XML note index\n            xmlNoteIndices.push([xmlNoteIndexMap.get(note)])\n            // Staff is used as note's channel for non-guitar notes\n            const staff = +(note.querySelectorAll('staff')[0]?.innerHTML ?? 1)\n            // TODO: use xml note type?\n            // const type = note.getElementsByTagName('type')[0].innerHTML;\n            const startTime = roundToNDecimals(currentTime, ROUNDING_PRECISION)\n            const endTime = roundToNDecimals(currentTime + durationInSeconds, ROUNDING_PRECISION)\n            // Try to get guitar specific data\n            let string = null\n            let fret = null\n            try {\n              fret = +note.querySelectorAll('fret')[0].innerHTML\n              string = +note.querySelectorAll('string')[0].innerHTML\n            } catch { }\n            if (string !== null && fret !== null) {\n              noteObjs.push(new GuitarNote(\n                pitch,\n                startTime,\n                velocity,\n                string,\n                endTime,\n                string,\n                fret\n              ))\n              // TODO: use drum notes and store part name and action directly\n              // } else if (isUnpitched) {\n              //     const part = '';\n              //     const action = '';\n              //     noteObjs.push(new DrumNote(\n              //         pitch,\n              //         startTime,\n              //         velocity,\n              //         staff - 1,\n              //         endTime,\n              //         part,\n              //         action,\n              //     ));\n            } else {\n              noteObjs.push(new Note(\n                pitch,\n                startTime,\n                velocity,\n                // MusicXML starts with 1 but MIDI with 0\n                staff - 1,\n                endTime\n              ))\n            }\n            // Read lyrics\n            const lyrics = getLyricsFromNote(note)\n            if (lyrics.length > 0) {\n              noteLyricsMap.set(noteObjs.length - 1, lyrics)\n            }\n          }\n          lastNoteDuration = durationInSeconds\n          currentTime += durationInSeconds\n        } catch (error) {\n          console.warn('[MusicXmlParser] Cannot parse MusicXML note', error, note)\n        }\n      }\n    }\n    // Add measure line position\n    measureLinePositions.push(roundToNDecimals(currentTime, ROUNDING_PRECISION))\n    measureIndices.push(noteObjs.length)\n  }\n  // Defaults\n  if (tempoChanges.length === 0 || tempoChanges[0].time > 0) {\n    tempoChanges.unshift({ tempo: 120, time: 0 })\n  }\n  if (beatTypeChanges.length === 0 || beatTypeChanges[0].time > 0) {\n    beatTypeChanges.unshift({ beats: 4, beatType: 4, time: 0 })\n  }\n  if (keySignatureChanges.length === 0 || keySignatureChanges[0].time > 0) {\n    keySignatureChanges.unshift({ key: 'C', scale: 'major', time: 0 })\n  }\n\n  const result = {\n    noteObjs,\n    totalTime: currentTime,\n    measureLinePositions,\n    measureIndices,\n    xmlMeasureIndices,\n    measureRehearsalMap: removeRehearsalRepetitions(measureRehearsalMap),\n    xmlNoteIndices,\n    tempoChanges,\n    beatTypeChanges,\n    keySignatureChanges,\n    tuning: getTuningPitches(measures),\n    noteLyricsMap\n  }\n  // console.log('[MusicXmlParser] Parsed part: ', result);\n  return result\n}\n\n/**\n * Removes duplicates from measureRehearsalMap, which occur when a measure was\n * repeated\n *\n * @param {Map<number,string>} measureRehearsalMap map\n * @returns {Map<number,string>} cleaned map\n */\nfunction removeRehearsalRepetitions (measureRehearsalMap) {\n  const entries = [...measureRehearsalMap]\n  const clean = entries.filter((d, i) => i === 0 || entries[i - 1][1] !== d[1])\n  return new Map(clean)\n}\n\n/**\n * Reads lyrics from a note element\n *\n * @param {HTMLElement} note note element\n * @returns {string} lyrics for this note\n */\nfunction getLyricsFromNote (note) {\n  const lyric = note.querySelectorAll('lyric')\n  const texts = []\n  for (const l of lyric) {\n    texts.push(l.querySelectorAll('text')[0].textContent)\n  }\n  const text = texts.join(' ')\n  return text\n}\n\n/**\n * Calculates the duration in seconds of a note, rest or backup\n *\n * @private\n * @param {number} duration duration of the event in divisions\n * @param {number} divisions MusicXML time divisions value\n * @param {number} secondsPerBeat seconds per beat\n * @returns {number} duration in seconds\n */\nfunction getDurationInSeconds (duration, divisions, secondsPerBeat) {\n  const durationInBeats = duration / divisions\n  const durationInSeconds = durationInBeats * secondsPerBeat\n  return durationInSeconds\n}\n\n/**\n * Resolves repetitions by simply duplicating repeated measures.\n * Handles volta lines (ending one, ending two).\n *\n * @todo handle 3x etc\n * @todo fix alternative endings with more than one measure\n * @todo write tests\n * @see https://www.musicxml.com/tutorial/the-midi-compatible-part/repeats/\n * @private\n * @param {HTMLCollection} measures measures\n * @returns {HTMLAllCollection[]} processed measures\n */\nfunction duplicateRepeatedMeasures (measures) {\n  let resultMeasures = []\n  let currentRepeatedSection = []\n  let isAlternativeEndingOne = false\n  for (const measure of measures) {\n    // Check if this is the first measure of an volta ending 1\n    const endingMarks = measure.querySelectorAll('ending')\n    if (\n      +(endingMarks[0]?.getAttribute('number')) === 1 &&\n      endingMarks[0]?.getAttribute('type') === 'start'\n    ) {\n      isAlternativeEndingOne = true\n    }\n    // Handle repetition marks\n    const repetitionMarks = measure.querySelectorAll('repeat')\n    if (repetitionMarks.length === 2) {\n      // Only this measure is repeated\n      // TODO: volta endings don't make sense here so no need to handle?\n      const times = repetitionMarks[1].getAttribute('times') || 2\n      const repetition = Array.from({ length: +times }).fill(measure)\n      if (currentRepeatedSection.length === 0) {\n        resultMeasures = [...resultMeasures, ...repetition]\n      } else {\n        currentRepeatedSection = [...currentRepeatedSection, ...repetition]\n      }\n    } else if (repetitionMarks.length === 1) {\n      // Repetition either starts or ends here\n      const direction = repetitionMarks[0].getAttribute('direction')\n      if (direction === 'forward') {\n        // Start new repetition\n        currentRepeatedSection.push(measure)\n      } else if (direction === 'backward') {\n        const times = repetitionMarks[0].getAttribute('times') || 2\n        if (currentRepeatedSection.length > 0) {\n          // Finish current repetition\n          if (!isAlternativeEndingOne) {\n            currentRepeatedSection.push(measure)\n            for (let index = 0; index < times; index++) {\n              resultMeasures = [...resultMeasures, ...currentRepeatedSection]\n            }\n          } else {\n            // Only include ending 1 in first repetition\n            const firstRepetition = [...currentRepeatedSection, measure]\n            resultMeasures = [...resultMeasures, ...firstRepetition]\n            for (let index = 1; index < times; index++) {\n              resultMeasures = [...resultMeasures, ...currentRepeatedSection]\n            }\n          }\n          currentRepeatedSection = []\n        } else {\n          // Repetition started at the start of the piece, repeat all\n          // we have until here\n          const allMeasuresUntilHere = [...resultMeasures]\n          for (let index = 1; index < times; index++) {\n            resultMeasures = [...resultMeasures, ...allMeasuresUntilHere]\n          }\n          // resultMeasures = [...resultMeasures, ...resultMeasures];\n        }\n      }\n    } else {\n      if (!isAlternativeEndingOne) {\n        // Measure without repetition marks, but might still be inside a\n        // repetition\n        if (currentRepeatedSection.length === 0) {\n          resultMeasures.push(measure)\n        } else {\n          currentRepeatedSection.push(measure)\n        }\n      }\n    }\n    // Check if this is the last measure of a volta ending 1\n    if (isAlternativeEndingOne) {\n      for (const endingMark of endingMarks) {\n        if (\n          +(endingMark.getAttribute('number')) === 1 &&\n          endingMark.getAttribute('type') === 'stop'\n        ) {\n          isAlternativeEndingOne = false\n        }\n      }\n    }\n  }\n  // Compute mapping from duplicated to original\n  const measureIndexMap = new Map([...measures].map((d, i) => [d, i]))\n  const xmlMeasureIndices = resultMeasures.map(d => measureIndexMap.get(d))\n  return { resultMeasures, xmlMeasureIndices }\n}\n\n/**\n * Handles MusicXML measures that contain both a stave and a tab. Since every\n * note is described twice, we just need to remove those without string, fret\n * information\n * This function also removes <backup> tags which should not be necessary after\n * removing dublicate notes (only if string, fret notes were found).\n *\n * @private\n * @param {HTMLElement} track a MusicXML track, i.e. its measures\n * @returns {HTMLCollection} cleaned-up MusicXML measure\n */\nfunction handleStaveAndTab (track) {\n  const notes = track.querySelectorAll('note')\n  // Check whether this file has notes with string, fret information\n  let hasStringFretNotes = false\n  for (const note of notes) {\n    if (\n      note.querySelectorAll('string').length > 0 &&\n      note.querySelectorAll('fret').length > 0\n    ) {\n      hasStringFretNotes = true\n      break\n    }\n  }\n  // If some notes have string and fret information, remove all the others\n  // Do *not* remove all rests, keep the one in the first voice!\n  if (hasStringFretNotes) {\n    for (const note of notes) {\n      const voice = +(note.querySelectorAll('voice')[0].innerHTML ?? 1)\n      const isFirstVoiceRest = note.querySelectorAll('rest').length > 0 &&\n        voice === 1\n      if (\n        !isFirstVoiceRest &&\n        note.querySelectorAll('fret').length === 0\n      ) {\n        note.remove()\n      }\n    }\n    // Also remove <backup> tags which were only there due to having two\n    // staves\n    const backups = track.querySelectorAll('backup')\n    for (const backup of backups) {\n      backup.remove()\n    }\n  }\n  return track\n}\n\n/**\n * Gets the tuning for a MusicXML part\n *\n * @private\n * @param {HTMLCollection} measures the measures of the parts\n * @returns {number[]} pitches of the tuning or [] if none is found\n */\nfunction getTuningPitches (measures) {\n  for (const measure of measures) {\n    try {\n      const tuningPitches = []\n      const staffTunings = measure.querySelectorAll('staff-tuning')\n      for (const st of staffTunings) {\n        const tuningNote = st.querySelectorAll('tuning-step')[0].innerHTML\n        const tuningOctave = +st.querySelectorAll('tuning-octave')[0].innerHTML\n        // let line = +st.getAttribute('line');\n        // console.log(`String ${line} is tuned to ${tuningNote}${tuningOctave}`);\n        tuningPitches.push(getMidiNoteByNameAndOctave(tuningNote, tuningOctave).pitch)\n      }\n      return tuningPitches\n    } catch { }\n  }\n  return []\n}\n\n/**\n * Extracts information about the XML's parts for different instruments\n *\n * @param {XMLDocument} xml MusicXML\n * @returns {object[]} part definitions\n */\n// function getPartDefinitions (xml) {\n//   const partDefinitions = xml.querySelectorAll('score-part')\n//   const result = []\n//   for (const partDefinition of partDefinitions) {\n//     // Instruments (e.g., drum parts have multiple)\n//     const instruments = new Map()\n//     const instrDefs = partDefinition.querySelectorAll('score-instrument')\n//     for (const instrumentDefinition of instrDefs) {\n//       const id = instrumentDefinition.getAttribute('id')\n//       instruments.set(id, {\n//         id,\n//         name: instrumentDefinition.querySelectorAll('instrument-name')[0].textContent\n//       })\n//     }\n//     const instrMidiDefs = partDefinition.querySelectorAll('midi-instrument')\n//     for (const instrumentDefinition of instrMidiDefs) {\n//       const midiNote = instrumentDefinition.querySelectorAll('midi-unpitched')[0]?.textContent\n//       if (!midiNote) {\n//         continue\n//       }\n//       const id = instrumentDefinition.getAttribute('id')\n//       instruments.get(id).midiNote = +midiNote\n//     }\n//     // Parsed part definitions\n//     result.push({\n//       id: partDefinition.getAttribute('id'),\n//       name: partDefinition.querySelectorAll('part-name')[0].textContent,\n//       abbr: partDefinition.querySelectorAll('part-abbreviation')[0].textContent,\n//       instruments: instruments.size > 0 ? instruments : null\n//     })\n//   }\n//   return result\n// }\n\n/**\n * Returns a map containing maps, such that result.get(partId).get(instrId)\n * gives you the instrument with the ID instrId as defined in the part partId.\n *\n * This is needed to map drum notes to MIDI pitches.\n *\n * @param {XMLDocument} xml MusicXML\n * @returns {Map} map with structure result.get(partId).get(instrId)\n */\nfunction getDrumInstrumentMap (xml) {\n  const partMap = new Map()\n  const scoreParts = xml.querySelectorAll('part-list')[0]?.querySelectorAll('score-part')\n  if (!scoreParts) { return partMap }\n  for (const scorePart of scoreParts) {\n    const partId = scorePart.id\n    const instruMap = new Map()\n    const midiInstrs = scorePart.querySelectorAll('midi-instrument')\n    for (const midiInstr of midiInstrs) {\n      const instrId = midiInstr.id\n      const pitch = midiInstr.querySelectorAll('midi-unpitched')[0]?.innerHTML\n      if (pitch) {\n        instruMap.set(instrId, +pitch)\n      }\n    }\n    partMap.set(partId, instruMap)\n  }\n  return partMap\n}\n\n/**\n * Checks whether a note is palm-muted\n *\n * @param {HTMLElement} note note element\n * @returns {boolean} true if note is palm-muted\n */\n// function isPalmMuted (note) {\n//   const mute = note.querySelectorAll('mute')\n//   if (mute.length > 0 && mute[0].textContent === 'palm') {\n//     return true\n//   }\n//   return false\n// }\n\n/**\n * Checks whether a note is hammer-on\n *\n * @param {HTMLElement} note note element\n * @returns {boolean} true if note is hammer-on\n */\n// function isHammeron (note) {\n//   return note.querySelectorAll('hammer-on').length > 0\n// }\n\n/**\n * Map from fiths to key signature\n *\n * @type {Map<number,object>}\n */\nconst keySignatureMap = new Map([\n  [-7, { key: 'Cb', scale: 'major' }],\n  [-6, { key: 'Gb', scale: 'major' }],\n  [-5, { key: 'Db', scale: 'major' }],\n  [-4, { key: 'Ab', scale: 'major' }],\n  [-3, { key: 'Eb', scale: 'major' }],\n  [-2, { key: 'Bb', scale: 'major' }],\n  [-1, { key: 'F', scale: 'major' }],\n  [0, { key: 'C', scale: 'major' }],\n  [1, { key: 'G', scale: 'major' }],\n  [2, { key: 'D', scale: 'major' }],\n  [3, { key: 'A', scale: 'major' }],\n  [4, { key: 'E', scale: 'major' }],\n  [5, { key: 'B', scale: 'major' }],\n  [6, { key: 'F#', scale: 'major' }],\n  [7, { key: 'C#', scale: 'major' }]\n])\n\n/**\n * Maps dynamics to MIDI velocity numbers, i.e. 'ff' to 102\n *\n * @type {Map<string,number>}\n */\nconst dynamicsMap = new Map([\n  ['ppp', 25],\n  ['pp', 38],\n  ['p', 51],\n  ['mp', 64],\n  ['mf', 76],\n  ['f', 89],\n  ['ff', 102],\n  ['fff', 114]\n])\n", "import { countOnesOfBinary, roundToNDecimals } from './MathUtils.js'\r\nimport { binarySearch } from './ArrayUtils.js'\r\n\r\n/**\r\n * @module utils/MusicUtils\r\n */\r\n\r\n/**\r\n * Converts beats per minute to seconds per beat\r\n *\r\n * @param {number} bpm tempo in beats per minute\r\n * @returns {number} seconds per beat\r\n */\r\nexport function bpmToSecondsPerBeat (bpm) {\r\n  return 1 / (bpm / 60)\r\n}\r\n\r\n/**\r\n * Maps any frequency (in Hz) to an approximate MIDI note number. Result can be\r\n * rounded to get to the closest MIDI note or used as is for a sound in between\r\n * two notes.\r\n *\r\n * @param {number} frequency a frequency in Hz\r\n * @returns {number} MIDI note number (not rounded)\r\n */\r\nexport function freqToApproxMidiNr (frequency) {\r\n  return 12 * Math.log2(frequency / 440) + 69\r\n}\r\n\r\n/**\r\n * Maps any MIDI number (can be in-between, like 69.5 for A4 + 50 cents) to its\r\n * frequency.\r\n *\r\n * @param {number} midi MIDI note number\r\n * @returns {number} frequency in Hz\r\n */\r\nexport function midiToFrequency (midi) {\r\n  return 2 ** ((midi - 69) / 12) * 440\r\n}\r\n\r\n/**\r\n * Turns a chord into an integer that uniquely describes the occuring chroma.\r\n * If the same chroma occurs twice this will not make a difference\r\n * (e.g. [C4, E4, G4, C5] will equal [C4, E4, G4])\r\n *\r\n * How it works:\r\n * Chord has C, E, and G\r\n * x = 000010010001\r\n *         G  E   C\r\n *\r\n * @param {Note[]} notes notes\r\n * @returns {number} an integer that uniquely identifies this chord's chroma\r\n */\r\nexport function chordToInteger (notes) {\r\n  let value = 0x0\r\n  for (const note of notes) {\r\n    const chroma = note.pitch % 12\r\n    // eslint-disable-next-line no-bitwise\r\n    const noteInteger = 1 << chroma\r\n    // eslint-disable-next-line no-bitwise\r\n    value = value | noteInteger\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Takes two chord integer representations from chordToInteger() and computes\r\n * the Jaccard index\r\n *\r\n * @param {number} chord1 chord as integer representation\r\n * @param {number} chord2 chord as integer representation\r\n * @returns {number} Jackard index, from 0 for different to 1 for identical\r\n */\r\nexport function chordIntegerJaccardIndex (chord1, chord2) {\r\n  if (chord1 === chord2) {\r\n    return 1\r\n  }\r\n  // eslint-disable-next-line no-bitwise\r\n  const intersection = chord1 & chord2\r\n  // eslint-disable-next-line no-bitwise\r\n  const union = chord1 | chord2\r\n  const intersectionSize = countOnesOfBinary(intersection)\r\n  const unionSize = countOnesOfBinary(union)\r\n  return intersectionSize / unionSize\r\n}\r\n\r\n/*\r\n * noteTypeDurationRatios\r\n * 1 = whole note, 1/2 = half note, ...\r\n *\r\n * With added dots:\r\n * o. has duration of 1.5, o.. 1.75, ...\r\n */\r\nconst noteTypeDurationRatios = []\r\nconst baseDurations = [2, 1, 1 / 2, 1 / 4, 1 / 8, 1 / 16, 1 / 32, 1 / 64]\r\nfor (const d of baseDurations) {\r\n  for (let dots = 0; dots < 4; dots++) {\r\n    let duration = d\r\n    let toAdd = d\r\n    for (let dot = 0; dot < dots; dot++) {\r\n      // Each dot after the note adds half of the one before\r\n      toAdd /= 2\r\n      duration += toAdd\r\n    }\r\n    noteTypeDurationRatios.push({\r\n      type: d,\r\n      dots,\r\n      duration\r\n    })\r\n  }\r\n}\r\nnoteTypeDurationRatios.sort((a, b) => a.duration - b.duration)\r\n\r\n/**\r\n * Estimates the note type (whole, quarter, ...) and number of dots for dotted\r\n * notes\r\n *\r\n * @todo test if corrrectly 'calibrated'\r\n * @param {number} duration duration of a note\r\n * @param {number} bpm tempo of the piece in bpm\r\n * @returns {object} note type and number of dots\r\n *      e.g. { \"dots\": 0, \"duration\": 1, \"type\": 1 } for a whole note\r\n *      e.g. { \"dots\": 1, \"duration\": 1.5, \"type\": 1 } for a dotted whole note\r\n */\r\nexport function noteDurationToNoteType (duration, bpm) {\r\n  const quarterDuration = bpmToSecondsPerBeat(bpm)\r\n  const ratio = duration / quarterDuration / 4\r\n  // TODO: round to finest representable step?\r\n\r\n  // Binary search\r\n  return binarySearch(noteTypeDurationRatios, ratio, d => d.duration)\r\n}\r\n\r\n/**\r\n * Circle of 5ths as\r\n * [midiNr, noteAsSharp, noteAsFlat, numberOfSharps, numberOfFlats]\r\n *\r\n * @see https://en.wikipedia.org/wiki/Circle_of_fifths\r\n * @type {any[][]}\r\n */\r\nexport const CIRCLE_OF_5THS = [\r\n  [0, 'C', 'C', 0, 0],\r\n  [7, 'G', 'G', 1, 0],\r\n  [2, 'D', 'D', 2, 0],\r\n  [9, 'A', 'A', 3, 0],\r\n  [4, 'E', 'E', 4, 0],\r\n  [11, 'B', 'B', 5, 7],\r\n  [6, 'F#', 'Gb', 6, 6],\r\n  [1, 'C#', 'Db', 7, 5],\r\n  [8, 'G#', 'Ab', 0, 4],\r\n  [3, 'D#', 'Eb', 0, 3],\r\n  [10, 'A#', 'Bb', 0, 2],\r\n  [5, 'F', 'F', 0, 1]\r\n]\r\n\r\n/**\r\n * Maps number of semitones to interval name\r\n * m - minor\r\n * M - major\r\n * P - perfect\r\n * aug - augmented\r\n *\r\n * @type {Map<number,string>}\r\n */\r\nexport const INTERVALS = new Map([\r\n  [1, 'unison'],\r\n  [1, 'm2'],\r\n  [2, 'M2'],\r\n  [3, 'm3'],\r\n  [4, 'M3'],\r\n  [5, 'P4'],\r\n  [6, 'aug4'],\r\n  [7, 'P5'],\r\n  [8, 'm6'],\r\n  [9, 'M6'],\r\n  [10, 'm7'],\r\n  [11, 'M7'],\r\n  [12, 'P8']\r\n])\r\n\r\n/**\r\n * Estimates a difficulty score for playing a set of notes.\r\n * Can be used for an entire piece or measure-by-measure.\r\n *\r\n * @todo different modi, e.g. for piano or guitar (fingering is different)\r\n * @param {Note[]} notes notes\r\n * @param {string} mode mode\r\n * @param {number[]} fingering finger as number for each note, same order\r\n * @returns {number} difficulty, can range within [0, infinity)\r\n * @throws {'Invalid mode parameter'} when mode is invalid\r\n */\r\n// export function estimateDifficulty(notes, mode, fingering) {\r\n//     if (mode === 'noteDensity') {\r\n//         // Naive mode, only look at density of notes\r\n//         const startTimeExtent = extent(notes, d => d.start);\r\n//         return notes.length / startTimeExtent;\r\n//     } else if (mode === 'fingering') {\r\n//         // TODO: check complexity of fingering\r\n//     }\r\n//     throw new Error('Invalid mode parameter');\r\n// }\r\n\r\n/**\r\n * Creates a track of metronome ticks for a given tempo and meter.\r\n *\r\n * @param {number} tempo tempo in bpm, e.g. 120\r\n * @param {number[]} meter e.g. [4, 4]\r\n * @param {number} duration duration of the resulting track in seconds\r\n * @returns {object[]} metronome track with {time: number, accent: boolean}\r\n */\r\nexport function metronomeTrackFromTempoAndMeter (tempo = 120, meter = [4, 4], duration = 60) {\r\n  const track = []\r\n  const secondsPerBeat = bpmToSecondsPerBeat(tempo) / (meter[1] / 4)\r\n  let currentTime = 0\r\n  while (currentTime <= duration) {\r\n    for (let beat = 0; beat < meter[0]; beat++) {\r\n      track.push({\r\n        time: roundToNDecimals(currentTime, 4),\r\n        accent: beat % meter[0] === 0\r\n      })\r\n      currentTime += secondsPerBeat\r\n      if (currentTime > duration) {\r\n        return track\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a track of metronome ticks for a given music piece.\r\n *\r\n * @param {MusicPiece} musicPiece music piece\r\n * @param {number} [tempoFactor=1] rescale the tempo of the metronome, e.g. 2\r\n *      for twice the speed\r\n * @returns {object[]} metronome track with {time: number, accent: boolean}\r\n */\r\nexport function metronomeTrackFromMusicPiece (musicPiece, tempoFactor = 1) {\r\n  const { duration, tempos, timeSignatures } = musicPiece\r\n  const track = []\r\n  let currentTime = 0\r\n  // Time signatures\r\n  const initialTimeSig = timeSignatures[0].signature ?? [4, 4]\r\n  let [beatCount, beatType] = initialTimeSig\r\n  const timeSigsTodo = timeSignatures.slice(1)\r\n  // Tempi\r\n  const initialTempo = tempos[0].bpm ?? 120\r\n  let secondsPerBeat = bpmToSecondsPerBeat(initialTempo) / (beatType / 4)\r\n  const temposTodo = tempos.slice(1)\r\n  while (currentTime <= duration) {\r\n    // Always use the most recent tempo and meter\r\n    const lookahead = currentTime + secondsPerBeat\r\n    if (timeSigsTodo.length > 0 && timeSigsTodo[0].time <= lookahead) {\r\n      // console.log(\r\n      //     'timesig change to', timeSigsTodo[0].signature,\r\n      //     'after', track.length,\r\n      //     'beeps, at', currentTime);\r\n      [beatCount, beatType] = timeSigsTodo[0].signature\r\n      timeSigsTodo.shift()\r\n    }\r\n    if (temposTodo.length > 0 && temposTodo[0].time <= lookahead) {\r\n      // console.log(\r\n      //     'tempo change to', temposTodo[0].bpm,\r\n      //     'after', track.length,\r\n      //     'beeps, at', currentTime);\r\n      secondsPerBeat = bpmToSecondsPerBeat(temposTodo[0].bpm) / (beatType / 4)\r\n      temposTodo.shift()\r\n    }\r\n    for (let beat = 0; beat < beatCount; beat++) {\r\n      track.push({\r\n        time: roundToNDecimals(currentTime / tempoFactor, 3),\r\n        accent: beat === 0\r\n      })\r\n      currentTime += secondsPerBeat\r\n      if (currentTime > duration) {\r\n        return track\r\n      }\r\n    }\r\n  }\r\n  return track\r\n}\r\n", "import { group, max } from 'd3'\r\nimport Note from '../types/Note.js'\r\nimport { bpmToSecondsPerBeat } from '../utils/MusicUtils.js'\r\nimport { roundToNDecimals } from '../utils/MathUtils.js'\r\n\r\n/**\r\n * @module fileFormats/MidiParser\r\n * @todo parse pitch bends\r\n * @todo after tempo changes notes and measure time do not align,\r\n *       see \"[Test] Tempo change.mid\"\r\n */\r\n\r\n// Precision in number of digits when rounding seconds\r\nconst ROUNDING_PRECISION = 5\r\n\r\n/**\r\n * Parses a MIDI JSON file to get Note objects with absolute time in seconds.\r\n *\r\n * @see https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * @param {object} data MIDI data in JSON format\r\n * @param {boolean} splitFormat0IntoTracks split MIDI format 0 data into tracks\r\n *      instead of using channels?\r\n * @param {boolean} log set to true to log results etc. to the console\r\n * @returns {object} including an array of note objects and meta information\r\n */\r\nexport function preprocessMidiFileData (data, splitFormat0IntoTracks = true, log = false) {\r\n  if (data === null || data === undefined) {\r\n    return\r\n  }\r\n  if (!data.track) {\r\n    console.warn('[MidiParser] MIDI data has no track')\r\n    return\r\n  }\r\n  if (log) {\r\n    console.groupCollapsed('[MidiParser] Preprocessing MIDI file data')\r\n  }\r\n  // Parse notes\r\n  let parsedTracks = []\r\n  const { tempoChanges, beatTypeChanges, keySignatureChanges } = getSignatureChanges(data.track)\r\n  for (const track of data.track) {\r\n    const t = parseMidiTrack(\r\n      track,\r\n      data.timeDivision,\r\n      tempoChanges,\r\n      beatTypeChanges,\r\n      keySignatureChanges,\r\n      log\r\n    )\r\n    if (t !== null) {\r\n      parsedTracks.push(t)\r\n    }\r\n  }\r\n  // Split MIDI format 0 data into tracks instead of having channels\r\n  if (data.formatType === 0 && splitFormat0IntoTracks && parsedTracks.length === 1) {\r\n    parsedTracks = splitFormat0(parsedTracks)\r\n  }\r\n  // Generate measure lines from tempo and beat type changes\r\n  const totalTime = max(parsedTracks, d => d?.totalTime ?? 0)\r\n  const measureLinePositions = getMeasureLines(tempoChanges, beatTypeChanges, totalTime)\r\n  // Get measure indices, the note's index where a new measure starts, for each track\r\n  for (const track of parsedTracks) {\r\n    track.measureIndices = getMeasureIndices(track.noteObjs, measureLinePositions)\r\n  }\r\n  // Resulting track\r\n  const result = {\r\n    tracks: parsedTracks,\r\n    totalTime,\r\n    tempoChanges,\r\n    beatTypeChanges,\r\n    keySignatureChanges,\r\n    measureLinePositions\r\n  }\r\n  if (log) {\r\n    console.log(`Got ${parsedTracks.length} MIDI tracks`, result)\r\n    console.groupEnd()\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Parses a single MIDI track and pushes it to parsedTracks if it contains notes\r\n *\r\n * @private\r\n * @param {object} track a MIDI track\r\n * @param {number} timeDivision MIDI time division\r\n * @param {object[]} tempoChanges array with tempo change events\r\n * @param {object[]} beatTypeChanges array with beat type change events\r\n * @param {object[]} keySignatureChanges array with key signature change events\r\n * @param {boolean} log if true, debug info will be logged to the console\r\n * @returns {object} parsed track\r\n */\r\nfunction parseMidiTrack (track, timeDivision, tempoChanges, beatTypeChanges, keySignatureChanges, log) {\r\n  const notes = []\r\n  let tempo = tempoChanges[0]?.tempo ?? 120\r\n  let currentTick = 0\r\n  let currentTime\r\n  let milliSecondsPerTick = getMillisecondsPerTick(tempo, timeDivision)\r\n  let tickOfLastTempoChange = 0\r\n  let timeOfLastTempoChange = 0\r\n  // This map stores note-on note that have not yet been finished by a note-off\r\n  const unfinishedNotes = new Map()\r\n  for (const event of track.event) {\r\n    const type = event.type\r\n    // Ignore delta time if it is a meta event (fixes some parsing issues)\r\n    if (type === EVENT_TYPES.meta) {\r\n      continue\r\n    }\r\n    currentTick += event.deltaTime\r\n    // Update beat type change times\r\n    for (const btc of beatTypeChanges) {\r\n      if (btc.time === undefined && btc.tick <= currentTick) {\r\n        const t = (btc.tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n        btc.time = roundToNDecimals(t, ROUNDING_PRECISION)\r\n      }\r\n    }\r\n    // Update key signature change times\r\n    for (const ksc of keySignatureChanges) {\r\n      if (ksc.time === undefined && ksc.tick <= currentTick) {\r\n        const t = (ksc.tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n        ksc.time = roundToNDecimals(t, ROUNDING_PRECISION)\r\n      }\r\n    }\r\n    // Handle last tempo change in track differently\r\n    let mostRecentTempoChange\r\n    if (tempoChanges.length > 0 && currentTick > tempoChanges[tempoChanges.length - 1].tick) {\r\n      mostRecentTempoChange = tempoChanges[tempoChanges.length - 1]\r\n    }\r\n    // Get current tempo, as soon as we are too far, 1 step back\r\n    for (let index = 1; index < tempoChanges.length; index++) {\r\n      const tick = tempoChanges[index].tick\r\n      if (tick > currentTick) {\r\n        const change = tempoChanges[index - 1]\r\n        mostRecentTempoChange = change\r\n        break\r\n      }\r\n    }\r\n    // React to tempo changes\r\n    if (mostRecentTempoChange && mostRecentTempoChange.tempo !== tempo) {\r\n      const tick = mostRecentTempoChange.tick\r\n      timeOfLastTempoChange = (tick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n      tickOfLastTempoChange = tick\r\n      mostRecentTempoChange.time = roundToNDecimals(timeOfLastTempoChange, ROUNDING_PRECISION)\r\n      tempo = mostRecentTempoChange.tempo\r\n      milliSecondsPerTick = getMillisecondsPerTick(tempo, timeDivision)\r\n    }\r\n    // Update current time in seconds\r\n    currentTime = (currentTick - tickOfLastTempoChange) * milliSecondsPerTick / 1000 + timeOfLastTempoChange\r\n    // Skip events that are neither note-on nor note-off\r\n    if (type !== EVENT_TYPES.noteOn && type !== EVENT_TYPES.noteOff) {\r\n      continue\r\n    }\r\n    const [pitch, velocity] = event.data\r\n    const channel = event.channel\r\n    const key = `${pitch} ${channel}`\r\n    if (type === EVENT_TYPES.noteOff || (type === EVENT_TYPES.noteOn && velocity === 0)) {\r\n      // Handle note-off\r\n      if (unfinishedNotes.has(key)) {\r\n        unfinishedNotes.get(key).end = roundToNDecimals(currentTime, ROUNDING_PRECISION)\r\n        unfinishedNotes.delete(key)\r\n      } else {\r\n        if (log) {\r\n          console.warn('Did not find an unfinished note for note-off event!')\r\n          console.log(event)\r\n        }\r\n      }\r\n    } else if (type === EVENT_TYPES.noteOn) {\r\n      // Handle note-on\r\n      const newNote = new Note(\r\n        pitch,\r\n        roundToNDecimals(currentTime, ROUNDING_PRECISION),\r\n        velocity,\r\n        channel\r\n      )\r\n      notes.push(newNote)\r\n      unfinishedNotes.set(key, newNote)\r\n    } else {\r\n      continue\r\n    }\r\n  }\r\n  // Fix missing note ends\r\n  const neededToFix = []\r\n  for (const note of notes) {\r\n    if (note.end === -1) {\r\n      note.end = roundToNDecimals(currentTime, ROUNDING_PRECISION)\r\n      neededToFix.push(note)\r\n    }\r\n  }\r\n  if (neededToFix.length > 0) {\r\n    console.warn(`had to fix ${neededToFix.length} notes`)\r\n    console.log(neededToFix)\r\n  }\r\n  // Save parsed track with meta information\r\n  const { trackName, instrument, instrumentName } = getInstrumentAndTrackName(track)\r\n  if (notes.length > 0) {\r\n    const parsedTrack = {\r\n      noteObjs: notes,\r\n      totalTime: currentTime,\r\n      trackName: trackName ?? 'Track',\r\n      instrument,\r\n      instrumentName: instrumentName ?? 'Unknown instrument'\r\n    }\r\n    return parsedTrack\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Finds out the name of the track and the instrument, if this data is available\r\n *\r\n * @private\r\n * @param {object} track MIDI track\r\n * @returns {{trackName, instrument, instrumentName}} meta data with either\r\n *      values or null when no information found\r\n */\r\nfunction getInstrumentAndTrackName (track) {\r\n  let trackName = null\r\n  let instrument = null\r\n  let instrumentName = null\r\n  for (const event of track.event) {\r\n    if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.trackName) {\r\n      trackName = event.data\r\n    }\r\n    if (event.type === EVENT_TYPES.programChange) {\r\n      instrument = event.data\r\n    }\r\n    if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.instrumentName) {\r\n      instrumentName = event.data\r\n    }\r\n  }\r\n  return {\r\n    trackName,\r\n    instrument,\r\n    instrumentName\r\n  }\r\n}\r\n\r\n/**\r\n * Caclulates the time positions of measure lines by looking at tempo and beat\r\n * type change events\r\n *\r\n * @private\r\n * @param {object[]} tempoChanges tempo change events\r\n * @param {object[]} beatTypeChanges beat type change events\r\n * @param {number} totalTime total time\r\n * @returns {number[]} measure line times in seconds\r\n */\r\nfunction getMeasureLines (tempoChanges, beatTypeChanges, totalTime) {\r\n  const measureLines = []\r\n  // Generate measure lines from tempo and beat type changes\r\n  let tempo = 120\r\n  let beats = 4\r\n  let beatType = 4\r\n  let currentTime = 0\r\n  let currentBeatsInMeasure = 0\r\n  let timeOfLastTempoChange = 0\r\n  let timeSinceLastTempoChange = 0\r\n  while (currentTime < totalTime) {\r\n    // Get current tempo and beat type\r\n    let mostRecentTempoChange\r\n    for (const t of tempoChanges) {\r\n      if (t.time <= currentTime) {\r\n        mostRecentTempoChange = t.tempo\r\n      }\r\n    }\r\n    if (mostRecentTempoChange && mostRecentTempoChange !== tempo) {\r\n      timeOfLastTempoChange = currentTime\r\n      timeSinceLastTempoChange = 0\r\n      tempo = mostRecentTempoChange\r\n    }\r\n    for (const b of beatTypeChanges) {\r\n      if (b.time <= currentTime) {\r\n        beats = b.beats\r\n        beatType = b.beatType\r\n      }\r\n    }\r\n    // Update time and beats\r\n    currentBeatsInMeasure++\r\n    const secondsPerBeat = bpmToSecondsPerBeat(tempo) / (beatType / 4)\r\n    timeSinceLastTempoChange += secondsPerBeat\r\n    currentTime = timeOfLastTempoChange + timeSinceLastTempoChange\r\n    if (currentBeatsInMeasure >= beats) {\r\n      // Measure is full\r\n      currentBeatsInMeasure = 0\r\n      measureLines.push(roundToNDecimals(currentTime, ROUNDING_PRECISION))\r\n    }\r\n  }\r\n  return measureLines\r\n}\r\n\r\n/**\r\n * For the notes of one track, computes the notes' indices where new measures\r\n * start.\r\n *\r\n * @param {Note[]} notes notes of a track\r\n * @param {numer[]} measureTimes times in seconds where new measures start\r\n * @returns {number[]} measure indices\r\n */\r\nfunction getMeasureIndices (notes, measureTimes) {\r\n  const measureIndices = []\r\n  const todo = [...measureTimes]\r\n  for (const [index, note] of notes.entries()) {\r\n    if (note.start >= todo[0]) {\r\n      todo.shift()\r\n      measureIndices.push(index)\r\n    }\r\n  }\r\n  return measureIndices\r\n}\r\n\r\n/**\r\n * Split MIDI format 0 data into tracks instead of having channels,\r\n * creates one track for each channel\r\n *\r\n * @private\r\n * @param {Note[][]} tracks parsed MIDI tracks\r\n * @returns {Note[][]} splitted tracks\r\n */\r\nfunction splitFormat0 (tracks) {\r\n  if (tracks.length > 1) {\r\n    console.warn('Splitting a format 0 file with more than 1 track will result in all but the first beeing lost!')\r\n  }\r\n  // console.log('Splitting format 0 file into tracks based on channel');\r\n  const grouped = group(tracks[0].noteObjs, d => d.channel)\r\n  // All tracks will share the meta infomation of the 0th track\r\n  // Assign the splitted-by-channel notes to their new tracks\r\n  const splittedTracks = []\r\n  for (const notes of grouped.values()) {\r\n    splittedTracks.push({\r\n      ...tracks[0],\r\n      noteObjs: notes\r\n    })\r\n  }\r\n  return splittedTracks\r\n}\r\n\r\n/**\r\n * Given the tempo and time division, returns the number of milliseconds\r\n * each MIDI time tick corresponds to\r\n *\r\n * @private\r\n * @param {number} tempo tempo\r\n * @param {number} timeDivision time division\r\n * @returns {number} milli seconds per tick\r\n */\r\nfunction getMillisecondsPerTick (tempo, timeDivision) {\r\n  const milliSecondsPerBeat = 1 / tempo * 60_000\r\n  const milliSecondsPerTick = milliSecondsPerBeat / timeDivision\r\n  return milliSecondsPerTick\r\n}\r\n\r\n/**\r\n * Retrieves all tempo and beat type changes from a MIDI file's tracks.\r\n *\r\n * @see https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * @private\r\n * @param {Array} tracks MIDI JSON file tracks\r\n * @returns {object} {tempoChanges, beatTypeChanges} as arrays of objects, which\r\n *      contain the MIDI tick and the new information\r\n */\r\nfunction getSignatureChanges (tracks) {\r\n  const tempoChanges = []\r\n  const beatTypeChanges = []\r\n  const keySignatureChanges = []\r\n  let currentTick = 0\r\n  let lastTempo = null\r\n  for (const track of tracks) {\r\n    for (const event of track.event) {\r\n      // Get timing of events\r\n      currentTick += event.deltaTime\r\n      // Tempo change\r\n      if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.setTempo) {\r\n        const milliSecondsPerQuarter = event.data / 1000\r\n        const tempo = Math.round(1 / (milliSecondsPerQuarter / 60_000))\r\n        // Ignore tempo changes that don't change the tempo\r\n        if (tempo !== lastTempo) {\r\n          tempoChanges.push({\r\n            tick: currentTick,\r\n            tempo,\r\n            time: currentTick === 0 ? 0 : undefined\r\n          })\r\n          lastTempo = tempo\r\n        }\r\n      }\r\n      // Beat type change\r\n      if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.timeSignature) {\r\n        const d = event.data\r\n        const beats = d[0]\r\n        const beatType = 2 ** d[1]\r\n        const newEntry = {\r\n          tick: currentTick,\r\n          beats,\r\n          beatType\r\n        }\r\n        if (beatTypeChanges.length === 0) {\r\n          beatTypeChanges.push(newEntry)\r\n        } else {\r\n          // If it id not change, do not add\r\n          const last = beatTypeChanges[beatTypeChanges.length - 1]\r\n          if (last.beats !== beats || last.beatType !== beatType) {\r\n            beatTypeChanges.push(newEntry)\r\n          }\r\n        }\r\n        // console.log(`Metro: ${d[2]}`);\r\n        // console.log(`32nds: ${d[3]}`);\r\n      }\r\n      // Key change\r\n      if (event.type === EVENT_TYPES.meta && event.metaType === META_TYPES.keySignature) {\r\n        // console.log('keychange', event);\r\n        const d = event.data\r\n        if (!KEY_SIG_MAP.has(d)) {\r\n          console.warn('[MidiParser] Invalid key signature', d)\r\n        } else {\r\n          const { key, scale } = KEY_SIG_MAP.get(d)\r\n          const newEntry = {\r\n            tick: currentTick,\r\n            key,\r\n            scale\r\n          }\r\n          if (keySignatureChanges.length === 0) {\r\n            keySignatureChanges.push(newEntry)\r\n          } else {\r\n            // If it id not change, do not add\r\n            const last = keySignatureChanges[keySignatureChanges.length - 1]\r\n            if (last.key !== key || last.scale !== scale) {\r\n              keySignatureChanges.push(newEntry)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Default values\r\n  if (tempoChanges.length === 0 || tempoChanges[0].time > 0) {\r\n    tempoChanges.unshift({ tempo: 120, time: 0 })\r\n  }\r\n  if (beatTypeChanges.length === 0 || beatTypeChanges[0].time > 0) {\r\n    beatTypeChanges.unshift({ beats: 4, beatType: 4, time: 0 })\r\n  }\r\n  if (keySignatureChanges.length === 0 || keySignatureChanges[0].time > 0) {\r\n    keySignatureChanges.unshift({ key: 'C', scale: 'major', time: 0 })\r\n  }\r\n  return { tempoChanges, beatTypeChanges, keySignatureChanges }\r\n}\r\n\r\n/**\r\n * MIDI event types and meta types and their codes\r\n *\r\n * @see https://github.com/colxi/midi-parser-js/wiki/MIDI-File-Format-Specifications\r\n * Event Type         Value   Value decimal    Parameter 1         Parameter 2\r\n * Note Off           0x8       8              note number         velocity\r\n * Note On            0x9       9              note number         velocity\r\n * Note Aftertouch    0xA      10              note number         aftertouch value\r\n * Controller         0xB      11              controller number   controller value\r\n * Program Change     0xC      12              program number      not used\r\n * Channel Aftertouch 0xD      13              aftertouch value    not used\r\n * Pitch Bend         0xE      14              pitch value (LSB)   pitch value (MSB)\r\n * Meta               0xFF    255                 parameters depend on meta type\r\n * @type {object}\r\n */\r\nconst EVENT_TYPES = {\r\n  noteOff: 0x8,\r\n  noteOn: 0x9,\r\n  noteAftertouch: 0xA,\r\n  controller: 0xB,\r\n  programChange: 0xC,\r\n  channelAftertouch: 0xD,\r\n  pitchBend: 0xE,\r\n  meta: 0xFF\r\n}\r\n/**\r\n * @type {object}\r\n */\r\nconst META_TYPES = {\r\n  sequenceNumber: 0x0,\r\n  textEvent: 0x1,\r\n  copyright: 0x2,\r\n  trackName: 0x3,\r\n  instrumentName: 0x4,\r\n  lyrics: 0x5,\r\n  marker: 0x6,\r\n  cuePoint: 0x7,\r\n  channelPrefix: 0x20,\r\n  endOfTrack: 0x2F,\r\n  setTempo: 0x51,\r\n  smpteOffset: 0x54,\r\n  timeSignature: 0x58,\r\n  keySignature: 0x59,\r\n  sequencerSpecific: 0x7F\r\n}\r\n\r\n/**\r\n * Maps needed for key signature detection from number of sharps / flats\r\n *\r\n * @type {Map<number,object>}\r\n * @see https://www.recordingblogs.com/wiki/midi-key-signature-meta-message\r\n */\r\nconst KEY_SIG_MAP = new Map([\r\n  // major\r\n  [0xF9_00, { key: 'Cb', scale: 'major' }],\r\n  [0xFA_00, { key: 'Gb', scale: 'major' }],\r\n  [0xFB_00, { key: 'Db', scale: 'major' }],\r\n  [0xFC_00, { key: 'Ab', scale: 'major' }],\r\n  [0xFD_00, { key: 'Eb', scale: 'major' }],\r\n  [0xFE_00, { key: 'Bb', scale: 'major' }],\r\n  [0xFF_00, { key: 'F', scale: 'major' }],\r\n  [0x00_00, { key: 'C', scale: 'major' }],\r\n  [0x01_00, { key: 'G', scale: 'major' }],\r\n  [0x02_00, { key: 'D', scale: 'major' }],\r\n  [0x03_00, { key: 'A', scale: 'major' }],\r\n  [0x04_00, { key: 'E', scale: 'major' }],\r\n  [0x05_00, { key: 'B', scale: 'major' }],\r\n  [0x06_00, { key: 'F#', scale: 'major' }],\r\n  [0x07_00, { key: 'C#', scale: 'major' }],\r\n  // minor\r\n  [0xF9_01, { key: 'Ab', scale: 'minor' }],\r\n  [0xFA_01, { key: 'Eb', scale: 'minor' }],\r\n  [0xFB_01, { key: 'Bb', scale: 'minor' }],\r\n  [0xFC_01, { key: 'F', scale: 'minor' }],\r\n  [0xFD_01, { key: 'C', scale: 'minor' }],\r\n  [0xFE_01, { key: 'G', scale: 'minor' }],\r\n  [0xFF_01, { key: 'D', scale: 'minor' }],\r\n  [0x00_01, { key: 'A', scale: 'minor' }],\r\n  [0x01_01, { key: 'E', scale: 'minor' }],\r\n  [0x02_01, { key: 'B', scale: 'minor' }],\r\n  [0x03_01, { key: 'F#', scale: 'minor' }],\r\n  [0x04_01, { key: 'C#', scale: 'minor' }],\r\n  [0x05_01, { key: 'G#', scale: 'minor' }],\r\n  [0x06_01, { key: 'D#', scale: 'minor' }],\r\n  [0x07_01, { key: 'A#', scale: 'minor' }]\r\n])\r\n", "import { getMidiNoteByNr } from '../fileFormats/Midi.js'\n\n/**\n * Stores a sequence of pitches and provides some methods to simplify and\n * manipulate it.\n *\n * @todo implement keepOnlyHighestConcurrentNotes\n */\nclass PitchSequence {\n  /**\n     * @param {number[]} pitches pitches\n     */\n  constructor (pitches = []) {\n    this._pitches = pitches\n  }\n\n  /**\n     * Creates a pitch sequence from an array of Notes\n     *\n     * @param {Note[]} notes notes\n     * @returns {PitchSequence} pitch sequence\n     */\n  static fromNotes (notes = []) {\n    const pitches = [...notes]\n      .sort((a, b) => {\n        if (a.start === b.start) {\n          return a.pitch - b.pitch\n        }\n        return a.start - b.start\n      })\n      .map(d => d.pitch)\n    return new PitchSequence(pitches)\n  }\n\n  /**\n     * @param {string} string a string of Unicode characters\n     * @returns {PitchSequence} pitch sequence\n     */\n  static fromCharString (string) {\n    if (!string || string.length === 0) { return new PitchSequence() }\n    const pitches = [...string].map((d, index) => string.charCodeAt(index))\n    return new PitchSequence(pitches)\n  }\n\n  /**\n     * @returns {number[]} pitches\n     */\n  getPitches () {\n    return this._pitches\n  }\n\n  /**\n     * @returns {number} number of pitches\n     */\n  length () {\n    return this._pitches.length\n  }\n\n  /**\n     * Turns pitch sequence into a string by turning each  pitch into a character\n     * (based on Unicode index)\n     *\n     * @returns {string} string representation of note pitches\n     */\n  toCharString () {\n    if (!this._pitches || this._pitches.length === 0) {\n      return ''\n    }\n    return String.fromCharCode(...this._pitches)\n  }\n\n  /**\n     * @returns {string} a string with the notes' names\n     */\n  toNoteNameString () {\n    return this._pitches.map(p => getMidiNoteByNr(p).label).join(' ')\n  }\n\n  /**\n     * Reverses the order of pitches in this PitchSequence\n     *\n     * @returns {PitchSequence} this\n     */\n  reverse () {\n    this._pitches = this._pitches.reverse()\n    return this\n  }\n\n  /**\n     * Takes a sequence of MIDI pitches and nomralizes them to be in [0, 11]\n     *\n     * @returns {PitchSequence} this\n     */\n  removeOctaves () {\n    this._pitches = this._pitches.map(d => d % 12)\n    return this\n  }\n\n  /**\n     * Transforms note pitches to intervals, i.e. diffrences between to subsequent\n     * notes: C, C#, C, D => 1, -1, 2\n     *\n     * @returns {number[]} intervals\n     */\n  toIntervals () {\n    const p = this._pitches\n    if (!p || p.length === 0 || p.length < 2) {\n      return []\n    }\n    const result = Array.from({ length: p.length - 1 })\n    for (let index = 1; index < p.length; index++) {\n      result[index - 1] = p[index] - p[index - 1]\n    }\n    return result\n  }\n\n  /**\n     * @returns {PitchSequence} clone\n     */\n  clone () {\n    return new PitchSequence(this._pitches)\n  }\n\n  /**\n     * Returns true if this NoteArray and otherNoteArray have equal attributes.\n     *\n     * @param {NoteArray} otherPitchSequence another NoteArray\n     * @returns {boolean} true if equal\n     */\n  equals (otherPitchSequence) {\n    if (!(otherPitchSequence instanceof PitchSequence)) {\n      return false\n    }\n    const p = otherPitchSequence.getPitches()\n    if (this._pitches.length !== p.length) {\n      return false\n    }\n    for (const [index, element] of p.entries()) {\n      if (this._pitches[index] !== element) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport default PitchSequence\n", "import * as d3 from 'd3'\r\n\r\n/**\r\n * @module graphics/Canvas\r\n * @todo combine multiple canvases into one, by drawing over common background\r\n * @todo save canvas as file https://www.digitalocean.com/community/tutorials/js-canvas-toblob\r\n */\r\n\r\n/**\r\n * Sets up a canvas rescaled to device pixel ratio\r\n *\r\n * @param {HTMLCanvasElement} canvas canvas element\r\n * @returns {CanvasRenderingContext2D} canvas rendering context\r\n */\r\nexport function setupCanvas (canvas) {\r\n  // Fix issues when importing musicvis-lib in Node.js\r\n  if (!window) { return }\r\n  // Get the device pixel ratio, falling back to 1.\r\n  const dpr = window.devicePixelRatio || 1\r\n  // Get the size of the canvas in CSS pixels.\r\n  const rect = canvas.getBoundingClientRect()\r\n  // Give the canvas pixel dimensions of their CSS\r\n  // sizes times the device pixel ratio.\r\n  canvas.width = rect.width * dpr\r\n  canvas.height = rect.height * dpr\r\n  const context = canvas.getContext('2d')\r\n  // Scale all drawing operations by the dpr\r\n  context.scale(dpr, dpr)\r\n  return context\r\n}\r\n\r\n/**\r\n * Draws a stroked straight line.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the start\r\n * @param {number} y1 y coordinate of the start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @returns {void}\r\n * @example\r\n *      // Set the strokeStyle first\r\n *      context.strokeStyle = 'black';\r\n *      // Let's draw an X\r\n *      Canvas.drawLine(context, 0, 0, 50, 50);\r\n *      Canvas.drawLine(context, 0, 50, 50, 0);\r\n */\r\nexport function drawLine (context, x1, y1, x2, y2) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a stroked straight horizontal line.\r\n *\r\n * @deprecated Use context.fillRect(x1, y, x2-x1, strokeWidth)\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the start\r\n * @param {number} y y coordinate of the start\r\n * @param {number} x2 x coordinate of end\r\n * @returns {void}\r\n */\r\nexport function drawHLine (context, x1, y, x2) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y)\r\n  context.lineTo(x2, y)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a stroked straight vertical line.\r\n *\r\n * @deprecated Use context.fillRect(x1, y1, strokeWidth, y2-y1)\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of the start\r\n * @param {number} y1 y coordinate of the start\r\n * @param {number} y2 y coordinate of end\r\n * @returns {void}\r\n */\r\nexport function drawVLine (context, x, y1, y2) {\r\n  context.beginPath()\r\n  context.moveTo(x, y1)\r\n  context.lineTo(x, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a line that bows to the right in the direction of travel (looks like a\r\n * left turn), thereby encoding direction. Useful for node-link graphs.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the start\r\n * @param {number} y1 y coordinate of the start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {number} [strength=0.5] how much the bow deviates from a straight line\r\n *      towards the right, negative values will make bows to the left\r\n */\r\nexport function drawBowRight (context, x1, y1, x2, y2, strength = 0.5) {\r\n  const middleX = (x1 + x2) / 2\r\n  const middleY = (y1 + y2) / 2\r\n  const dx = x2 - x1\r\n  const dy = y2 - y1\r\n  const normalX = -dy\r\n  const normalY = dx\r\n  const cx = middleX + strength * normalX\r\n  const cy = middleY + strength * normalY\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.bezierCurveTo(cx, cy, cx, cy, x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a stroked circle.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} radius radius\r\n * @returns {void}\r\n */\r\nexport function drawCircle (context, x, y, radius) {\r\n  context.beginPath()\r\n  context.arc(x, y, radius, 0, 2 * Math.PI)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a filled circle.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} radius radius\r\n * @returns {void}\r\n */\r\nexport function drawFilledCircle (context, x, y, radius) {\r\n  context.beginPath()\r\n  context.arc(x, y, radius, 0, 2 * Math.PI)\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a filled triangle like this: /\\\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} halfSize half of the size\r\n * @returns {void}\r\n */\r\nexport function drawTriangle (context, x, y, halfSize) {\r\n  context.beginPath()\r\n  context.moveTo(x - halfSize, y + halfSize)\r\n  context.lineTo(x + halfSize, y + halfSize)\r\n  context.lineTo(x, y - halfSize)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a diamond like this: <>\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} halfSize half of the size\r\n * @returns {void}\r\n */\r\nexport function drawDiamond (context, x, y, halfSize) {\r\n  context.beginPath()\r\n  context.moveTo(x - halfSize, y)\r\n  context.lineTo(x, y - halfSize)\r\n  context.lineTo(x + halfSize, y)\r\n  context.lineTo(x, y + halfSize)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws an X\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of center\r\n * @param {number} y y coordinate of center\r\n * @param {number} halfSize half of the size\r\n * @returns {void}\r\n */\r\nexport function drawX (context, x, y, halfSize) {\r\n  context.save()\r\n  context.lineWidth = 2\r\n  context.beginPath()\r\n  context.moveTo(x - halfSize, y - halfSize)\r\n  context.lineTo(x + halfSize, y + halfSize)\r\n  context.moveTo(x - halfSize, y + halfSize)\r\n  context.lineTo(x + halfSize, y - halfSize)\r\n  context.stroke()\r\n  context.restore()\r\n}\r\n\r\n/**\r\n * Draws a trapezoid that looks like a rectangle but gets narrower at the right\r\n * end, so better show where one ends and the next begins.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of top left\r\n * @param {number} y y coordinate of top left\r\n * @param {number} width width\r\n * @param {number} height height (of left side)\r\n * @param {number} height2 height (of right side)\r\n * @returns {void}\r\n */\r\nexport function drawNoteTrapezoid (context, x, y, width, height, height2) {\r\n  context.beginPath()\r\n  context.moveTo(x, y)\r\n  context.lineTo(x, y + height)\r\n  context.lineTo(x + width, y + (height / 2 + height2 / 2))\r\n  context.lineTo(x + width, y + (height / 2 - height2 / 2))\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a trapezoid that looks like a rectangle but gets narrower at the top\r\n * end, so better show where one ends and the next begins.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of bounding rect's top left\r\n * @param {number} y y coordinate of bounding rect's top left\r\n * @param {number} width width (of bounding rect / bottom side)\r\n * @param {number} height height\r\n * @param {number} width2 width (of top side)\r\n * @returns {void}\r\n */\r\nexport function drawNoteTrapezoidUpwards (context, x, y, width, height, width2) {\r\n  context.beginPath()\r\n  context.lineTo(x, y + height)\r\n  context.lineTo(x + width, y + height)\r\n  context.lineTo(x + (width / 2 + width2 / 2), y)\r\n  context.lineTo(x + (width / 2 - width2 / 2), y)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a rectangle with rounded corners, does not fill or stroke by itself\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x coordinate of bounding rect's top left\r\n * @param {number} y y coordinate of bounding rect's top left\r\n * @param {number} width width\r\n * @param {number} height height\r\n * @param {number} radius rounding radius\r\n * @returns {void}\r\n */\r\nexport function drawRoundedRect (context, x, y, width, height, radius) {\r\n  if (width < 0) { return }\r\n  context.beginPath()\r\n  context.moveTo(x + radius, y)\r\n  context.lineTo(x + width - radius, y)\r\n  context.quadraticCurveTo(x + width, y, x + width, y + radius)\r\n  context.lineTo(x + width, y + height - radius)\r\n  context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\r\n  context.lineTo(x + radius, y + height)\r\n  context.quadraticCurveTo(x, y + height, x, y + height - radius)\r\n  context.lineTo(x, y + radius)\r\n  context.quadraticCurveTo(x, y, x + radius, y)\r\n  context.closePath()\r\n}\r\n\r\n/**\r\n * Draws a horizontal, then vertical line to connect two points (or the other\r\n * way round when xFirst == false)\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of start\r\n * @param {number} y1 y coordinate of start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {boolean} [xFirst=true] controls whether to go first in x or y direction\r\n */\r\nexport function drawCornerLine (context, x1, y1, x2, y2, xFirst = true) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  xFirst\r\n    ? context.lineTo(x2, y1)\r\n    : context.lineTo(x1, y2)\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a rounded version of drawCornerLine().\r\n * Only works for dendrograms drawn from top-dowm, use\r\n * drawRoundedCornerLineRightLeft for right-to-left dendrograms.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of start\r\n * @param {number} y1 y coordinate of start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {number} [maxRadius=25] maximum radius, fixes possible overlaps\r\n */\r\nexport function drawRoundedCornerLine (context, x1, y1, x2, y2, maxRadius = 25) {\r\n  const xDist = Math.abs(x2 - x1)\r\n  const yDist = Math.abs(y2 - y1)\r\n  const radius = Math.min(xDist, yDist, maxRadius)\r\n  const cx = x1 < x2 ? x2 - radius : x2 + radius\r\n  const cy = y1 < y2 ? y1 + radius : y1 - radius\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  if (x1 < x2) {\r\n    context.arc(cx, cy, radius, 1.5 * Math.PI, 2 * Math.PI)\r\n  } else {\r\n    context.arc(cx, cy, radius, 1.5 * Math.PI, Math.PI, true)\r\n  }\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a rounded version of drawRoundedCornerLine for right-to-left\r\n * dendrograms.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of start\r\n * @param {number} y1 y coordinate of start\r\n * @param {number} x2 x coordinate of end\r\n * @param {number} y2 y coordinate of end\r\n * @param {number} [maxRadius=25] maximum radius, fixes possible overlaps\r\n */\r\nexport function drawRoundedCornerLineRightLeft (\r\n  context,\r\n  x1,\r\n  y1,\r\n  x2,\r\n  y2,\r\n  maxRadius = 25\r\n) {\r\n  const xDist = Math.abs(x2 - x1)\r\n  const yDist = Math.abs(y2 - y1)\r\n  const radius = Math.min(xDist, yDist, maxRadius)\r\n  const cx = x1 < x2 ? x1 + radius : x1 - radius\r\n  const cy = y1 < y2 ? y2 - radius : y2 + radius\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  if (y1 < y2) {\r\n    context.arc(cx, cy, radius, 0, 0.5 * Math.PI)\r\n  } else {\r\n    context.arc(cx, cy, radius, 0, 1.5 * Math.PI, true)\r\n  }\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a hexagon, call context.fill() or context.stroke() afterwards.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} cx center x\r\n * @param {number} cy center y\r\n * @param {number} radius radius of the circle on which the points are placed\r\n */\r\nexport function drawHexagon (context, cx, cy, radius) {\r\n  context.beginPath()\r\n  for (let index = 0; index < 6; index++) {\r\n    // Start at 30\u00B0 TODO: allow to specify\r\n    const angle = (60 * index + 30) / 180 * Math.PI\r\n    const x = cx + Math.cos(angle) * radius\r\n    const y = cy + Math.sin(angle) * radius\r\n    if (index === 0) {\r\n      context.moveTo(x, y)\r\n    } else {\r\n      context.lineTo(x, y)\r\n    }\r\n  }\r\n  context.closePath()\r\n}\r\n\r\n/**\r\n * Draws a Bezier curve to connect to points in X direction.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the first point\r\n * @param {number} y1 y coordinate of the first point\r\n * @param {number} x2 x coordinate of the second point\r\n * @param {number} y2 y coordinate of the second point\r\n */\r\nexport function drawBezierConnectorX (context, x1, y1, x2, y2) {\r\n  const deltaX = (x2 - x1) / 2\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.bezierCurveTo(x1 + deltaX, y1, x1 + deltaX, y2, x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a Bezier curve to connect to points in Y direction.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the first point\r\n * @param {number} y1 y coordinate of the first point\r\n * @param {number} x2 x coordinate of the second point\r\n * @param {number} y2 y coordinate of the second point\r\n */\r\nexport function drawBezierConnectorY (context, x1, y1, x2, y2) {\r\n  const deltaY = (y2 - y1) / 2\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  context.bezierCurveTo(x1, y1 + deltaY, x2, y1 + deltaY, x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a rounded corner, requires x and y distances between points to be\r\n * equal.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x1 x coordinate of the first point\r\n * @param {number} y1 y coordinate of the first point\r\n * @param {number} x2 x coordinate of the second point\r\n * @param {number} y2 y coordinate of the second point\r\n * @param {boolean} turnLeft true for left turn, false for right turn\r\n * @param {number} roundness corner roundness between 0 (sharp) and 1 (round)\r\n */\r\nexport function drawRoundedCorner (context, x1, y1, x2, y2, turnLeft = true, roundness = 1) {\r\n  context.beginPath()\r\n  context.moveTo(x1, y1)\r\n  if (x1 === x2 || y1 === y2) {\r\n    context.lineTo(x2, y2)\r\n    context.stroke()\r\n    return\r\n  }\r\n  const radius = Math.abs(x2 - x1) * roundness\r\n  let cx\r\n  let cy\r\n  if (turnLeft) {\r\n    if (x1 < x2 && y1 < y2) {\r\n      cx = x1 + radius\r\n      cy = y2 - radius\r\n      context.arc(cx, cy, radius, 1 * Math.PI, 0.5 * Math.PI, true)\r\n    } else if (x1 > x2 && y1 < y2) {\r\n      cx = x2 + radius\r\n      cy = y1 + radius\r\n      context.arc(cx, cy, radius, 1.5 * Math.PI, 1 * Math.PI, true)\r\n    } else if (x1 > x2 && y1 > y2) {\r\n      cx = x1 - radius\r\n      cy = y2 + radius\r\n      context.arc(cx, cy, radius, 0, 1.5 * Math.PI, true)\r\n    } else {\r\n      cx = x2 - radius\r\n      cy = y1 - radius\r\n      context.arc(cx, cy, radius, 0.5 * Math.PI, 0, true)\r\n    }\r\n  } else {\r\n    if (x1 < x2 && y1 < y2) {\r\n      cx = x2 - radius\r\n      cy = y1 + radius\r\n      context.arc(cx, cy, radius, 1.5 * Math.PI, 0)\r\n    } else if (x1 > x2 && y1 < y2) {\r\n      cx = x1 - radius\r\n      cy = y2 - radius\r\n      context.arc(cx, cy, radius, 0, 0.5 * Math.PI)\r\n    } else if (x1 > x2 && y1 > y2) {\r\n      cx = x2 + radius\r\n      cy = y1 - radius\r\n      context.arc(cx, cy, radius, 0.5 * Math.PI, 1 * Math.PI, false)\r\n    } else {\r\n      cx = x1 + radius\r\n      cy = y2 + radius\r\n      context.arc(cx, cy, radius, Math.PI, 1.5 * Math.PI, false)\r\n    }\r\n  }\r\n  context.lineTo(x2, y2)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws an arc that connects similar parts.\r\n * Both parts must have the same width in pixels.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} startX1 x coordinate of the start of the first part\r\n * @param {number} startX2 x coordinate of the start of the second part\r\n * @param {number} length length in pixels of the parts\r\n * @param {number} yBottom bottom baseline y coordinate\r\n */\r\nexport function drawArc (context, startX1, startX2, length, yBottom) {\r\n  // Get center and radius\r\n  const radius = (startX2 - startX1) / 2\r\n  const cx = startX1 + radius + length / 2\r\n  context.lineWidth = length\r\n  context.beginPath()\r\n  context.arc(cx, yBottom, radius, Math.PI, 2 * Math.PI)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a more complex path and fills it.\r\n * Two arcs: One from startX1 to endX2 on the top, one from endX1 to startX2\r\n * below it.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} startX1 x coordinate of the start of the first part\r\n * @param {number} endX1 x coordinate of the end of the first part\r\n * @param {number} startX2 x coordinate of the start of the second part\r\n * @param {number} endX2 x coordinate of the end of the second part\r\n * @param {number} yBottom bottom baseline y coordinate\r\n */\r\nexport function drawAssymetricArc (context, startX1, endX1, startX2, endX2, yBottom) {\r\n  // Get center and radius\r\n  const radiusTop = (endX2 - startX1) / 2\r\n  if (radiusTop < 0) {\r\n    return\r\n  }\r\n  let radiusBottom = (startX2 - endX1) / 2\r\n  if (radiusBottom < 0) {\r\n    radiusBottom = 0\r\n  }\r\n  const cxTop = startX1 + radiusTop\r\n  const cxBottom = endX1 + radiusBottom\r\n  context.beginPath()\r\n  context.moveTo(startX1, yBottom)\r\n  context.arc(cxTop, yBottom, radiusTop, Math.PI, 2 * Math.PI)\r\n  context.lineTo(startX2, yBottom)\r\n  context.arc(cxBottom, yBottom, radiusBottom, 2 * Math.PI, Math.PI, true)\r\n  context.closePath()\r\n  context.fill()\r\n}\r\n\r\n/**\r\n * Draws a horizontal bracket like this |_____| (bottom)\r\n * or this |\"\"\"\"\"\"| (top).\r\n * Use a positive h for bottom and a negative one for top.\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number} x x position of the bracket's horizontal lines\r\n * @param {number} y y position of the bracket's horizontal lines\r\n * @param {number} w width of the bracket's horizontal lines\r\n * @param {number} h height of the bracket's vertical ticks\r\n */\r\nexport function drawBracketH (context, x, y, w, h) {\r\n  context.beginPath()\r\n  context.moveTo(x, y + h)\r\n  context.lineTo(x, y)\r\n  context.lineTo(x + w, y)\r\n  context.lineTo(x + w, y + h)\r\n  context.stroke()\r\n}\r\n\r\n/**\r\n * Draws a quadratic matrix onto a canvas\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {number[][]} matrix matrix\r\n * @param {number} [x=0] x position of the top left corner\r\n * @param {number} [y=0] y position of the top left corner\r\n * @param {number} [size=400] width and height in pixel\r\n * @param {Function} colorMap colormap from [min, max] to a color\r\n */\r\nexport function drawMatrix (\r\n  context,\r\n  matrix,\r\n  x = 0,\r\n  y = 0,\r\n  size = 400,\r\n  colorScale,\r\n  colorMap = d3.interpolateViridis\r\n) {\r\n  const cellSize = size / matrix.length\r\n  const paddedSize = cellSize * 1.01\r\n  colorScale = colorScale || d3\r\n    .scaleLinear()\r\n    .domain(d3.extent(matrix.flat()))\r\n    .range([1, 0])\r\n  for (let row = 0; row < matrix.length; row++) {\r\n    for (let col = 0; col < matrix.length; col++) {\r\n      context.fillStyle = colorMap(colorScale(matrix[row][col]))\r\n      context.fillRect(x, y, paddedSize, paddedSize)\r\n      x += cellSize\r\n    }\r\n    y += cellSize\r\n  }\r\n}\r\n\r\n/**\r\n * Draws a color ramp\r\n *\r\n * @param {CanvasRenderingContext2D} context canvas rendering context\r\n * @param {Function} colorMap colormap from [min, max] to a color\r\n */\r\nexport function drawColorRamp (context, w = 100, h = 10, colorMap = d3.interpolateRainbow) {\r\n  const scaleColor = d3.scaleLinear().domain([0, w])\r\n  for (let x = 0; x < w; ++x) {\r\n    context.fillStyle = colorMap(scaleColor(x))\r\n    context.fillRect(x, 0, 1.1, h)\r\n  }\r\n}\r\n", "/**\r\n * Allows to record audio blobs.\r\n *\r\n * @module input/AudioRecorder\r\n * @example <caption>Usage (only in async functions)</caption>\r\n *     const recorder = await recordAudio();\r\n *     recorder.start();\r\n *     // ...\r\n *     const audio = await recorder.stop();\r\n * stop() returns a Blob with audio data\r\n * @see https://medium.com/@bryanjenningz/how-to-record-and-play-audio-in-javascript-faa1b2b3e49b\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\r\n * @returns {Promise} audio recorder\r\n */\r\nexport const recordAudio = () => {\r\n  // eslint-disable-next-line\r\n  return new Promise(async resolve => {\r\n    let stream\r\n    try {\r\n      stream = await navigator.mediaDevices.getUserMedia({ audio: true })\r\n    } catch (error) {\r\n      console.warn('[AudioInput] Cannot access audio', error)\r\n      return\r\n    }\r\n    const options = {\r\n      audioBitsPerSecond: 128_000\r\n    }\r\n    const mediaRecorder = new MediaRecorder(stream, options)\r\n    let audioChunks = []\r\n    // Add new data when it arrives\r\n    mediaRecorder.addEventListener('dataavailable', event => {\r\n      audioChunks.push(event.data)\r\n    })\r\n    // Starts recording\r\n    const start = () => {\r\n      if (!mediaRecorder) {\r\n        console.warn('[AudioInput] Cannot record audio, no microphone?')\r\n        return\r\n      }\r\n      if (mediaRecorder.state === 'recording') { return }\r\n      console.log(`[AudioInput] Recording @ ${mediaRecorder.audioBitsPerSecond} b/s`)\r\n      audioChunks = []\r\n      mediaRecorder.start()\r\n    }\r\n    // Stops recording\r\n    const stop = () =>\r\n      new Promise(resolve => {\r\n        if (!mediaRecorder) { return }\r\n        console.log('[AudioInput] Stopping audio recording')\r\n        mediaRecorder.addEventListener('stop', () => {\r\n          // Audio blob contains the data to store on the server\r\n          const blobOptions = { type: mediaRecorder.mimeType }\r\n          const audioBlob = new Blob(audioChunks, blobOptions)\r\n          // console.log(audioBlob);\r\n          resolve(audioBlob)\r\n        })\r\n        mediaRecorder.stop()\r\n      })\r\n    resolve({ start, stop })\r\n  })\r\n}\r\n", "import Note from '../types/Note.js'\n\n/**\n * Records incoming MIDI messages from a MIDI device.\n *\n * @param {Function} [onMessage] a callback function to get notfied of incoming\n *      messages\n * @module input/MidiRecorder\n * @example <caption>Usage (only in async functions)</caption>\n *     const recorder = await recordMidi();\n *     recorder.start();\n *     const notes = recorder.stop();\n * @returns {Promise} MIDI recorder\n */\nexport const recordMidi = (onMessage) => {\n  // eslint-disable-next-line\n  return new Promise(async resolve => {\n    let midiAccess\n    try {\n      midiAccess = await navigator.requestMIDIAccess()\n    } catch (error) {\n      console.warn('[MidiInput] Cannot access MIDI', error)\n      return\n    }\n    let messages = []\n    // Add new data when it arrives\n    const addMessage = (message) => {\n      if (onMessage) {\n        onMessage(message)\n      }\n      messages.push(message)\n    }\n    // Starts recording\n    const start = () => {\n      if (!midiAccess) {\n        console.warn('[MidiInput] Cannot record MIDI')\n        return\n      }\n      // Do this here, in case devices changed\n      for (const input of midiAccess.inputs.values()) {\n        input.onmidimessage = addMessage\n      }\n      console.log('[MidiInput] Starting recording')\n      messages = []\n    }\n    // Stops recording\n    const stop = () => {\n      if (!midiAccess) { return }\n      console.log('[MidiInput] Stopping recording')\n      // Process messages\n      const notes = processMidiMessagesToNotes(messages)\n      return notes\n    }\n    resolve({ start, stop })\n  })\n}\n\n/**\n * Parses MIDI messages to Notes\n *\n * @private\n * @param {Oject[]} messages MIDI messages as they come from the WebMidi API\n * @returns {Note[]} notes\n */\nfunction processMidiMessagesToNotes (messages) {\n  // Keep track of currently sounding notes\n  const currentNotes = new Map()\n  const notes = []\n  for (const message of messages) {\n    const device = message.target.name\n    const time = message.timeStamp\n    const commandAndChannel = message.data[0]\n    const channel = commandAndChannel % 16\n    const command = commandAndChannel - channel\n    const pitch = message.data[1]\n    // A velocity value might not be included with a noteOff command\n    const velocity = (message.data.length > 2) ? message.data[2] : 0\n    switch (command) {\n      case 128:\n        noteOff(notes, currentNotes, device, time, pitch, channel)\n        break\n      case 144:\n        if (velocity > 0) {\n          noteOn(currentNotes, device, time, pitch, channel, velocity)\n        } else {\n          noteOff(notes, currentNotes, device, time, pitch, channel)\n        }\n        break\n      case 224:\n        // TODO: handle pitch wheel?\n        break\n      default:\n      // TODO: handle other commands?\n    }\n  }\n  // Look for unfinished notes\n  if (currentNotes.size > 0) {\n    console.warn(`[MidiInput] Got ${currentNotes.size} unfinished notes`)\n  }\n  notes.sort((a, b) => a.start - b.start)\n  return notes\n}\n\n/**\n * Handles note-on messages\n *\n * @private\n * @param {Map} currentNotes Map with started but not yet ended notes\n * @param {string} device device name\n * @param {number} time time stamp of the message\n * @param {number} pitch MIDI pitch in [0, 127]\n * @param {number} channel MIDI channel\n * @param {number} velocity MIDI velocity\n */\nfunction noteOn (currentNotes, device, time, pitch, channel, velocity) {\n  const note = new Note(pitch, time / 1000, velocity, channel)\n  const key = `${device}-${channel}-${pitch}`\n  currentNotes.set(key, note)\n}\n\n/**\n * Handles note-off messages\n *\n * @private\n * @param {Note[]} notes finished notes\n * @param {Map} currentNotes Map with started but not yet ended notes\n * @param {string} device device name\n * @param {number} time time stamp of the message\n * @param {number} pitch MIDI pitch in [0, 127]\n * @param {number} channel MIDI channel\n */\nfunction noteOff (notes, currentNotes, device, time, pitch, channel) {\n  // Look for note start\n  const key = `${device}-${channel}-${pitch}`\n  if (!currentNotes.has(key)) {\n    console.warn(`[MidiInput] Missing note-on for note-off with key ${key}`)\n    return\n  }\n  const note = currentNotes.get(key)\n  note.end = time / 1000\n  notes.push(note)\n  currentNotes.delete(key)\n}\n", "import Note from '../types/Note.js'\n\n/**\n * Handles incoming MIDI messages from a MIDI device.\n *\n * @module input/MidiInputManager\n */\nclass MidiInputManager {\n  /**\n       * Constructor with callback functions\n       *\n       * @param {Function} getMidiLiveData a function called by this object to get\n       *      the currently recorded MIDI notes from App.js, where the\n       *      MidiInputManager instance should be created\n       *      Example for how to defined getMidiLiveData as method in App.js:\n       *          getMidiLiveData = () => this.state.midiLiveData;\n       * @param {Function} setMidiLiveData a function called by this object to\n       *      update the currently MIDI notes in App.js\n       *      Example:\n       *          setMidiLiveData = (data) => {\n       *              // Work-around so note_off event handling can\n       *              // immediately find the note_on event\n       *              this.state.midiLiveData = data;\n       *              this.setState({ midiLiveData: data });\n       *          };\n       * @param {Function} addCurrentNote a function called by this object to add\n       *      a currently played note (e.g. currently pressed piano key)\n       *      Example:\n       *          addCurrentNote = (note) => {\n       *              const newMap = new Map(this.state.currentNotes).set(note.pitch, note);\n       *              this.setState({ currentNotes: newMap });\n       *          }\n       * @param {Function} removeCurrentNote a function called by this object to\n       *      remove a currently played note\n       *      Example:\n       *          removeCurrentNote = (pitch) => {\n       *              const newMap = new Map(this.state.currentNotes).delete(pitch);\n       *              this.setState({ currentNotes: newMap });\n       *          }\n       */\n  constructor (\n    getMidiLiveData,\n    setMidiLiveData,\n    addCurrentNote = () => { },\n    removeCurrentNote = () => { }\n  ) {\n    this._getMidiLiveData = getMidiLiveData\n    this._setMidiLiveData = setMidiLiveData\n    this._addCurrentNote = addCurrentNote\n    this._removeCurrentNote = removeCurrentNote\n    // Request MIDI access\n    if (navigator.requestMIDIAccess) {\n      navigator.requestMIDIAccess().then(this._onMIDISuccess, this._onMIDIFailure)\n    } else {\n      console.error('[MidiInput] WebMIDI is not supported in this browser.')\n      throw new Error('Browser does not support WebMIDI')\n    }\n  }\n\n  /**\n       * Handles a successful MIDI access request\n       *\n       * @private\n       * @param {*} midiAccess MIDI access\n       */\n  _onMIDISuccess (midiAccess) {\n    // console.log(midiAccess);\n    console.groupCollapsed(`[MidiInput] ${midiAccess.inputs.size} input devices`)\n    for (const input of midiAccess.inputs.values()) {\n      console.log(` - ${input.name}`)\n      input.onmidimessage = this._handleMIDIMessage\n    }\n    console.groupEnd()\n    // console.groupCollapsed(`[MidiInput] ${midiAccess.inputs.size} output devices`);\n    // for (let output of midiAccess.outputs.values()) {\n    //     console.log(` - ${output.name}`);\n    // }\n    // console.groupEnd();\n  };\n\n  /**\n       * Handles MIDI access errors\n       *\n       * @private\n       * @param {*} error error\n       */\n  _onMIDIFailure (error) {\n    console.error('[MidiInput] Cannot access MIDI devices.', error)\n  }\n\n  /**\n       * Handles incoming MIDI messages\n       *\n       * @private\n       * @param {*} message MIDI message\n       */\n  _handleMIDIMessage (message) {\n    // console.log(message);\n    const device = message.target.name\n    const commandAndChannel = message.data[0]\n    const channel = commandAndChannel % 16\n    const command = commandAndChannel - channel\n    const time = message.timeStamp\n    const pitch = message.data[1]\n    // A velocity value might not be included with a noteOff command\n    const velocity = (message.data.length > 2) ? message.data[2] : 0\n    switch (command) {\n      case 128:\n        this._noteOff(device, time, pitch, channel)\n        break\n      case 144:\n        if (velocity > 0) {\n          this._noteOn(device, time, pitch, channel, velocity)\n        } else {\n          this._noteOff(device, time, pitch, channel)\n        }\n        break\n      case 224:\n        // TODO: handle pitch wheel?\n        break\n      default:\n      // TODO: handle other commands?\n    }\n  };\n\n  /**\n       * Handles note-on messages\n       *\n       * @private\n       * @param {string} device device name\n       * @param {number} time time stamp of the message\n       * @param {number} pitch MIDI pitch in [0, 127]\n       * @param {number} channel MIDI channel\n       * @param {number} velocity MIDI velocity\n       */\n  _noteOn (device, time, pitch, channel, velocity) {\n    const note = new Note(pitch, time / 1000, velocity, channel)\n    // Add current note\n    this._addCurrentNote(note)\n    // Update recorded MIDI data\n    // TODO: probably better to only update on note-off,\n    // Then we need internal cache\n    // But this might be good, since only 'unfinished' notes need to be checked on note-off,\n    // so we can remove finished notes from the cache\n    let midiData = this._getMidiLiveData()\n    midiData = [...midiData, note]\n    this._setMidiLiveData(midiData)\n  }\n\n  /**\n       * Handles note-off messages by updating the end time of the corresponding\n       * note\n       *\n       * @private\n       * @param {string} device device name\n       * @param {number} time time stamp of the message\n       * @param {number} pitch MIDI pitch in [0, 127]\n       * @param {number} channel MIDI channel\n       */\n  _noteOff (device, time, pitch, channel) {\n    const midiData = this._getMidiLiveData()\n    if (midiData.length === 0) {\n      // If we have to wait for the setState to process, try again\n      setTimeout(() => this._noteOff(time, pitch), 10)\n    }\n    // Go back to latest note with the same pitch and channel and add the end time\n    let index = midiData.length - 1\n    // TODO: if there are multiple instruments or channels, check also for those\n    while (midiData[index].pitch !== pitch || midiData[index].channel !== channel) {\n      index--\n      if (index < 0) {\n        console.warn('[MidiInput] Did not find note-on event for note-off event!')\n        break\n      }\n    }\n    if (index >= 0) {\n      // Note successfully found, update data\n      midiData[index].end = time / 1000\n      this._setMidiLiveData(midiData)\n      this._removeCurrentNote(pitch)\n    }\n  }\n}\n\nexport default MidiInputManager\n", "import { randomNormal, randomInt, group } from 'd3'\r\nimport { choose, randFloat } from '../utils/MathUtils.js'\r\nimport Note from '../types/Note.js'\r\n\r\n/**\r\n * @module instruments/Drums\r\n */\r\n\r\n/**\r\n * Drum parts\r\n *\r\n * @type {object}\r\n */\r\nexport const DRUM_PARTS = {\r\n  Agogo: 'DRUM_PARTS.Agogo',\r\n  Cabasa: 'DRUM_PARTS.Cabasa',\r\n  Castanets: 'DRUM_PARTS.Castanets',\r\n  China: 'DRUM_PARTS.China',\r\n  Claves: 'DRUM_PARTS.Claves',\r\n  Conga: 'DRUM_PARTS.Conga',\r\n  Cowbell: 'DRUM_PARTS.Cowbell',\r\n  Crash: 'DRUM_PARTS.Crash',\r\n  Cuica: 'DRUM_PARTS.Cuica',\r\n  Cymbal: 'DRUM_PARTS.Cymbal',\r\n  Golpe: 'DRUM_PARTS.Golpe',\r\n  Grancassa: 'DRUM_PARTS.Grancassa',\r\n  Guiro: 'DRUM_PARTS.Guiro',\r\n  Hand_Clap: 'DRUM_PARTS.Hand Clap',\r\n  Hand: 'DRUM_PARTS.Hand',\r\n  Hi_Hat: 'DRUM_PARTS.Hi Hat',\r\n  High_Floor_Tom: 'DRUM_PARTS.High Floor Tom',\r\n  High_Tom: 'DRUM_PARTS.High Tom',\r\n  Kick: 'DRUM_PARTS.Kick',\r\n  Low_Floor_Tom: 'DRUM_PARTS.Low Floor Tom',\r\n  Low_Tom: 'DRUM_PARTS.Low Tom',\r\n  Mid_Tom: 'DRUM_PARTS.Mid Tom',\r\n  Pedal_Hi_Hat: 'DRUM_PARTS.Pedal Hi Hat',\r\n  Ride: 'DRUM_PARTS.Ride',\r\n  Right_Maraca: 'DRUM_PARTS.Right Maraca',\r\n  Shaker: 'DRUM_PARTS.Shaker',\r\n  Snare: 'DRUM_PARTS.Snare',\r\n  Splash: 'DRUM_PARTS.Splash',\r\n  Surdo: 'DRUM_PARTS.Surdo',\r\n  Timbale: 'DRUM_PARTS.Timbale',\r\n  Tinkle_Bell: 'DRUM_PARTS.Tinkle Bell',\r\n  Triangle: 'DRUM_PARTS.Triangle',\r\n  Vibraslap: 'DRUM_PARTS.Vibraslap',\r\n  Whistle_high: 'DRUM_PARTS.Whistle high',\r\n  Whistle_low: 'DRUM_PARTS.Whistle low',\r\n  Woodblock_high: 'DRUM_PARTS.Woodblock high',\r\n  Woodblock_low: 'DRUM_PARTS.Woodblock low'\r\n}\r\n\r\n/**\r\n * Drum actions\r\n *\r\n * @type {object}\r\n */\r\nexport const DRUM_ACTIONS = {\r\n  choke: 'DRUM_ACTIONS.choke',\r\n  finger: 'DRUM_ACTIONS.finger',\r\n  hit: 'DRUM_ACTIONS.hit',\r\n  mute: 'DRUM_ACTIONS.mute',\r\n  return: 'DRUM_ACTIONS.return',\r\n  scrapReturn: 'DRUM_ACTIONS.scrapReturn',\r\n  sideStick: 'DRUM_ACTIONS.sideStick',\r\n  slap: 'DRUM_ACTIONS.slap'\r\n}\r\n\r\n/**\r\n * Drum parts and actions\r\n *\r\n * @todo still incomplete\r\n * @type {object}\r\n */\r\nexport const DRUM_PARTS_ACTIONS = {\r\n  Agogo_high_hit: 'DRUM_PARTS_ACTIONS.Agogo high (hit)',\r\n  Agogo_low_hit: 'DRUM_PARTS_ACTIONS.Agogo low (hit)',\r\n  Cabasa_return: 'DRUM_PARTS_ACTIONS.Cabasa (return)',\r\n  Castanets_hit: 'DRUM_PARTS_ACTIONS.Castanets (hit)',\r\n  China_choke: 'DRUM_PARTS_ACTIONS.China (choke)',\r\n  Claves_hit: 'DRUM_PARTS_ACTIONS.Claves (hit)',\r\n  Conga_high_slap: 'DRUM_PARTS_ACTIONS.Conga high (slap)',\r\n  Conga_low_mute: 'DRUM_PARTS_ACTIONS.Conga low (mute)',\r\n  Cowbell_high_tip: 'DRUM_PARTS_ACTIONS.Cowbell high (tip)',\r\n  Crash_medium_choke: 'DRUM_PARTS_ACTIONS.Crash medium (choke)',\r\n  Cuica_mute: 'DRUM_PARTS_ACTIONS.Cuica (mute)',\r\n  Cuica_open: 'DRUM_PARTS_ACTIONS.Cuica (open)',\r\n  Cymbal_hit: 'DRUM_PARTS_ACTIONS.Cymbal (hit)',\r\n  Golpe_finger: 'DRUM_PARTS_ACTIONS.Golpe (finger)',\r\n  Grancassa_hit: 'DRUM_PARTS_ACTIONS.Grancassa (hit)',\r\n  Guiro_hit: 'DRUM_PARTS_ACTIONS.Guiro (hit)',\r\n  Guiro_scrap_return: 'DRUM_PARTS_ACTIONS.Guiro (scrap-return)',\r\n  Hand_Clap_hit: 'DRUM_PARTS_ACTIONS.Hand Clap (hit)',\r\n  Hand_slap: 'DRUM_PARTS_ACTIONS.Hand (slap)',\r\n  Hi_Hat_closed: 'DRUM_PARTS_ACTIONS.Hi-Hat (closed)',\r\n  Hi_Hat_open: 'DRUM_PARTS_ACTIONS.Hi-Hat (open)',\r\n  High_Floor_Tom_hit: 'DRUM_PARTS_ACTIONS.High Floor Tom (hit)',\r\n  High_Tom_hit: 'DRUM_PARTS_ACTIONS.High Tom (hit)',\r\n  Kick_hit: 'DRUM_PARTS_ACTIONS.Kick (hit)',\r\n  Low_Floor_Tom_hit: 'DRUM_PARTS_ACTIONS.Low Floor Tom (hit)',\r\n  Low_Tom_hit: 'DRUM_PARTS_ACTIONS.Low Tom (hit)',\r\n  Mid_Tom_hit: 'DRUM_PARTS_ACTIONS.Mid Tom (hit)',\r\n  Pedal_Hi_Hat_hit: 'DRUM_PARTS_ACTIONS.Pedal Hi-Hat (hit)',\r\n  Ride_choke: 'DRUM_PARTS_ACTIONS.Ride (choke)',\r\n  Right_Maraca_return: 'DRUM_PARTS_ACTIONS.Right Maraca (return)',\r\n  Shaker_return: 'DRUM_PARTS_ACTIONS.Shaker (return)',\r\n  Snare_hit: 'DRUM_PARTS_ACTIONS.Snare (hit)',\r\n  Snare_side_stick: 'DRUM_PARTS_ACTIONS.Snare (side stick)',\r\n  Splash_choke: 'DRUM_PARTS_ACTIONS.Splash (choke)',\r\n  Surdo_hit: 'DRUM_PARTS_ACTIONS.Surdo (hit)',\r\n  Surdo_mute: 'DRUM_PARTS_ACTIONS.Surdo (mute)',\r\n  Timbale_high_hit: 'DRUM_PARTS_ACTIONS.Timbale high (hit)',\r\n  Timbale_low_hit: 'DRUM_PARTS_ACTIONS.Timbale low (hit)',\r\n  Tinkle_Bell_hit: 'DRUM_PARTS_ACTIONS.Tinkle Bell (hit)',\r\n  Triangle_hit: 'DRUM_PARTS_ACTIONS.Triangle (hit)',\r\n  Triangle_mute: 'DRUM_PARTS_ACTIONS.Triangle (mute)',\r\n  Vibraslap_hit: 'DRUM_PARTS_ACTIONS.Vibraslap (hit)',\r\n  Whistle_high_hit: 'DRUM_PARTS_ACTIONS.Whistle high (hit)',\r\n  Whistle_low_hit: 'DRUM_PARTS_ACTIONS.Whistle low (hit)',\r\n  Woodblock_high_hit: 'DRUM_PARTS_ACTIONS.Woodblock high (hit)',\r\n  Woodblock_low_hit: 'DRUM_PARTS_ACTIONS.Woodblock low (hit)'\r\n}\r\n\r\n/**\r\n * Pitches that are mapped onto themselves are included for other information.\r\n * Millenium MPS-850 https://www.thomann.de/de/millenium_mps_850_e_drum_set.htm\r\n *\r\n * Notation info (line and shape of symbol) so drum notation can generate a lookup from this\r\n * https://en.wikipedia.org/wiki/Percussion_notation#/media/File:Sibelius_drum_legend.png\r\n * Lines start with 0 at the top above the top most horizontal notation line,\r\n * using incremental integers for every possible position, i.e. for on and between lines\r\n *\r\n * Legend:\r\n *  Map key: The orignal pitch from the input data\r\n *  repPitch: Replacement pitch, used to simplify multiple zones into one\r\n *  zone: Zone of the instrument this pitch comes from\r\n *  order: visual order ranking of this intrumentin the UI (top-bottom or left-right)\r\n *  line: y position in the drum notation (using integers for every possible position)\r\n *  shape: Note shape in notation: triangle, <>, x, o, ostroke, xstroke\r\n *  label: Short label for this intrument\r\n *  name: Full name of this instrument\r\n *\r\n * @type {Map<number,object>}\r\n */\r\nexport const drumPitchReplacementMapMPS850 = new Map([\r\n  // Crash 1\r\n  [49, { repPitch: 49, zone: 1, order: 10, line: -1, shape: 'o', label: 'CC1', name: 'Crash Cymbal 1' }],\r\n  [55, { repPitch: 49, zone: 2, order: 11, line: -1, shape: 'o', label: 'CC1', name: 'Crash Cymbal 1' }],\r\n  // Crash 2\r\n  [52, { repPitch: 57, zone: 1, order: 20, line: 0, shape: 'o', label: 'CC2', name: 'Crash Cymbal 2' }],\r\n  [57, { repPitch: 57, zone: 2, order: 21, line: 0, shape: 'o', label: 'CC2', name: 'Crash Cymbal 2' }],\r\n  // Hi-hat stick\r\n  [22, { repPitch: 46, zone: 1, order: 30, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  [26, { repPitch: 46, zone: 2, order: 31, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  [42, { repPitch: 46, zone: 3, order: 32, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  [46, { repPitch: 46, zone: 4, order: 33, line: 0, shape: '<>', label: 'HHS', name: 'Hi-Hat' }],\r\n  // Hi-hat pedal\r\n  [44, { repPitch: 44, zone: 1, order: 40, line: 9, shape: 'o', label: 'HHP', name: 'Hi-Hat Pedal' }],\r\n  // Ride\r\n  [51, { repPitch: 51, zone: 1, order: 50, line: 1, shape: 'x', label: 'Rd', name: 'Ride Cymbal' }],\r\n  [53, { repPitch: 51, zone: 2, order: 51, line: 1, shape: 'x', label: 'Rd', name: 'Ride Cymbal' }],\r\n  [59, { repPitch: 51, zone: 3, order: 52, line: 1, shape: 'x', label: 'Rd', name: 'Ride Cymbal' }],\r\n  // Snare\r\n  [38, { repPitch: 38, zone: 1, order: 60, line: 4, shape: 'o', label: 'SN', name: 'Snare' }],\r\n  [40, { repPitch: 38, zone: 2, order: 61, line: 4, shape: 'o', label: 'SN', name: 'Snare' }],\r\n  // Tom 1\r\n  [48, { repPitch: 48, zone: 1, order: 90, line: 2, shape: 'o', label: 'T1', name: 'Tom 1' }],\r\n  [50, { repPitch: 48, zone: 2, order: 91, line: 2, shape: 'o', label: 'T1', name: 'Tom 1' }],\r\n  // Tom 2\r\n  [45, { repPitch: 45, zone: 1, order: 100, line: 3, shape: 'o', label: 'T2', name: 'Tom 2' }],\r\n  [47, { repPitch: 45, zone: 2, order: 101, line: 3, shape: 'o', label: 'T2', name: 'Tom 2' }],\r\n  // Stand tom 1\r\n  [43, { repPitch: 43, zone: 1, order: 70, line: 5, shape: 'o', label: 'ST1', name: 'Stand Tom 1' }],\r\n  [58, { repPitch: 43, zone: 2, order: 71, line: 5, shape: 'o', label: 'ST1', name: 'Stand Tom 1' }],\r\n  // Stand tom 2\r\n  [39, { repPitch: 41, zone: 1, order: 80, line: 6, shape: 'o', label: 'ST2', name: 'Stand Tom 2' }],\r\n  [41, { repPitch: 41, zone: 2, order: 81, line: 6, shape: 'o', label: 'ST2', name: 'Stand Tom 2' }],\r\n  // Bass drum\r\n  [35, { repPitch: 36, zone: 1, order: 110, line: 8, shape: 'o', label: 'BD', name: 'Bass Drum' }],\r\n  [36, { repPitch: 36, zone: 2, order: 111, line: 8, shape: 'o', label: 'BD', name: 'Bass Drum' }]\r\n])\r\n\r\n/**\r\n * Generates a variation of an array of notes by adding, removing or changing notes\r\n *\r\n * @param {Note[]} data array of notes\r\n * @param {number} deviation width of the Gauss kernel\r\n * @param {number} pAdd probability of adding a note after each note\r\n * @param {number} pRemove probability of removing each note\r\n * @returns {Note[]} variated Note array\r\n */\r\nexport function generateDrumVariation (data, deviation = 1, pAdd = 0.1, pRemove = 0.1) {\r\n  // Only use pitches that occur in the GT data\r\n  const usedPitches = new Set()\r\n  for (const note of data) {\r\n    usedPitches.add(note.pitch)\r\n  }\r\n  const pitches = [...usedPitches]\r\n  // Create variation by adding, removing, and shifting notes\r\n  const randVelocity = randomInt(15, 128)\r\n  const randTime = randomNormal(0, deviation)\r\n  const variation = []\r\n  for (const note of data) {\r\n    // Add and remove notes at random\r\n    if (randFloat(0, 1) < pAdd) {\r\n      // Add another note\r\n      const start = note.start + randFloat(0, 1)\r\n      const end = start + randFloat(0, 1)\r\n      const velocity = randVelocity()\r\n      const pitch = choose(pitches)\r\n      variation.push(new Note(\r\n        pitch,\r\n        start,\r\n        velocity,\r\n        0,\r\n        end\r\n      ))\r\n    }\r\n    if (randFloat(0, 1) < pRemove) {\r\n      // Remove note (just add nothing to varation)\r\n    } else {\r\n      // Shift timings at random\r\n      const start = note.start + randTime()\r\n      const end = note.end + randTime()\r\n      // Get new note\r\n      const newNote = Note.from(note)\r\n      newNote.start = Math.min(start, end)\r\n      newNote.end = Math.max(start, end)\r\n      variation.push(newNote)\r\n    }\r\n  }\r\n  // Sort notes by start just in case\r\n  variation.sort((a, b) => a.start - b.start)\r\n  return variation\r\n}\r\n\r\n/**\r\n * Replaces pitches based on replacementMap\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {Map} replacementMap a map pitch->replacementPitch\r\n * @returns {Notes[]} notes with replaced pitches\r\n * @throws {'No replacement map given!'} when replacementMap is missing\r\n */\r\nexport function simplifyDrumPitches (notes, replacementMap) {\r\n  if (!replacementMap || !(replacementMap instanceof Map)) {\r\n    throw new Error('No replacement map given!')\r\n  }\r\n  const errors = new Set()\r\n  const simplified = notes.map(note => {\r\n    const oldPitch = note.pitch\r\n    let newPitch = oldPitch\r\n    if (!replacementMap.has(oldPitch)) {\r\n      errors.add(oldPitch)\r\n    } else {\r\n      newPitch = replacementMap.get(oldPitch).repPitch\r\n    }\r\n    const newNote = Note.from({ ...note, pitch: newPitch })\r\n    return newNote\r\n  })\r\n  // TODO: return errors, do not log! also easier to test\r\n  // if (errors.size > 0) {\r\n  //     console.warn(`Cannot replace all pitches, replacementMap misses entry for these pitches:`);\r\n  //     console.log(Array.from(errors));\r\n  // }\r\n  return simplified\r\n  // return { simplified, errors };\r\n}\r\n\r\n/**\r\n * Returns a Map:pitch->yPosIndex for views to lookup which row\r\n * a pitch has to be drawn in\r\n *\r\n * @param {Map} replacementMap a pitch replacement map\r\n * @returns {Map} Map:pitch->yPosIndex\r\n */\r\nexport function getPitch2PositionMap (replacementMap) {\r\n  const result = new Map()\r\n  const uniqeRows = [...group([...replacementMap], d => d[1].repPitch)]\r\n  uniqeRows.sort((a, b) => a[1][0][1].order - b[1][0][1].order)\r\n  for (const [index, d] of uniqeRows.entries()) {\r\n    result.set(d[0], index)\r\n  }\r\n  return result\r\n}\r\n", "import { randomInt, extent } from 'd3'\r\nimport { randFloat } from '../utils/MathUtils.js'\r\nimport { getMidiNoteByNr, getMidiNoteByLabel } from '../fileFormats/Midi.js'\r\nimport GuitarNote from '../types/GuitarNote.js'\r\nimport { arrayShallowEquals } from '../utils/ArrayUtils.js'\r\n\r\n/**\r\n * @module instruments/Guitar\r\n */\r\n\r\n/**\r\n * Represents a tuning of a fretted string instrument.\r\n */\r\nexport class StringedTuning {\r\n  /**\r\n     * Represents a tuning of a fretted string instrument.\r\n     *\r\n     * @param {string} name name\r\n     * @param {string[]} notes array of notes, e.g. ['E2', 'A2', 'D3', ...]\r\n     */\r\n  constructor (name, notes) {\r\n    this.name = name\r\n    this.notes = notes\r\n    this.short = notes.join(' ')\r\n    this.pitches = notes.map(note => getMidiNoteByLabel(note).pitch)\r\n    this.stringCount = notes.length\r\n  }\r\n}\r\n\r\n/**\r\n * Maps from instrument to string number to list of tunings.\r\n * Defaults are at the top.\r\n *\r\n * @todo add more? https://en.wikipedia.org/wiki/List_of_guitar_tunings\r\n * @todo https://github.com/PirtleShell/string-tunings/blob/master/tunings.json\r\n * @todo replace arrays by maps? tuning name - tuning\r\n * @type {Map<string,Map<number,StringedTuning>>}\r\n * @example\r\n *      stringedTunings.get('Guitar').get(6) for 6-string guitar tunings\r\n */\r\nexport const stringedTunings = new Map([\r\n  ['Guitar', new Map([\r\n    [6, [\r\n      new StringedTuning('E stand.', ['E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop D', ['D2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop C', ['C2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1/2 down', ['D#2', 'G#2', 'C#3', 'F#3', 'A#3', 'D#4']),\r\n      new StringedTuning('1 down', ['D2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1 1/2 down', ['C#2', 'F#2', 'B2', 'E3', 'G#3', 'C#4']),\r\n      new StringedTuning('2 down', ['C2', 'F2', 'A#2', 'D#3', 'G3', 'C4']),\r\n      new StringedTuning('DADGAG', ['D2', 'A2', 'D3', 'G3', 'A3', 'D4'])\r\n    ]],\r\n    [7, [\r\n      new StringedTuning('B stand.', ['B1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop A', ['A1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('1/2 down', ['A#1', 'D#2', 'G#2', 'C#3', 'F#3', 'A#3', 'D#4']),\r\n      new StringedTuning('1 down', ['A1', 'D2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1 1/2 down', ['G#1', 'C#2', 'F#2', 'B2', 'E3', 'G#3', 'C#4']),\r\n      new StringedTuning('2 down', ['G1', 'C2', 'F2', 'A#2', 'D#3', 'G3', 'C4'])\r\n    ]],\r\n    [8, [\r\n      new StringedTuning('F# stand.', ['F#1', 'B1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('Drop E', ['E1', 'B1', 'E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\r\n      new StringedTuning('1/2 down', ['F1', 'A#1', 'D#2', 'G#2', 'C#3', 'F#3', 'A#3', 'D#4']),\r\n      new StringedTuning('1 down', ['E1', 'A1', 'D2', 'G2', 'C3', 'F3', 'A3', 'D4']),\r\n      new StringedTuning('1 1/2 down', ['D#1', 'G#1', 'C#2', 'F#2', 'B2', 'E3', 'G#3', 'C#4']),\r\n      new StringedTuning('2 down', ['D1', 'G1', 'C2', 'F2', 'A#2', 'D#3', 'G3', 'C4'])\r\n    ]]\r\n  ])],\r\n  ['Bass', new Map([\r\n    [4, [\r\n      new StringedTuning('E stand.', ['E1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('Drop D', ['D1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('1/2 down', ['D#1', 'G#1', 'C#2', 'F#2']),\r\n      new StringedTuning('1 down', ['D1', 'G1', 'C2', 'F2']),\r\n      new StringedTuning('1 1/2 down', ['C#1', 'F#1', 'B1', 'E2']),\r\n      new StringedTuning('2 down', ['C1', 'F1', 'A#1', 'D#2'])\r\n    ]],\r\n    [5, [\r\n      new StringedTuning('B stand.', ['B0', 'E1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('Drop A', ['A0', 'D1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('1/2 down', ['A#0', 'D#1', 'G#1', 'C#2', 'F#2']),\r\n      new StringedTuning('1 down', ['A0', 'D1', 'G1', 'C2', 'F2']),\r\n      new StringedTuning('1 1/2 down', ['G#0', 'C#1', 'F#1', 'B1', 'E2']),\r\n      new StringedTuning('2 down', ['G0', 'C1', 'F1', 'A#1', 'D#2'])\r\n    ]],\r\n    [6, [\r\n      new StringedTuning('F# stand.', ['F#0', 'B0', 'E1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('Drop E', ['E0', 'A0', 'D1', 'A1', 'D2', 'G2']),\r\n      new StringedTuning('1/2 down', ['F0', 'A#0', 'D#1', 'G#1', 'C#2', 'F#2']),\r\n      new StringedTuning('1 down', ['E1', 'A0', 'D1', 'G1', 'C2', 'F2']),\r\n      new StringedTuning('1 1/2 down', ['D#0', 'G#0', 'C#1', 'F#1', 'B1', 'E2']),\r\n      new StringedTuning('2 down', ['D0', 'G0', 'C1', 'F1', 'A#1', 'D#2'])\r\n    ]]\r\n  ])],\r\n  ['Ukulele', new Map([\r\n    [4, [\r\n      new StringedTuning('Hawaii', ['G4', 'C4', 'E4', 'A4']),\r\n      new StringedTuning('Low G', ['G3', 'C4', 'E4', 'A4']),\r\n      new StringedTuning('D-tuning', ['A4', 'D4', 'F#4', 'B4']),\r\n      new StringedTuning('Canadian', ['A3', 'D4', 'F#4', 'B4']),\r\n      new StringedTuning('Bariton', ['D3', 'G3', 'B3', 'E4'])\r\n    ]]\r\n  ])]\r\n])\r\n\r\n/**\r\n * For Notes that have a guitar string encoded in their channel, this function\r\n * allows to convert them to a GuitarNote.\r\n *\r\n * @param {Note} note a Note that has the guitar string stored in its channel\r\n *      e.g. 0 to 5 for a six string\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {GuitarNote} a GuitarNote\r\n */\r\nexport function guitarNoteFromNote (note, tuning) {\r\n  const string = note.channel\r\n  const reversedString = tuning.stringCount - string - 1\r\n  const fret = note.pitch - tuning.pitches[reversedString]\r\n  return GuitarNote.fromNote(note, string, fret)\r\n}\r\n\r\n/**\r\n * Returns a tuning with the specified pitches or null if none found.\r\n *\r\n * @param {number[]} pitches pitches of the tuning, same order as in\r\n *      Guitar.js' stringedTunings, i.e. low to high notes\r\n * @returns {StringedTuning|null} the found tuning or null\r\n */\r\nexport function getTuningFromPitches (pitches) {\r\n  const stringCount = pitches.length\r\n  for (const stringCountMap of stringedTunings.values()) {\r\n    if (stringCountMap.has(stringCount)) {\r\n      const tunings = stringCountMap.get(stringCount)\r\n      for (const t of tunings) {\r\n        if (arrayShallowEquals(t.pitches, pitches)) {\r\n          return t\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\n/**\r\n * Returns the pitch range of a tuning, given the number of frets.\r\n *\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has (default: 24)\r\n * @returns {number[]} [minPitch, maxPitch]\r\n */\r\nexport function getTuningPitchRange (tuning, fretCount = 24) {\r\n  // const openExtent = extent(tuning.pitches);\r\n  const openMax = tuning.pitches[tuning.stringCount - 1]\r\n  const openMin = tuning.pitches[0]\r\n  return [openMin, openMax + fretCount]\r\n}\r\n\r\n/**\r\n * Colors for guitar strings, acces via stringColor[string]\r\n * where string in [1, 8].\r\n *\r\n * @type {string[]}\r\n */\r\nexport const stringColors = [\r\n  '#888',\r\n  '#d122e9',\r\n  '#31eb1c',\r\n  '#f37c14',\r\n  '#10edfc',\r\n  '#ffeb09',\r\n  '#ff210d',\r\n  'silver',\r\n  'gold'\r\n]\r\n\r\n/**\r\n * Returns the pitch of a note at a given fretboard position.\r\n *\r\n * @param {number} string string\r\n * @param {number} fret fret\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {number} pitch\r\n */\r\nexport function getPitchFromFretboardPos (string, fret, tuning) {\r\n  // Order is reversed, since tunings are named from bass to treble\r\n  // but strings are numbered the other direction...\r\n  const reversedString = tuning.stringCount - string + 1\r\n  const openPitch = tuning.pitches[reversedString - 1]\r\n  return openPitch + fret\r\n}\r\n\r\n/**\r\n * Returns MIDI attributes of a note at a given fretboard position, e.g. C#\r\n *\r\n * @param {number} string string\r\n * @param {number} fret fret\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {object} note info, e.g. { pitch: 69, name: 'A', octave: 4, label: 'A4', frequency: 440.000 }\r\n */\r\nexport function getNoteInfoFromFretboardPos (string, fret, tuning) {\r\n  const pitch = getPitchFromFretboardPos(string, fret, tuning)\r\n  return getMidiNoteByNr(pitch)\r\n}\r\n\r\n/**\r\n * Finds all fretboard positions with this exact pitch.\r\n *\r\n * @param {number} pitch MIDI pitch\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has\r\n * @returns {object[]} positions\r\n */\r\nexport function getFretboardPositionsFromPitch (pitch, tuning, fretCount) {\r\n  const positions = []\r\n  const stringCount = tuning.stringCount\r\n  for (let string = 0; string < stringCount; string++) {\r\n    const openPitch = tuning.pitches[string]\r\n    // Rule out strings where pitch is lower than open string\r\n    if (pitch < openPitch) {\r\n      continue\r\n    }\r\n    // Rule out strings where pitch is higher than highest fret\r\n    if (pitch > openPitch + fretCount) {\r\n      continue\r\n    }\r\n    positions.push({\r\n      // Convert so string 1 is treble\r\n      string: stringCount - string,\r\n      fret: pitch - openPitch\r\n    })\r\n  }\r\n  return positions\r\n}\r\n\r\n/**\r\n * Finds all fretboard positions with this note in all octaves.\r\n *\r\n * @param {string} name note name, e.g. 'C#'\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has\r\n * @returns {object[]} positions\r\n */\r\nexport function getFretboardPositionsFromNoteName (name, tuning, fretCount = 24) {\r\n  const n = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\r\n  if (!n.includes(name)) { return null }\r\n  const positions = []\r\n  const lowestPitch = n.indexOf(name)\r\n  const stringCount = tuning.stringCount\r\n  for (let string = 0; string < stringCount; string++) {\r\n    // First fret where this note appears\r\n    const openPitch = tuning.pitches[string]\r\n    let fret = lowestPitch - (openPitch % 12)\r\n    if (fret < 0) {\r\n      fret += 12\r\n    }\r\n    while (fret <= fretCount) {\r\n      positions.push({\r\n        // Convert so string 1 is treble\r\n        string: stringCount - string,\r\n        fret\r\n      })\r\n      // Go to next octave\r\n      fret += 12\r\n    }\r\n  }\r\n  return positions\r\n}\r\n\r\n/**\r\n * Generates example MIDI-like data (preprocessed MIDI).\r\n *\r\n * @param {number} startTime start tick\r\n * @param {number} count number of notes to generate\r\n * @param {StringedTuning} tuning tuning\r\n * @returns {GuitarNote[]} notes\r\n */\r\nexport function generateExampleData (startTime = 0, count = 50, tuning) {\r\n  let currentTime = startTime\r\n  return Array.from({ length: count })\r\n    .map(() => {\r\n      const start = currentTime + randFloat(0, 1)\r\n      currentTime = start + randFloat(0, 1)\r\n      const string = randomInt(1, 7)()\r\n      const fret = randomInt(0, 25)()\r\n      const pitch = getPitchFromFretboardPos(string, fret, tuning)\r\n      const velocity = randomInt(15, 127)()\r\n      return new GuitarNote(\r\n        pitch,\r\n        start,\r\n        velocity,\r\n        string,\r\n        currentTime,\r\n        string,\r\n        fret\r\n      )\r\n    })\r\n}\r\n\r\n/**\r\n * Estimates the fretboard position from MIDI notes\r\n *\r\n * @todo does not work well yet\r\n * @param {Note[]} notes notes with only MIDI information\r\n * @param {StringedTuning} tuning tuning\r\n * @param {number} fretCount number of frets the instrument has\r\n * @returns {GuitarNote[]} GuitarNotes with fretboard positions\r\n */\r\nexport function fretboardPositionsFromMidi (notes, tuning, fretCount = 24) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  if (!tuning || !tuning.pitches) {\r\n    console.warn('Invalid tuning parameter!')\r\n    return []\r\n  }\r\n  // Sort notes that cannot be played out in advance for better performance\r\n  const [minPitch, maxPitch] = getTuningPitchRange(tuning, fretCount)\r\n  const possibleNotes = []\r\n  const errorPitches = []\r\n  for (const note of notes) {\r\n    if (note.pitch < minPitch || note.pitch > maxPitch) {\r\n      errorPitches.push(note.pitch)\r\n    } else {\r\n      possibleNotes.push(note)\r\n    }\r\n  }\r\n  const result = []\r\n  for (const note of possibleNotes) {\r\n    const positions = getFretboardPositionsFromPitch(note.pitch, tuning, 24)\r\n    // Choose best position\r\n    // TODO: improve this to make it easier to play, take closest postion to prior one\r\n    let bestPos = positions[0]\r\n    for (const pos of positions) {\r\n      if (pos.fret < bestPos.fret) {\r\n        bestPos = pos\r\n      }\r\n    }\r\n    const { string, fret } = bestPos\r\n    result.push(GuitarNote.fromNote(note, string, fret))\r\n  }\r\n  // Give advice on transposing for better results\r\n  if (errorPitches.length > 0) {\r\n    const [minDataPitch, maxDataPitch] = extent(notes, d => d.pitch)\r\n    let advice = ''\r\n    if (minDataPitch < minPitch) {\r\n      advice += `Transpose by ${minPitch - minDataPitch} semitones`\r\n    }\r\n    if (maxPitch < maxDataPitch) {\r\n      advice += `Transpose by ${maxPitch - maxDataPitch} semitones`\r\n    }\r\n    console.warn(\r\n      `Cannot find a fretboard position for ${errorPitches.length} pitches, try another tuning instead:\\n`,\r\n      errorPitches,\r\n      `\\nCurrent tuning's pitch range is ${minPitch} - ${maxPitch}`,\r\n      `\\ndata pitch range is ${minDataPitch} - ${maxDataPitch}\\n`,\r\n      advice\r\n    )\r\n  }\r\n  return result\r\n}\r\n\r\n// /**\r\n//  * @todo chords always? use 4-fret-blocks\r\n//  * @param {GuitarNote[]} notes notes with fretboard positions\r\n//  * @returns {?} fingering information\r\n//  */\r\n// export function fingeringFromFretboardPositions(notes) {\r\n//     // TODO: detect chords first?\r\n//     // TODO: then lookup chords' fingerings from a lookup table\r\n\r\n//     // TODO: alternatively (as fallback) use heuristics\r\n\r\n//     // TODO: or try to do it like humans do when playing\r\n\r\n//     // TODO: consider prior and following notes/chords!\r\n\r\n// }\r\n", "import { difference, extent, intersection, max } from 'd3'\r\nimport { getMidiNoteByLabel, getMidiNoteByNr } from '../fileFormats/Midi.js'\r\nimport { detectChordsByExactStart } from '../chords/Chords.js'\r\nimport Note from '../types/Note.js'\r\nimport { bpmToSecondsPerBeat } from '../utils/MusicUtils.js'\r\n\r\n/**\r\n * @module instruments/Lamellophone\r\n */\r\n\r\n/**\r\n * Represents Lamellophone tunings\r\n */\r\nexport class LamellophoneTuning {\r\n  /**\r\n     * Represents a tuning of lamellophone.\r\n     *\r\n     * @param {string} name name\r\n     * @param {string[]} notes array of notes, same order as on instrument\r\n     *      e.g. [..., 'D4','C4', 'F#4', ...]\r\n     */\r\n  constructor (name, notes) {\r\n    this.name = name\r\n    this.notes = notes\r\n    this.short = notes.join(' ')\r\n    this.pitches = notes.map(note => getMidiNoteByLabel(note).pitch)\r\n    this.pitchesSorted = [...this.pitches]\r\n      .sort((a, b) => a - b)\r\n    this.keyCount = notes.length\r\n  }\r\n\r\n  /**\r\n     * Returns an array of the tuning's notes as number representation:\r\n     * Tuning notes:  C4, D4, ... C5, D5, ... C6,  D6\r\n     * Number format: 1,  2,  ... 1\u00B0, 2\u00B0, ... 1\u00B0\u00B0, 2\u00B0\u00B0\r\n     *\r\n     * @returns {string[]} array with tuning notes in number representation\r\n     */\r\n  getNumbers () {\r\n    const pitches = this.pitchesSorted\r\n    const numbers = new Map()\r\n    for (const [index, pitch] of pitches.entries()) {\r\n      let number = index + 1\r\n      let ending = ''\r\n      let lowerOctave = pitch - 12\r\n      while (lowerOctave > 0 && numbers.has(lowerOctave)) {\r\n        number = numbers.get(lowerOctave).number\r\n        ending += '\u00B0'\r\n        lowerOctave -= 12\r\n      }\r\n      numbers.set(pitch, { number, numberString: `${number}${ending}` })\r\n    }\r\n    return [...numbers.values()]\r\n      .map(d => d.numberString)\r\n  }\r\n\r\n  /**\r\n     * Returns an array of the tuning's notes as letter representation:\r\n     * Tuning notes:  C4, D4, ... C5, D5, ... C6,  D6\r\n     * Number format: C,  D,  ... C\u00B0, D\u00B0, ... C\u00B0\u00B0, D\u00B0\u00B0\r\n     *\r\n     * @returns {string[]} array with tuning notes in letter representation\r\n     */\r\n  getLetters () {\r\n    const pitches = this.pitchesSorted\r\n    const numbers = new Map()\r\n    for (const [index, pitch] of pitches.entries()) {\r\n      let number = index + 1\r\n      let ending = ''\r\n      let lowerOctave = pitch - 12\r\n      while (lowerOctave > 0 && numbers.has(lowerOctave)) {\r\n        number = numbers.get(lowerOctave).number\r\n        ending += '\u00B0'\r\n        lowerOctave -= 12\r\n      }\r\n      const letter = getMidiNoteByNr(pitch).name\r\n      numbers.set(pitch, { number, letterString: `${letter}${ending}` })\r\n    }\r\n    return [...numbers.values()].map(d => d.letterString)\r\n  }\r\n}\r\n\r\n/**\r\n * Tunings.\r\n * Notes are in the same order as on the instrument\r\n *\r\n * @type {Map<string,Map<string,LamellophoneTuning>>}\r\n */\r\nexport const lamellophoneTunings = new Map([\r\n  ['Kalimba', new Map([\r\n    [\r\n      '9 A Major',\r\n      new LamellophoneTuning('9 A Major', ['A5', 'C#6', 'C#5', 'A5', 'A4', 'F#5', 'E5', 'E6', 'B5'])\r\n    ],\r\n    [\r\n      '9 A Minor',\r\n      new LamellophoneTuning('9 A Minor', ['A5', 'C6', 'C5', 'A5', 'A4', 'F5', 'E5', 'E6', 'B5'])\r\n    ],\r\n    [\r\n      '9 A Minor 7',\r\n      new LamellophoneTuning('9 A Minor 7', ['A5', 'C6', 'C5', 'A5', 'A4', 'F#5', 'E5', 'E6', 'B5'])\r\n    ],\r\n    [\r\n      '9 A Ake Bono',\r\n      new LamellophoneTuning('9 A Ake Bono', ['A5', 'D6', 'D5', 'A5', 'A4', 'F5', 'E5', 'E6', 'A#5'])\r\n    ],\r\n    [\r\n      '9 A Hijaz',\r\n      new LamellophoneTuning('9 A Hijaz', ['G5', 'D6', 'D5', 'A5', 'A4', 'F#5', 'D#5', 'D#6', 'A#5'])\r\n    ],\r\n    [\r\n      '9 A Pygmy',\r\n      new LamellophoneTuning('9 A Pygmy', ['G5', 'C6', 'C5', 'G5', 'G4', 'D#5', 'D5', 'D#6', 'A#5'])\r\n    ],\r\n    [\r\n      '17 C Major',\r\n      new LamellophoneTuning('17 C Major', ['D6', 'B5', 'G5', 'E5', 'C5', 'A4', 'F4', 'D4', 'C4', 'E4', 'G4', 'B4', 'D5', 'F5', 'A5', 'C6', 'E6'])\r\n    ],\r\n    [\r\n      '21 C Major',\r\n      new LamellophoneTuning('21 C Major', ['D6', 'B5', 'G5', 'E5', 'C5', 'A4', 'F4', 'D4', 'B3', 'G3', 'F3', 'A3', 'C4', 'E4', 'G4', 'B4', 'D5', 'F5', 'A5', 'C6', 'E6'])\r\n    ]\r\n  ])]\r\n])\r\n\r\n/**\r\n * Parses a tab into notes\r\n *\r\n * @param {string} tab in letter format\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @param {number} tempo tempo in bpm\r\n * @returns {Note[]} notes\r\n */\r\nexport function convertTabToNotes (tab, tuning, tempo = 120) {\r\n  if (!tab || tab.length === 0) { return [] }\r\n  // Create a mapping symbol->pitch\r\n  const symbolToPitchMap = new Map()\r\n  const symbols = tuning.getLetters()\r\n  for (let index = 0; index < tuning.keyCount; index++) {\r\n    symbolToPitchMap.set(symbols[index], tuning.pitchesSorted[index])\r\n  }\r\n  // Parse tab to notes\r\n  const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\r\n  const noteNamesSet = new Set(noteNames)\r\n  const lowestNote = tuning.pitchesSorted[0]\r\n  const startOct = getMidiNoteByNr(lowestNote).octave\r\n  const secondsPerBeat = bpmToSecondsPerBeat(tempo)\r\n  let insideChord = false\r\n  let insideNote = false\r\n  let currentTime = 0\r\n  let currentPitch = 0\r\n  let currentOctOffset = 0\r\n  const notes = []\r\n  tab = `${tab.toUpperCase().replaceAll('\\n', ' \\n')} `\r\n  // This is needed more often\r\n  const finishNote = () => {\r\n    try {\r\n      notes.push(Note.from({\r\n        pitch: currentPitch + 12 * (startOct + 1 + currentOctOffset),\r\n        start: currentTime,\r\n        end: currentTime + secondsPerBeat\r\n      }))\r\n      currentOctOffset = 0\r\n      if (!insideChord) {\r\n        currentTime += secondsPerBeat\r\n      }\r\n    } catch {\r\n      console.log(currentPitch)\r\n    }\r\n    insideNote = false\r\n  }\r\n  for (const char of tab) {\r\n    if (char === '(') {\r\n      // Start chord (but finish current if any)\r\n      if (insideChord) {\r\n        insideChord = false\r\n      }\r\n      if (insideNote) {\r\n        finishNote()\r\n      }\r\n      insideChord = true\r\n    } else if (noteNamesSet.has(char)) {\r\n      // Start note (but finish current if any)\r\n      if (insideNote) {\r\n        finishNote()\r\n      }\r\n      insideNote = true\r\n      currentPitch = noteNames.indexOf(char)\r\n    } else if (char === '#') {\r\n      // Sharpen note\r\n      currentPitch++\r\n    } else if (char === '\u00B0') {\r\n      // Increase ocatve\r\n      currentOctOffset++\r\n    } else if (char === ' ' || char === '\\n' || char === ')') {\r\n      // End chord and note if inside\r\n      if (char === ')') {\r\n        insideChord = false\r\n      }\r\n      if (char === '\\n') {\r\n        insideChord = false\r\n        currentTime += secondsPerBeat\r\n      }\r\n      if (insideNote) {\r\n        finishNote()\r\n      }\r\n    }\r\n  }\r\n  return notes\r\n}\r\n\r\n/**\r\n * Converts an array of notes into a text tab\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @param {'letter'|'number'} mode mode\r\n * @param {number} restSize number of seconds for a gap between chords to insert\r\n *     a line break\r\n * @returns {string} text tab\r\n */\r\nexport function convertNotesToTab (notes, tuning, mode = 'letter', restSize = 0.1) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  // Create a mapping pitch->symbol\r\n  const pitchToSymbolMap = new Map()\r\n  const symbols = mode === 'letter' ? tuning.getLetters() : tuning.getNumbers()\r\n  for (let index = 0; index < tuning.keyCount; index++) {\r\n    pitchToSymbolMap.set(tuning.pitchesSorted[index], symbols[index])\r\n  }\r\n  // Get chords\r\n  const chords = detectChordsByExactStart(notes)\r\n  // Create tab\r\n  let tab = ''\r\n  let previousEnd = 0\r\n  for (const chord of chords) {\r\n    // Format chord's notes\r\n    let chordString = chord\r\n      .map(note => {\r\n        if (pitchToSymbolMap.has(note.pitch)) {\r\n          return pitchToSymbolMap.get(note.pitch) || `[${note.pitch}]`\r\n        } else {\r\n          return mode === 'letter' ? getMidiNoteByNr(note.pitch)?.name ?? note.pitch : note.pitch\r\n        }\r\n      })\r\n      .join(' ')\r\n    if (chord.length > 1) {\r\n      // Mark chords with backets (for multiple notes)\r\n      chordString = `(${chordString})`\r\n    }\r\n    tab = chord[0].start - previousEnd > restSize ? `${tab}\\n${chordString}` : `${tab} ${chordString}`\r\n    // Update last end time of chord\r\n    previousEnd = max(chord, n => n.end)\r\n  }\r\n  // Remove leading space\r\n  return tab.slice(1)\r\n}\r\n\r\n/**\r\n * Converts an array of notes into an HTML tab with colored notes\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @param {'letter'|'number'} mode mode\r\n * @param {number} restSize number of seconds for a gap between chords to insert\r\n *     a line break\r\n * @param {Function} colormap color map function: pitch to color\r\n * @returns {string} HTML tab\r\n */\r\nexport function convertNotesToHtmlTab (\r\n  notes,\r\n  tuning,\r\n  mode = 'letter',\r\n  restSize = 0.1,\r\n  colormap = () => 'black'\r\n) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  // Create a mapping pitch->symbol\r\n  const pitchToSymbolMap = new Map()\r\n  const symbols = mode === 'letter' ? tuning.getLetters() : tuning.getNumbers()\r\n  for (let index = 0; index < tuning.keyCount; index++) {\r\n    pitchToSymbolMap.set(tuning.pitches[index], symbols[index])\r\n  }\r\n  // Get chords\r\n  const chords = detectChordsByExactStart(notes)\r\n  // Create tab\r\n  let tab = ''\r\n  let previousEnd = 0\r\n  for (const chord of chords) {\r\n    // Format chord's notes\r\n    let chordString = chord\r\n      .map(note => {\r\n        let string\r\n        if (pitchToSymbolMap.has(note.pitch)) {\r\n          string = pitchToSymbolMap.get(note.pitch) || `[${note.pitch}]`\r\n        } else {\r\n          string = mode === 'letter' ? getMidiNoteByNr(note.pitch)?.name ?? note.pitch : note.pitch\r\n        }\r\n        const color = colormap(note.pitch)\r\n        return `<span class='note' style='background-color: ${color}'>${string}</span>`\r\n      })\r\n      .join('\\n')\r\n    if (chord.length > 1) {\r\n      // Mark chords with backets (for multiple notes)\r\n      chordString = `<span class='chord'>${chordString}</span>`\r\n    }\r\n    tab = chord[0].start - previousEnd > restSize ? `${tab}<br/>${chordString}` : `${tab}${chordString}`\r\n    // Update last end time of chord\r\n    previousEnd = max(chord, n => n.end)\r\n  }\r\n  return tab\r\n}\r\n\r\n/**\r\n * Converts a number-based tab to note letter format\r\n *\r\n * @param {string} numberTab tab text with number format\r\n * @param {Map<number, string>} numberLetterMap maps numbers to letters\r\n * @returns {string} tab in letter format\r\n */\r\nexport function convertNumbersToLetters (numberTab, numberLetterMap) {\r\n  if (!numberTab || numberTab.length === 0) { return '' }\r\n  // Normalize to \u00B0\r\n  numberTab = numberTab.replaceAll('\\'', '\u00B0')\r\n  numberTab = numberTab.replaceAll('\u2019', '\u00B0')\r\n  numberTab = numberTab.replaceAll('*', '\u00B0')\r\n  numberTab = numberTab.replaceAll('\u00BA', '\u00B0')\r\n  numberTab = numberTab.replaceAll('^', '\u00B0')\r\n  for (const [key, value] of numberLetterMap.entries()) {\r\n    numberTab = numberTab.replaceAll(key, value)\r\n  }\r\n  return numberTab\r\n}\r\n\r\n/**\r\n * Tries to find a transposition s.t. the tuning is able to play all notes.\r\n * If not not possible, return the transposition that requires the least keys to\r\n * be retuned.\r\n *\r\n * @todo tests fail\r\n * @param {Note[]} notes notes\r\n * @param {LamellophoneTuning} tuning tuning\r\n * @returns {object} {transpose: number, retune: Map}\r\n */\r\nexport function bestTransposition (notes, tuning) {\r\n  if (!notes || notes.length === 0) {\r\n    return { transpose: 0, retune: new Map() }\r\n  }\r\n\r\n  const occuringPitches = new Set(notes.map(n => n.pitch))\r\n  if (occuringPitches.size > tuning.keyCount) {\r\n    // Cannot play all notes, no matter the transp. and tuning\r\n    // TODO:\r\n    // just choose best approx?\r\n\r\n  }\r\n  const notePitches = [...occuringPitches]\r\n\r\n  // Already perfect? return now\r\n  if (difference(notePitches, tuning.pitches).size === 0) {\r\n    return { transpose: 0, retune: new Map() }\r\n  }\r\n\r\n  const [minPitch, maxPitch] = extent(notePitches)\r\n  const transpose = (array, steps) => array.map(d => d + steps)\r\n\r\n  // Just brute force through all transpositions\r\n  let bestSteps = 0\r\n  let bestTransposed\r\n  let commonPitches\r\n  for (let steps = -minPitch; steps <= 127 - maxPitch; steps++) {\r\n    const transposed = transpose(notePitches, steps)\r\n    const common = intersection(transposed, tuning.pitches)\r\n    if (!commonPitches || common.size > commonPitches.size) {\r\n      bestSteps = steps\r\n      bestTransposed = transposed\r\n    }\r\n  }\r\n  bestTransposed = new Set(bestTransposed)\r\n\r\n  // Get pitches in tuning but not in notes and other way round\r\n  const uncommon = difference(bestTransposed, tuning.pitches)\r\n  console.log(uncommon)\r\n\r\n  const freePitches = new Set()\r\n  const neededPitches = []\r\n  for (const p of uncommon) {\r\n    if (bestTransposed.has(p)) {\r\n      neededPitches.push(p)\r\n    } else {\r\n      freePitches.add(p)\r\n    }\r\n  }\r\n  console.log(neededPitches)\r\n  console.log(freePitches)\r\n\r\n  if (neededPitches.length === 0) {\r\n    // Everything is fine!\r\n    return {\r\n      transpose: bestSteps,\r\n      retune: new Map()\r\n    }\r\n  }\r\n  if (freePitches.size === 0) {\r\n    // Cannot solve this!\r\n    return {\r\n      transpose: bestSteps,\r\n      retune: new Map()\r\n    }\r\n  }\r\n\r\n  // Get closest free pitch for each needed one\r\n  const retune = new Map()\r\n  for (const neededPitch of neededPitches) {\r\n    let bestMatch = null\r\n    const bestDiff = Number.POSITIVE_INFINITY\r\n    let freePitch\r\n    for (freePitch of freePitches) {\r\n      const diff = Math.abs(neededPitch - freePitch)\r\n      if (diff < bestDiff) {\r\n        bestMatch = freePitch\r\n      }\r\n    }\r\n    freePitches.delete(bestMatch)\r\n    retune.set(freePitch, neededPitch)\r\n  }\r\n\r\n  return {\r\n    transpose: bestSteps,\r\n    retune\r\n  }\r\n}\r\n", "import { group } from 'd3'\r\nimport { Chord } from '@tonaljs/tonal'\r\nimport { arrayShallowEquals } from '../utils/ArrayUtils.js'\r\nimport Note from '../types/Note.js' /* eslint-disable-line no-unused-vars */\r\n\r\n/**\r\n * @module Chords\r\n */\r\n\r\n/**\r\n * Detects chords as those notes that have the exact same start time, only works\r\n * for ground truth (since recordings are not exact)\r\n * Does only work if ground truth is aligned! TuxGuitar produces unaligned MIDI.\r\n *\r\n * @param {Note[]} notes notes\r\n * @returns {Note[][]} array of chord arrays\r\n */\r\nexport function detectChordsByExactStart (notes) {\r\n  const grouped = group(notes, d => d.start)\r\n  const chords = [...grouped]\r\n    .map(d => d[1])\r\n    // Sort chords by time\r\n    .sort((a, b) => a[0].start - b[0].start)\r\n    // Sort notes in each chord by pitch\r\n    .map(chord => chord.sort((a, b) => a.pitch - b.pitch))\r\n  return chords\r\n}\r\n\r\n/**\r\n * Detects chords by taking a note as new chord then adding all notes close\r\n * after it to the chord, until the next note is farther away than the given\r\n * `threshold`. Then, the next chord is started with this note.\r\n *\r\n * @param {Note[]} notes notes\r\n * @param {number} threshold threshold\r\n * @returns {Note[][]} chords\r\n */\r\nexport function detectChordsBySimilarStart (notes, threshold = 0.02) {\r\n  const chords = []\r\n  let currentChord = []\r\n  let currentChordStartTime = 0\r\n  let currentChordPitches = new Set()\r\n  for (const note of notes) {\r\n    // Note belongs to current chord\r\n    if (note.start - currentChordStartTime <= threshold) {\r\n      // Do not allow the same note twice in a chord\r\n      if (!currentChordPitches.has(note.pitch)) {\r\n        currentChord.push(note)\r\n        currentChordPitches.add(note.pitch)\r\n      }\r\n    } else {\r\n      // Start new chord\r\n      if (currentChord.length > 0) {\r\n        chords.push(currentChord)\r\n      }\r\n      currentChord = [note]\r\n      currentChordStartTime = note.start\r\n      currentChordPitches = new Set([note.pitch])\r\n    }\r\n  }\r\n  if (currentChord.length > 0) {\r\n    chords.push(currentChord)\r\n  }\r\n  return chords\r\n}\r\n\r\n/**\r\n * Detects chords, by simply looking for notes that overlap each other in time.\r\n * Example:\r\n *    =======\r\n *       =========\r\n *         ========\r\n * Important: Notes must be sorted by start time for this to work correctly.\r\n *\r\n * @todo not used yet\r\n * @todo optional minimum overlap ratio\r\n * @todo new definition of chord? i.e. notes have to start 'together'\r\n * @param {Note[]} notes array of Note objects\r\n * @param {boolean} sortByPitch sort chords by pitch? (otherwise sorted\r\n *      by note start time)\r\n * @returns {Note[][]} array of chord arrays\r\n */\r\nexport function detectChordsByOverlap (notes, sortByPitch = true) {\r\n  if (!notes || notes.length === 0) { return [] }\r\n  if (notes.length === 1) { return [[notes[0]]] }\r\n  const sorted = [...notes].sort((a, b) => a.start !== b.start ? (a.start - b.start) : a.pitch - b.pitch)\r\n  const notesTodo = new Set(sorted)\r\n  const chords = []\r\n  // Find all overlaps with brute force\r\n  while (notesTodo.size > 0) {\r\n    // Take a new note and make a new chord\r\n    const note1 = notesTodo.values().next().value\r\n    notesTodo.delete(note1)\r\n    let chord = [note1]\r\n    // Add all notes that overap note1\r\n    for (const note2 of notesTodo.values()) {\r\n      if (note1.overlapInSeconds(note2) >= 0.5 * note1.getDuration()) {\r\n        chord.push(note2)\r\n        notesTodo.delete(note2)\r\n      }\r\n    }\r\n    if (sortByPitch) {\r\n      chord = chord.sort((a, b) => a.pitch - b.pitch)\r\n    }\r\n    chords.push(chord)\r\n  }\r\n  return chords\r\n}\r\n// export function detectChordsByOverlap(notes, sortByPitch = true) {\r\n//     if (!notes || !notes.length) { return []; }\r\n//     if (notes.length === 1) { return [[notes[0]]]; }\r\n//     const chords = [];\r\n//     let currentChord = [notes[0]];\r\n//     for (let i = 1; i < notes.length; i++) {\r\n//         const note = notes[i];\r\n//         console.log(i);\r\n//         console.log(currentChord);\r\n//         console.log(note);\r\n\r\n//         // Check for overlap with current chord\r\n//         let overlaps = false;\r\n//         for (let note2 of currentChord) {\r\n//             if (note.overlapsInTime(note2)) {\r\n//                 overlaps = true;\r\n//                 break;\r\n//             }\r\n//         }\r\n//         console.log(overlaps);\r\n//         if (overlaps) {\r\n//             currentChord.push(note);\r\n//             // TODO: also check the distance from the first note of the chord!\r\n//             // TODO:jump ahead to not count the cord multiple times (partially)\r\n//         } else {\r\n//             // If not, the previous chord is finished\r\n//             // Sort chord by pitch?\r\n//             if (sortByPitch) {\r\n//                 currentChord = currentChord.sort((a, b) => a.pitch - b.pitch);\r\n//             }\r\n//             chords.push(currentChord);\r\n//             // Start new chord\r\n//             if (i < notes.length - 1) {\r\n//                 currentChord = [notes[i + 1]];\r\n//                 i++;\r\n//             }\r\n//         }\r\n//     }\r\n//     // finish last chord\r\n//     chords.push(currentChord);\r\n//     return chords;\r\n// }\r\n\r\n/*\r\n * Maps number of steps (number of notes -1) to possible chord types\r\n */\r\nconst chordTypes = new Map([\r\n  [\r\n    1,\r\n    [\r\n      // TODO: how to handle inversions?\r\n      { steps: [5], name: 'Inverted power chord', suffix: '?' },\r\n      { steps: [7], name: 'Power chord', suffix: '5' }\r\n    ]\r\n  ],\r\n  [\r\n    2,\r\n    [\r\n      { steps: [2, 7], name: 'Suspended second', suffix: 'sus2' },\r\n      { steps: [3, 6], name: 'Diminished', suffix: 'dim' },\r\n      { steps: [3, 7], name: 'Minor', suffix: 'min' },\r\n      { steps: [4, 10], name: 'Seventh', suffix: '7' },\r\n      { steps: [4, 7], name: 'Major', suffix: '' },\r\n      { steps: [4, 8], name: 'Augmented', suffix: 'aug' },\r\n      { steps: [4, 9], name: 'Sixth', suffix: '6' },\r\n      { steps: [5, 7], name: 'Suspended fourth', suffix: 'sus4' }\r\n    ]\r\n  ],\r\n  [\r\n    3,\r\n    [\r\n      { steps: [2, 3, 7], name: 'Minor, added ninth', suffix: 'm(add9)' },\r\n      { steps: [2, 4, 7], name: 'Added ninth', suffix: 'add9' },\r\n      { steps: [3, 6, 10], name: 'Minor seventh, flat fifth', suffix: 'm7b5' },\r\n      { steps: [3, 7, 10], name: 'Minor seventh', suffix: 'm7' },\r\n      { steps: [3, 7, 11], name: 'Minor, major seventh', suffix: 'm(Maj7)' },\r\n      { steps: [3, 7, 8], name: 'Minor, flat sixth', suffix: 'mb6' },\r\n      { steps: [3, 7, 9], name: 'Minor sixth', suffix: 'm6' },\r\n      { steps: [4, 5, 11], name: 'Major eleventh (no fifth, no ninth)', suffix: 'Maj11' },\r\n      { steps: [4, 5, 7], name: 'Added fourth', suffix: 'add4' },\r\n      { steps: [4, 7, 10], name: 'Dominant seventh', suffix: '7' },\r\n      { steps: [4, 7, 11], name: 'Major seventh', suffix: 'Maj7' },\r\n      { steps: [4, 7, 9], name: 'Major Sixth', suffix: 'Maj6' }\r\n    ]\r\n  ],\r\n  [\r\n    4,\r\n    [\r\n      { steps: [2, 3, 6, 10], name: 'Minor ninth flat fifth', suffix: 'm9b5' },\r\n      { steps: [2, 3, 7, 10], name: 'Minor ninth', suffix: 'm9' },\r\n      { steps: [2, 3, 7, 11], name: 'Minor ninth, major seventh', suffix: 'm9(Maj7)' },\r\n      { steps: [2, 3, 7, 9], name: 'Minor sixth, added ninth', suffix: 'm6/9' },\r\n      { steps: [2, 4, 7, 11], name: 'Major ninth', suffix: 'Maj9' },\r\n      { steps: [2, 4, 7, 9], name: 'Sixth, added ninth', suffix: '6/9' },\r\n      { steps: [4, 5, 7, 11], name: 'Major eleventh (no ninth)', suffix: 'Maj11' },\r\n      { steps: [4, 6, 7, 10], name: 'Seventh, sharp eleventh', suffix: '7#11' },\r\n      { steps: [4, 6, 7, 11], name: 'Major seventh, sharp eleventh', suffix: 'Maj7#11' }\r\n    ]\r\n  ],\r\n  [\r\n    5,\r\n    [\r\n      { steps: [2, 4, 5, 7, 11], name: 'Major eleventh', suffix: 'Maj11' },\r\n      { steps: [2, 4, 7, 9, 11], name: 'Major thirteen', suffix: 'Maj13' }\r\n    ]\r\n  ],\r\n  [\r\n    6,\r\n    [\r\n      { steps: [2, 3, 4, 6, 7, 10], name: 'Minor thirteen', suffix: 'm13' }\r\n    ]\r\n  ]\r\n])\r\n\r\n/**\r\n * Returns chord type, e.g. 'Major', 'Diminished', ...\r\n * Important: Notes must be sorted by pitch ascending\r\n *\r\n * @todo some chords might be multiple types\r\n * @param {Note[]} notes notes (sorted by pitch asc.)\r\n * @returns {string} chord type\r\n */\r\nexport function getChordType (notes) {\r\n  if (!notes || notes.length === 0) { return { name: 'No note' } }\r\n  if (notes.length === 1) { return { name: 'Single note' } }\r\n  // Get distances in semitones\r\n  let steps = []\r\n  const lowest = notes[0].pitch\r\n  for (let index = 1; index < notes.length; index++) {\r\n    steps.push(notes[index].pitch - lowest)\r\n  }\r\n  // Normalize higher than octave\r\n  steps = steps.map(d => d % 12)\r\n  // Filter doubles\r\n  steps = [...new Set(steps)]\r\n  // Filter octaves\r\n  steps = steps.filter(d => d !== 0)\r\n  if (steps.length === 0) { return { name: 'Octave' } }\r\n  steps.sort((a, b) => a - b)\r\n\r\n  // Now get the chord type\r\n  const candidates = chordTypes.get(steps.length)\r\n  if (candidates) {\r\n    for (const cand of candidates) {\r\n      if (arrayShallowEquals(steps, cand.steps)) {\r\n        return cand\r\n      }\r\n    }\r\n  }\r\n  return { name: 'Unknown chord type' }\r\n}\r\n\r\n/**\r\n * https://github.com/tonaljs/tonal/tree/master/packages/chord\r\n * Detected chords can be used with https://github.com/tonaljs/tonal/tree/master/packages/chord-type\r\n *\r\n * @param {Note[]} notes notes\r\n * @returns {string[]} possible chord types\r\n */\r\nexport function getChordName (notes) {\r\n  const noteLetters = notes\r\n    .sort((a, b) => a.pitch - b.pitch)\r\n    .map(d => d.getLetter())\r\n  const chords = Chord.detect(noteLetters)\r\n  return chords\r\n}\r\n\r\n// /**\r\n//  * Estimates the name of a given chord of notes\r\n//  *\r\n//  * @param {string} chord name\r\n//  * @return {Note[]} notes array of Note objects\r\n//  * @todo use tonaljs\r\n//  * @todo use this https://github.com/greird/chordictionaryjs\r\n//  */\r\n// export function getNotesFromChordName(name, length = 1, start = 0) {\r\n//     console.error('NIY');\r\n// }\r\n", "/**\r\n * Fill a string with a repeated character\r\n *\r\n * @param character\r\n * @param repetition\r\n */\r\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n    return function (...args) {\r\n        // tslint:disable-next-line\r\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n        return fn.apply(this, args);\r\n    };\r\n}\n\nfunction isNamed(src) {\r\n    return src !== null && typeof src === \"object\" && typeof src.name === \"string\"\r\n        ? true\r\n        : false;\r\n}\n\nfunction isPitch(pitch) {\r\n    return pitch !== null &&\r\n        typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\"\r\n        ? true\r\n        : false;\r\n}\r\n// The number of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache$1 = new Map();\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache$1.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse$1(src)\r\n        : isPitch(src)\r\n            ? note(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache$1.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX$1 = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX$1.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse$1(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const height = oct === undefined\r\n        ? mod(SEMI[step] + alt, 12) - 12 * 99\r\n        : SEMI[step] + alt + 12 * (oct + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step,\r\n    };\r\n}\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct,\r\n    };\r\n}\r\n/**\r\n * @private\r\n *\r\n * forceDescending is used in the case of unison (#243)\r\n */\r\nfunction coordToInterval(coord, forceDescending) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const calcNum = step + 1 + 7 * oct;\r\n    // this is an edge case: descending pitch class unison (see #243)\r\n    const num = calcNum === 0 ? step + 1 : calcNum;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    // If it's unison and not pitch class, it can be descending interval (#243)\r\n    const forceDescending = to.height === from.height &&\r\n        to.midi !== null &&\r\n        from.midi !== null &&\r\n        from.step > to.step;\r\n    return coordToInterval([fifths, octs], forceDescending).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, deprecate, distance, encode, fillStr, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.es.js.map\n", "// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisher\u2013Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\r\nvar index = {\r\n    compact,\r\n    permutations,\r\n    range,\r\n    rotate,\r\n    shuffle,\r\n};\n\nexport default index;\nexport { compact, permutations, range, rotate, shuffle };\n//# sourceMappingURL=index.es.js.map\n", "import { range, compact, rotate } from '@tonaljs/collection';\nimport { deprecate, note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: [],\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction get(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\n/**\r\n * Use Pcset.properties\r\n * @function\r\n * @deprecated\r\n */\r\nconst pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\n/**\r\n * Get pitch class set chroma\r\n * @function\r\n * @example\r\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\r\n */\r\nconst chroma = (set) => get(set).chroma;\r\n/**\r\n * Get intervals (from C) of a set\r\n * @function\r\n * @example\r\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\r\n */\r\nconst intervals = (set) => get(set).intervals;\r\n/**\r\n * Get pitch class set number\r\n * @function\r\n * @example\r\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\r\n */\r\nconst num = (set) => get(set).setNum;\r\nconst IVLS = [\r\n    \"1P\",\r\n    \"2m\",\r\n    \"2M\",\r\n    \"3m\",\r\n    \"3M\",\r\n    \"4P\",\r\n    \"5d\",\r\n    \"5P\",\r\n    \"6m\",\r\n    \"6M\",\r\n    \"7m\",\r\n    \"7M\",\r\n];\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    return range(2048, 4095).map(setNumToChroma);\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = get(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return get(s1).setNum === get(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedIn(set) {\r\n    const s = get(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedIn;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedIn(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    chroma,\r\n    num,\r\n    intervals,\r\n    chromas,\r\n    isSupersetOf,\r\n    isSubsetOf,\r\n    isNoteIncludedIn,\r\n    isEqual,\r\n    filter,\r\n    modes,\r\n    // deprecated\r\n    pcset,\r\n};\r\n//// PRIVATE ////\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter((n) => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals,\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport { EmptyPcset, chromaToIntervals, chromas, index as default, filter, get, includes, isEqual, isNoteIncludedIn, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.es.js.map\n", "import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M ^ \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 \u0394 ma7 M7 Maj7 ^7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 \u03949 ^9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69 M69\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\r\n    [\r\n        \"1P 3M 5P 7M 11A\",\r\n        \"major seventh sharp eleventh\",\r\n        \"maj#4 \u0394#4 \u0394#11 M7#11 ^7#11 maj7#11\",\r\n    ],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\r\n        \"1P 3m 5P 7M\",\r\n        \"minor/major seventh\",\r\n        \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -\u03947 m\u0394 -^7\",\r\n    ],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\r\n    [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim \u00B0 o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 \u00B07 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 \u00F8 -7b5 h7 h\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\r\n    [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\r\n        \"1P 4P 5P 7m 9m\",\r\n        \"suspended fourth flat ninth\",\r\n        \"b9sus phryg 7b9sus 7b9sus4\",\r\n    ],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\r\n    [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\r\n    [\r\n        \"1P 3M 5P 7M 9M 11A\",\r\n        \"major sharp eleventh (lydian)\",\r\n        \"maj9#11 \u03949#11 ^9#11\",\r\n    ],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\nconst chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\n/**\r\n * Get all chord (long) names\r\n */\r\nfunction names() {\r\n    return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\n/**\r\n * Get all chord symbols\r\n */\r\nfunction symbols() {\r\n    return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...get$1(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases,\r\n    };\r\n    dictionary.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar index$1 = {\r\n    names,\r\n    symbols,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    chordType,\r\n};\n\nexport { add, addAlias, all, chordType, index$1 as default, entries, get, keys, names, removeAll, symbols };\n//# sourceMappingURL=index.es.js.map\n", "import { all } from '@tonaljs/chord-type';\nimport { note } from '@tonaljs/core';\nimport { modes } from '@tonaljs/pcset';\n\nconst namedSet = (notes) => {\r\n    const pcToName = notes.reduce((record, n) => {\r\n        const chroma = note(n).chroma;\r\n        if (chroma !== undefined) {\r\n            record[chroma] = record[chroma] || note(n).name;\r\n        }\r\n        return record;\r\n    }, {});\r\n    return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source) {\r\n    const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n    if (note.length === 0) {\r\n        return [];\r\n    }\r\n    const found = findExactMatches(notes, 1);\r\n    return found\r\n        .filter((chord) => chord.weight)\r\n        .sort((a, b) => b.weight - a.weight)\r\n        .map((chord) => chord.name);\r\n}\r\nfunction findExactMatches(notes, weight) {\r\n    const tonic = notes[0];\r\n    const tonicChroma = note(tonic).chroma;\r\n    const noteName = namedSet(notes);\r\n    // we need to test all chormas to get the correct baseNote\r\n    const allModes = modes(notes, false);\r\n    const found = [];\r\n    allModes.forEach((mode, index) => {\r\n        // some chords could have the same chroma but different interval spelling\r\n        const chordTypes = all().filter((chordType) => chordType.chroma === mode);\r\n        chordTypes.forEach((chordType) => {\r\n            const chordName = chordType.aliases[0];\r\n            const baseNote = noteName(index);\r\n            const isInversion = index !== tonicChroma;\r\n            if (isInversion) {\r\n                found.push({\r\n                    weight: 0.5 * weight,\r\n                    name: `${baseNote}${chordName}/${tonic}`,\r\n                });\r\n            }\r\n            else {\r\n                found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\r\n            }\r\n        });\r\n    });\r\n    return found;\r\n}\r\nvar index = { detect };\n\nexport { index as default, detect };\n//# sourceMappingURL=index.es.js.map\n", "import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\", \"messiaen's mode #1\"],\r\n    [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 2A 3M 4A 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\",\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"superlocrian diminished\",\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\r\n    [\r\n        \"1P 2M 3m 4A 5P 6M 7m\",\r\n        \"dorian #4\",\r\n        \"ukrainian dorian\",\r\n        \"romanian minor\",\r\n        \"altered dorian\",\r\n    ],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\",\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\r\n        \"1P 2m 3m 3M 4A 5P 6M 7m\",\r\n        \"half-whole diminished\",\r\n        \"dominant diminished\",\r\n        \"messiaen's mode #2\",\r\n    ],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n    // 10-note scales\r\n    [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\nfunction names() {\r\n    return dictionary.map((scale) => scale.name);\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\nconst scaleType = deprecate(\"ScaleDictionary.scaleType\", \"ScaleType.get\", get);\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ScaleDictionary.entries\", \"ScaleType.all\", all);\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...get$1(intervals), name, intervals, aliases };\r\n    dictionary.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\r\nvar index$1 = {\r\n    names,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    scaleType,\r\n};\n\nexport { NoScaleType, add, addAlias, all, index$1 as default, entries, get, keys, names, removeAll, scaleType };\n//# sourceMappingURL=index.es.js.map\n", "import { detect } from '@tonaljs/chord-detect';\nexport { detect } from '@tonaljs/chord-detect';\nimport { get as get$1, all as all$1 } from '@tonaljs/chord-type';\nimport { deprecate, tokenizeNote, note, distance, transpose as transpose$1 } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { all } from '@tonaljs/scale-type';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    symbol: \"\",\r\n    root: \"\",\r\n    rootDegree: 0,\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction get(src) {\r\n    if (src === \"\") {\r\n        return NoChord;\r\n    }\r\n    if (Array.isArray(src) && src.length === 2) {\r\n        return getChord(src[1], src[0]);\r\n    }\r\n    else {\r\n        const [tonic, type] = tokenize(src);\r\n        const chord = getChord(type, tonic);\r\n        return chord.empty ? getChord(src) : chord;\r\n    }\r\n}\r\n/**\r\n * Get chord properties\r\n *\r\n * @param typeName - the chord type name\r\n * @param [tonic] - Optional tonic\r\n * @param [root]  - Optional root (requires a tonic)\r\n */\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n    const type = get$1(typeName);\r\n    const tonic = note(optionalTonic || \"\");\r\n    const root = note(optionalRoot || \"\");\r\n    if (type.empty ||\r\n        (optionalTonic && tonic.empty) ||\r\n        (optionalRoot && root.empty)) {\r\n        return NoChord;\r\n    }\r\n    const rootInterval = distance(tonic.pc, root.pc);\r\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n    if (!root.empty && !rootDegree) {\r\n        return NoChord;\r\n    }\r\n    const intervals = Array.from(type.intervals);\r\n    for (let i = 1; i < rootDegree; i++) {\r\n        const num = intervals[0][0];\r\n        const quality = intervals[0][1];\r\n        const newNum = parseInt(num, 10) + 7;\r\n        intervals.push(`${newNum}${quality}`);\r\n        intervals.shift();\r\n    }\r\n    const notes = tonic.empty\r\n        ? []\r\n        : intervals.map((i) => transpose$1(tonic, i));\r\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc}`;\r\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n    return {\r\n        ...type,\r\n        name,\r\n        symbol,\r\n        type: type.name,\r\n        root: root.name,\r\n        intervals,\r\n        rootDegree,\r\n        tonic: tonic.name,\r\n        notes,\r\n    };\r\n}\r\nconst chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return chordName;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = get(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return all()\r\n        .filter((scale) => isChordIncluded(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = get(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSuperset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = get(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSubset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\nvar index = {\r\n    getChord,\r\n    get,\r\n    detect,\r\n    chordScales,\r\n    extended,\r\n    reduced,\r\n    tokenize,\r\n    transpose,\r\n    // deprecate\r\n    chord,\r\n};\n\nexport { chord, chordScales, index as default, extended, get, getChord, reduced, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n", "// source: https://en.wikipedia.org/wiki/Note_value\r\nconst DATA = [\r\n    [\r\n        0.125,\r\n        \"dl\",\r\n        [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\r\n    ],\r\n    [0.25, \"l\", [\"long\", \"longa\"]],\r\n    [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n    [1, \"w\", [\"whole\", \"semibreve\"]],\r\n    [2, \"h\", [\"half\", \"minim\"]],\r\n    [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n    [8, \"e\", [\"eighth\", \"quaver\"]],\r\n    [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n    [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n    [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n    [128, \"h\", [\"hundred twenty-eighth\"]],\r\n    [256, \"th\", [\"two hundred fifty-sixth\"]],\r\n];\n\nconst VALUES = [];\r\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\r\nconst NoDuration = {\r\n    empty: true,\r\n    name: \"\",\r\n    value: 0,\r\n    fraction: [0, 0],\r\n    shorthand: \"\",\r\n    dots: \"\",\r\n    names: [],\r\n};\r\nfunction names() {\r\n    return VALUES.reduce((names, duration) => {\r\n        duration.names.forEach((name) => names.push(name));\r\n        return names;\r\n    }, []);\r\n}\r\nfunction shorthands() {\r\n    return VALUES.map((dur) => dur.shorthand);\r\n}\r\nconst REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n    const [_, simple, dots] = REGEX.exec(name) || [];\r\n    const base = VALUES.find((dur) => dur.shorthand === simple || dur.names.includes(simple));\r\n    if (!base) {\r\n        return NoDuration;\r\n    }\r\n    const fraction = calcDots(base.fraction, dots.length);\r\n    const value = fraction[0] / fraction[1];\r\n    return { ...base, name, dots, value, fraction };\r\n}\r\nconst value = (name) => get(name).value;\r\nconst fraction = (name) => get(name).fraction;\r\nvar index = { names, shorthands, get, value, fraction };\r\n//// PRIVATE ////\r\nfunction add(denominator, shorthand, names) {\r\n    VALUES.push({\r\n        empty: false,\r\n        dots: \"\",\r\n        name: \"\",\r\n        value: 1 / denominator,\r\n        fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n        shorthand,\r\n        names,\r\n    });\r\n}\r\nfunction calcDots(fraction, dots) {\r\n    const pow = Math.pow(2, dots);\r\n    let numerator = fraction[0] * pow;\r\n    let denominator = fraction[1] * pow;\r\n    const base = numerator;\r\n    // add fractions\r\n    for (let i = 0; i < dots; i++) {\r\n        numerator += base / Math.pow(2, i + 1);\r\n    }\r\n    // simplify\r\n    while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n        numerator /= 2;\r\n        denominator /= 2;\r\n    }\r\n    return [numerator, denominator];\r\n}\n\nexport default index;\nexport { fraction, get, names, shorthands, value };\n//# sourceMappingURL=index.es.js.map\n", "import { interval, distance as distance$1, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst get = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get quality of an interval\r\n * @function\r\n * @example\r\n * Interval.quality('P4') // => \"P\"\r\n */\r\nconst quality = (name) => interval(name).q;\r\n/**\r\n * Get number of an interval\r\n * @function\r\n * @example\r\n * Interval.num('P4') // => 4\r\n */\r\nconst num = (name) => interval(name).num;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Find interval between two notes\r\n *\r\n * @example\r\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\r\n */\r\nconst distance = distance$1;\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nfunction transposeFifths(interval, fifths) {\r\n    const ivl = get(interval);\r\n    if (ivl.empty)\r\n        return \"\";\r\n    const [nFifths, nOcts, dir] = ivl.coord;\r\n    return coordToInterval([nFifths + fifths, nOcts, dir]).name;\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    num,\r\n    semitones,\r\n    quality,\r\n    fromSemitones,\r\n    distance,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract,\r\n    transposeFifths,\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport { add, addTo, index as default, distance, fromSemitones, get, invert, name, names, num, quality, semitones, simplify, substract, transposeFifths };\n//# sourceMappingURL=index.es.js.map\n", "import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n        return \"\";\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar index = { isMidi, toMidi, midiToFreq, midiToNoteName, freqToMidi };\n\nexport { index as default, freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.es.js.map\n", "import { deprecate, isPitch, altToAcc, isNamed, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction get(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? get(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? get(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\nconst romanNumeral = deprecate(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir,\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    // deprecated\r\n    romanNumeral,\r\n};\n\nexport { index as default, get, names, tokenize };\n//# sourceMappingURL=index.es.js.map\n", "import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { get } from '@tonaljs/roman-numeral';\n\nconst Empty = Object.freeze([]);\r\nconst NoKey = {\r\n    type: \"major\",\r\n    tonic: \"\",\r\n    alteration: 0,\r\n    keySignature: \"\",\r\n};\r\nconst NoKeyScale = {\r\n    tonic: \"\",\r\n    grades: Empty,\r\n    intervals: Empty,\r\n    scale: Empty,\r\n    chords: Empty,\r\n    chordsHarmonicFunction: Empty,\r\n    chordScales: Empty,\r\n};\r\nconst NoMajorKey = {\r\n    ...NoKey,\r\n    ...NoKeyScale,\r\n    type: \"major\",\r\n    minorRelative: \"\",\r\n    scale: Empty,\r\n    secondaryDominants: Empty,\r\n    secondaryDominantsMinorRelative: Empty,\r\n    substituteDominants: Empty,\r\n    substituteDominantsMinorRelative: Empty,\r\n};\r\nconst NoMinorKey = {\r\n    ...NoKey,\r\n    type: \"minor\",\r\n    relativeMajor: \"\",\r\n    natural: NoKeyScale,\r\n    harmonic: NoKeyScale,\r\n    melodic: NoKeyScale,\r\n};\r\nconst mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, chords, harmonicFunctions, chordScales) {\r\n    return (tonic) => {\r\n        const intervals = grades.map((gr) => get(gr).interval || \"\");\r\n        const scale = intervals.map((interval) => transpose(tonic, interval));\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: mapScaleToType(scale, chords),\r\n            chordsHarmonicFunction: harmonicFunctions.slice(),\r\n            chordScales: mapScaleToType(scale, chordScales, \" \"),\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D  \".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const pc = note(tonic).pc;\r\n    if (!pc)\r\n        return NoMajorKey;\r\n    const keyScale = MajorScale(pc);\r\n    const alteration = distInFifths(\"C\", pc);\r\n    const romanInTonic = (src) => {\r\n        const r = get(src);\r\n        if (r.empty)\r\n            return \"\";\r\n        return transpose(tonic, r.interval) + r.chordType;\r\n    };\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(pc, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tnc) {\r\n    const pc = note(tnc).pc;\r\n    if (!pc)\r\n        return NoMinorKey;\r\n    const alteration = distInFifths(\"C\", pc) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic: pc,\r\n        relativeMajor: transpose(pc, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(pc),\r\n        harmonic: HarmonicScale(pc),\r\n        melodic: MelodicScale(pc),\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\r\nvar index = { majorKey, majorTonicFromKeySignature, minorKey };\n\nexport { index as default, majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.es.js.map\n", "import { rotate } from '@tonaljs/collection';\nimport { deprecate, transpose } from '@tonaljs/core';\nimport { simplify, transposeFifths } from '@tonaljs/interval';\nimport { EmptyPcset } from '@tonaljs/pcset';\nimport { get as get$1 } from '@tonaljs/scale-type';\n\nconst MODES = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\r\n];\r\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: [],\r\n};\r\nconst modes = MODES.map(toMode);\r\nconst index = {};\r\nmodes.forEach((mode) => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach((alias) => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * get('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction get(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? get(name.name)\r\n            : NoMode;\r\n}\r\nconst mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\n/**\r\n * Get a list of all modes\r\n */\r\nfunction all() {\r\n    return modes.slice();\r\n}\r\nconst entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\n/**\r\n * Get a list of all mode names\r\n */\r\nfunction names() {\r\n    return modes.map((mode) => mode.name);\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = get$1(name).intervals;\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases,\r\n    };\r\n}\r\nfunction notes(modeName, tonic) {\r\n    return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\r\n}\r\nfunction chords(chords) {\r\n    return (modeName, tonic) => {\r\n        const mode = get(modeName);\r\n        if (mode.empty)\r\n            return [];\r\n        const triads = rotate(mode.modeNum, chords);\r\n        const tonics = mode.intervals.map((i) => transpose(tonic, i));\r\n        return triads.map((triad, i) => tonics[i] + triad);\r\n    };\r\n}\r\nconst triads = chords(MODES.map((x) => x[4]));\r\nconst seventhChords = chords(MODES.map((x) => x[5]));\r\nfunction distance(destination, source) {\r\n    const from = get(source);\r\n    const to = get(destination);\r\n    if (from.empty || to.empty)\r\n        return \"\";\r\n    return simplify(transposeFifths(\"1P\", to.alt - from.alt));\r\n}\r\nfunction relativeTonic(destination, source, tonic) {\r\n    return transpose(tonic, distance(destination, source));\r\n}\r\nvar index$1 = {\r\n    get,\r\n    names,\r\n    all,\r\n    distance,\r\n    relativeTonic,\r\n    notes,\r\n    triads,\r\n    seventhChords,\r\n    // deprecated\r\n    entries,\r\n    mode,\r\n};\n\nexport { all, index$1 as default, distance, entries, get, mode, names, notes, relativeTonic, seventhChords, triads };\n//# sourceMappingURL=index.es.js.map\n", "import { all } from '@tonaljs/chord-type';\nimport { rotate, range } from '@tonaljs/collection';\nimport { deprecate, note, transpose } from '@tonaljs/core';\nimport { sortedUniqNames, fromMidi, enharmonic } from '@tonaljs/note';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { names as names$1, get as get$1, all as all$1 } from '@tonaljs/scale-type';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get all scale names\r\n * @function\r\n */\r\nconst names = names$1;\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction get(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get$1(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map((i) => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\nconst scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = get(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return all()\r\n        .filter((chord) => inScale(chord.chroma))\r\n        .map((chord) => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = get(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((scale) => isSuperset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(get(name).chroma);\r\n    return all$1()\r\n        .filter((scale) => isSubset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = get(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = get(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter((x) => x[0]);\r\n}\r\nfunction getNoteNameOf(scale) {\r\n    const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\r\n    const chromas = names.map((name) => note(name).chroma);\r\n    return (noteOrMidi) => {\r\n        const currNote = typeof noteOrMidi === \"number\"\r\n            ? note(fromMidi(noteOrMidi))\r\n            : note(noteOrMidi);\r\n        const height = currNote.height;\r\n        if (height === undefined)\r\n            return undefined;\r\n        const chroma = height % 12;\r\n        const position = chromas.indexOf(chroma);\r\n        if (position === -1)\r\n            return undefined;\r\n        return enharmonic(currNote.name, names[position]);\r\n    };\r\n}\r\nfunction rangeOf(scale) {\r\n    const getName = getNoteNameOf(scale);\r\n    return (fromNote, toNote) => {\r\n        const from = note(fromNote).height;\r\n        const to = note(toNote).height;\r\n        if (from === undefined || to === undefined)\r\n            return [];\r\n        return range(from, to)\r\n            .map(getName)\r\n            .filter((x) => x);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    names,\r\n    extended,\r\n    modeNames,\r\n    reduced,\r\n    scaleChords,\r\n    scaleNotes,\r\n    tokenize,\r\n    rangeOf,\r\n    // deprecated\r\n    scale,\r\n};\n\nexport { index as default, extended, get, modeNames, names, rangeOf, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.es.js.map\n", "/**\n * @module instruments/Piano\n */\n\n/**\n * Map:keyCount->pitchRange\n * pitchRange is {minPitch:number, maxPitch:number}\n *\n * @type {Map<number,object>}\n */\nexport const pianoPitchRange = new Map([\n  [72, { minPitch: 24, maxPitch: 95 }],\n  [88, { minPitch: 21, maxPitch: 108 }],\n  [128, { minPitch: 0, maxPitch: 127 }]\n])\n\n/**\n *\n * @param {Note[]} notes notes with only MIDI information\n * @returns {?} notes with fingering information\n */\n// export function fingeringFromMidi(notes) {\n// TODO: detect chords first?\n// TODO: then lookup chords' fingerings from a lookup table\n\n// TODO: alternatively (as fallback) use heuristics\n\n// TODO: or try to do it like humans do when playing\n\n// }\n", "import { matchGtAndRecordingNotes } from '../comparison/Matching.js'\r\nimport { randomInt, randomLcg, randomUniform, median } from 'd3'\r\nimport * as Drums from '../instruments/Drums.js'\r\nimport Note from '../types/Note.js'\r\nimport NoteArray from '../types/NoteArray.js'\r\n\r\n/**\r\n * @module Alignment\r\n */\r\n\r\n/**\r\n * Given two NoteArrays, shift the second one in time such that they are aligned\r\n *\r\n * @todo use https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm\r\n *      to find note alignment, then only use those for force calculation\r\n * @param {NoteArray} gt a NoteArray, e.g. the ground truth\r\n * @param {NoteArray} rec a NoteArray to align to a\r\n * @returns {NoteArray} an aligned copy of b\r\n */\r\nexport function alignNoteArrays (gt, rec) {\r\n  rec = rec.clone()\r\n  const f = alignmentForce(gt.getNotes(), rec.getNotes())\r\n  rec = rec.shiftTime(f)\r\n  // console.log(`Aligned recording via shifting by ${f.toFixed(3)} seconds`);\r\n  return {\r\n    aligned: rec,\r\n    timeDifference: f\r\n  }\r\n}\r\n\r\n/**\r\n * Given two NoteArrays, shift the second one in time such that they are aligned\r\n *\r\n * @param {NoteArray} gt a NoteArray, e.g. the ground truth\r\n * @param {NoteArray} rec a NoteArray to align to a\r\n * @returns {NoteArray} an aligned copy of b\r\n */\r\nexport function alignNoteArrays2 (gt, rec) {\r\n  let timeDifference = 0\r\n  let tries = 0\r\n  rec = rec.clone()\r\n  while (tries < 25) {\r\n    // Get a 1-to-1 matching between gt and rec notes so noise has less impact\r\n    const matching = matchGtAndRecordingNotes(rec.getNotes(), gt.getNotes())\r\n    // Get average time difference between matched notes\r\n    let timeDiff = 0\r\n    let count = 0\r\n    for (const m of matching.values()) {\r\n      const { gtRecMap } = m\r\n      for (const [gtStart, matchedRecNote] of gtRecMap.entries()) {\r\n        if (matchedRecNote !== null) {\r\n          count++\r\n          timeDiff += gtStart - matchedRecNote.start\r\n        }\r\n      }\r\n    }\r\n    timeDiff /= count\r\n    // Shift recording\r\n    rec.shiftTime(timeDiff)\r\n    timeDifference += timeDiff\r\n    // console.log(`${tries} shifting by ${timeDiff.toFixed(3)} seconds`);\r\n    // Stop while loop when finished\r\n    if (Math.abs(timeDiff) < 0.0005) {\r\n      break\r\n    }\r\n    tries++\r\n  }\r\n  return {\r\n    aligned: rec,\r\n    timeDifference\r\n  }\r\n}\r\n\r\n/**\r\n * Given two NoteArrays, shift the second one in time such that they are aligned\r\n *\r\n * @todo use median instead of average?\r\n * @param {NoteArray} gt a NoteArray, e.g. the ground truth\r\n * @param {NoteArray} rec a NoteArray to align to a\r\n * @returns {NoteArray} an aligned copy of b\r\n */\r\nexport function alignNoteArrays3 (gt, rec) {\r\n  let timeDifference = 0\r\n  let tries = 0\r\n  rec = rec.clone()\r\n  while (tries < 25) {\r\n    // Get a 1-to-1 matching between gt and rec notes so noise has less impact\r\n    const matching = matchGtAndRecordingNotes(rec.getNotes(), gt.getNotes())\r\n    // Get time differences\r\n    const timeDiffs = []\r\n    for (const m of matching.values()) {\r\n      for (const [gtStart, matchedRecNote] of m.gtRecMap.entries()) {\r\n        if (matchedRecNote !== null) {\r\n          timeDiffs.push(gtStart - matchedRecNote.start)\r\n        }\r\n      }\r\n    }\r\n    const shift = median(timeDiffs)\r\n    // Shift recording\r\n    rec.shiftTime(shift)\r\n    timeDifference += shift\r\n    // console.log(`${tries} shifting by ${shift.toFixed(3)} seconds`);\r\n    // Stop while loop when finished\r\n    if (Math.abs(shift) < 0.0001) {\r\n      break\r\n    }\r\n    tries++\r\n  }\r\n  return {\r\n    aligned: rec,\r\n    timeDifference\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates the mean difference between all notes in a and the nearest same-\r\n * pitched notes in b\r\n *\r\n * @param {Note[]} a array with notes\r\n * @param {Note[]} b array with notes\r\n * @returns {number} mean time difference\r\n */\r\nfunction alignmentForce (a, b) {\r\n  let difference = 0\r\n  let count = 0\r\n  // For each note in a, search the closest note in b with the same pitch and calculate the distance\r\n  for (const noteA of a) {\r\n    let distance = Number.POSITIVE_INFINITY\r\n    let diff = Number.POSITIVE_INFINITY\r\n    for (const noteB of b) {\r\n      if (noteA.pitch === noteB.pitch) {\r\n        const dist = Math.abs(noteA.start - noteB.start)\r\n        if (dist < distance) {\r\n          distance = dist\r\n          diff = noteA.start - noteB.start\r\n          // TODO: Larger distances might be errors\r\n          // if (diff > 1) {\r\n          //     diff = Math.sqrt(diff);\r\n          // }\r\n        }\r\n      }\r\n    }\r\n    // (If not found, this does not change alignment)\r\n    if (distance < Number.POSITIVE_INFINITY) {\r\n      difference += diff\r\n      count++\r\n    }\r\n  }\r\n  return difference / count\r\n}\r\n\r\n/**\r\n * Test function\r\n *\r\n * @todo move to test\r\n */\r\nexport function testAlignment () {\r\n  const test = (a, b, title) => {\r\n    console.log(title)\r\n    console.log(b.getNotes().map(n => n.start))\r\n    const aligned = alignNoteArrays(a, b)\r\n    console.log(aligned.getNotes().map(n => n.start))\r\n  }\r\n  const a = new NoteArray([\r\n    new Note(69, 0, 127, 0, 1),\r\n    new Note(70, 1, 127, 0, 2),\r\n    new Note(71, 2, 127, 0, 3)\r\n  ])\r\n  console.log(a.getNotes().map(n => n.start))\r\n\r\n  let b\r\n\r\n  b = a.clone().shiftTime(2)\r\n  test(a, b, 'shifted by 2')\r\n\r\n  b = a.clone().shiftTime(-2)\r\n  test(a, b, 'shifted by -2')\r\n\r\n  b = a.clone()\r\n    .shiftTime(3)\r\n    .addNotes([new Note(72, 2, 127, 0, 3)])\r\n  test(a, b, 'shifted by 3, added note')\r\n\r\n  b = a.clone().repeat(2)\r\n  test(a, b, 'repeated')\r\n\r\n  b = a.clone()\r\n    .repeat(2)\r\n    .shiftTime(3)\r\n  test(a, b, 'repeated, shifted by 3')\r\n}\r\n\r\n/**\r\n * @todo Benchmark different aligment functions on a randomly generated test set\r\n * This allows to check the calculated alignment against a known ground truth\r\n */\r\nexport function alignmentBenchmark () {\r\n  // Use random seed for reproducability\r\n  const seed = 0.448_715_738_882_824_23 // any number in [0, 1)\r\n  const rand127 = randomInt.source(randomLcg(seed))(0, 127)\r\n  const maxTime = 500\r\n  const randTime = randomUniform.source(randomLcg(seed))(0, maxTime)\r\n  const randDuration = randomUniform.source(randomLcg(seed))(1 / 64, 2)\r\n\r\n  // Create random notes\r\n  const randomNotes = Array.from({ length: 200 }).fill(0).map(() => {\r\n    const start = randTime()\r\n    return new Note(\r\n      rand127(),\r\n      start,\r\n      127,\r\n      0,\r\n      start + randDuration()\r\n    )\r\n  })\r\n  const notes = new NoteArray(randomNotes).sortByTime()\r\n  console.log('true notes', notes.getNotes())\r\n\r\n  // Shift notes by some amount of seconds (this is what alignment should calculate!)\r\n  const shift = 3\r\n  const shifted = notes.clone().shiftTime(shift)\r\n  console.log('shifted', shifted)\r\n\r\n  // Introduce errors, as a human would\r\n  const deviation = 0.1\r\n  const pAdd = 0.1\r\n  const pRemove = 0.1\r\n  let variation = Drums.generateDrumVariation(shifted.getNotes(), deviation, pAdd, pRemove)\r\n  variation = new NoteArray(variation)\r\n  console.log('variation', variation)\r\n\r\n  // Run all functions\r\n  const funcs = [alignNoteArrays, alignNoteArrays2, alignNoteArrays3]\r\n  console.log(`True time shift: ${shift} seconds`)\r\n\r\n  console.log('Only shifted')\r\n  for (const f of funcs) {\r\n    const { timeDifference } = f(notes, shifted)\r\n    const error = Math.abs(timeDifference - -shift)\r\n    console.log(`${f.name}\\nshift: ${timeDifference.toFixed(3)} \\nError ${error.toFixed(3)}`)\r\n  }\r\n\r\n  console.log('Shifted & variation')\r\n  for (const f of funcs) {\r\n    const { timeDifference } = f(notes, variation)\r\n    const error = Math.abs(timeDifference - -shift)\r\n    console.log(`${f.name}\\nshift: ${timeDifference.toFixed(3)} \\nError ${error.toFixed(3)}`)\r\n  }\r\n}\r\n", "import { group } from 'd3'\nimport * as Utils from '../utils/index.js'\nimport Note from '../types/Note.js' /* eslint-disable-line no-unused-vars */\n\n/**\n * @module comparison/Matching\n */\n\n/**\n * For one recording, separately for each pitch,\n * matches each recorded note to its closest ground truth note.\n * If there are multiple matches, the best (smallest time difference)\n * will be kept and others will be regarded as additional notes.\n * Ground truth notes without match will be regarded as missing notes.\n *\n * Result format (separated by pitch in a Map):\n * Map:pitch->{\n *    gtRecMap           matched rec. note for each GT note Map:gtNoteStart->recNote,\n *    additionalNotes:   rec. notes without matched GT note\n *    missingNotes:      GT notes without matched rec. note\n *    gtNotes:           all GT notes\n * }\n *\n * @todo add max distance?\n * @param {Note[]} recNotes recorded notes of a single recording\n * @param {Note[]} gtNotes ground truth notes\n * @returns {Map} result\n */\nexport function matchGtAndRecordingNotes (recNotes, gtNotes) {\n  const groupedByPitch = group(gtNotes, d => d.pitch)\n  const groupedByPitchRec = group(recNotes, d => d.pitch)\n  const result = new Map()\n  // For each pitch, map recorded notes to GT notes\n  for (const [pitch, gtNotes] of groupedByPitch.entries()) {\n    const gtRecMap = new Map()\n    const additionalNotes = []\n    const missingNotes = []\n    for (const n of gtNotes) {\n      gtRecMap.set(n.start, null)\n    }\n    // Recording might be missing this pitch, then all notes are missing\n    if (!groupedByPitchRec.has(pitch)) {\n      result.set(pitch, {\n        gtRecMap: new Map(),\n        additionalNotes: [],\n        missingNotes: gtNotes,\n        gtNotes\n      })\n      continue\n    }\n    const recNotes = groupedByPitchRec.get(pitch)\n    for (const r of recNotes) {\n      // Match each recorded note to the closest ground truth note\n      const nearest = Utils.findNearest(gtNotes, r)\n      const currentEntry = gtRecMap.get(nearest.start)\n      if (currentEntry === null) {\n        // If empty, take\n        gtRecMap.set(nearest.start, r)\n      } else {\n        // If it is taken, overtake it if the new match is closer\n        if (Math.abs(nearest.start - r.start) < Math.abs(currentEntry.start - r.start)) {\n          // If it can overtake, add the old note to 'wrong additional notes' list\n          gtRecMap.set(nearest.start, r)\n          additionalNotes.push(currentEntry)\n        } else {\n          // If it cannot overtake, add note to 'wrong additional notes' list\n          additionalNotes.push(r)\n        }\n      }\n    }\n    // Go trough all GT notes, those that have no recording assigned to it are missing notes\n    for (const n of gtNotes) {\n      if (gtRecMap.get(n.start) === null) {\n        missingNotes.push(n)\n      }\n    }\n    // Store result in map pitch->groupings\n    result.set(pitch, {\n      gtRecMap,\n      additionalNotes,\n      missingNotes,\n      gtNotes\n    })\n  }\n  // If a recording has a pitch that GT has not, all those notes are additional notes\n  for (const [pitch, recNotes] of groupedByPitchRec.entries()) {\n    if (!groupedByPitch.has(pitch)) {\n      result.set(pitch, {\n        gtRecMap: new Map(),\n        additionalNotes: recNotes,\n        missingNotes: [],\n        gtNotes: []\n      })\n    }\n  }\n  // console.log(result);\n  return result\n}\n\n/**\n * Matches all recorded notes from multiple recordings to the nearest\n * ground truth (GT) note.\n * Contrary to the matching created by matchGtAndRecordingNotes()\n * missing and additional notes are not considered, so multiple notes\n * from a single recording can be matched to the same GT note.\n *\n * Result format:\n * Map:pitch->Map:gtStart->arrayOfMatchedRecNotes\n *\n * @param {Recording[]} recordings recordings\n * @param {Note[]} gtNotes ground truth notes\n * @returns {Map} matching\n */\nexport function matchGtAndMultipleRecordings (recordings, gtNotes) {\n  const allRecNotes = recordings.flatMap(d => d.notes)\n  const groupedByPitch = group(gtNotes, d => d.pitch)\n  const groupedByPitchRec = group(allRecNotes, d => d.pitch)\n  const result = new Map()\n  // For each pitch, map recorded notes to GT notes and keep track of misses\n  for (const [pitch, gtNotes] of groupedByPitch.entries()) {\n    const gtRecMap = new Map()\n    for (const n of gtNotes) {\n      gtRecMap.set(n.start, [])\n    }\n    // Recording might be missing this pitch, then match is empty\n    if (!groupedByPitchRec.has(pitch)) {\n      result.set(pitch, new Map())\n      continue\n    }\n    const recNotes = groupedByPitchRec.get(pitch)\n    for (const r of recNotes) {\n      // Match each recorded note to the closest ground truth note\n      const nearest = Utils.findNearest(gtNotes, r)\n      const currentEntry = gtRecMap.get(nearest.start)\n      currentEntry.push(r)\n      gtRecMap.set(nearest.start, currentEntry)\n    }\n    // Store result in map pitch->groupings\n    result.set(pitch, gtRecMap)\n  }\n  // console.log(result);\n  return result\n}\n\n/**\n * Calculates (for each pitch) the average error for each GT note (averaged\n * over all matched notes in the recordings),\n * as well as the maximum of all those average errors.\n * GT notes that have no matched recorded notes will have an error of 0.\n *\n * @param {Map} multiMatching matching with a GT and multiple recordings\n * @param {number} errorThreshold number seconds of deviation above which\n *      to exclude an error\n * @returns {Map} error summary Map:pitch->{gtErrorMap, maxError},\n *      gtErrorMap is Map:gtStart->error (error is average over all time\n *      differences between the GT note and matched recNotes)\n */\nexport function getMultiMatchingErrorPerNote (multiMatching, errorThreshold = 3) {\n  const result = new Map()\n  for (const [pitch, gtRecMap] of multiMatching.entries()) {\n    const gtErrorMap = new Map()\n    let maxError = 0\n    // Go through all gtStart and matched notes\n    for (const [gtStart, matchedRecNotes] of gtRecMap.entries()) {\n      let error = 0\n      if (matchedRecNotes.length > 0) {\n        for (const note of matchedRecNotes) {\n          const error_ = Math.abs(note.start - gtStart)\n          if (error_ <= errorThreshold) {\n            error += error_\n          }\n        }\n        error /= matchedRecNotes.length\n        if (error > maxError) {\n          maxError = error\n        }\n      }\n      gtErrorMap.set(gtStart, error)\n    }\n    result.set(pitch, {\n      gtErrorMap,\n      maxError\n    })\n  }\n  return result\n}\n\n/**\n * Calculates the error of a matching by applying penalties and summing up\n *\n * @param {Map} matching a matching created by matchGtAndRecordingNotes\n * @param {number} addPenalty penalty for each additonal note\n * @param {number} missPenalty penalty for each missing note\n * @param {number} timingPenalty penalty for note timing differences in seconds\n * @param {number} timeThreshold timing errors below it (absolute) are ignored\n * @returns {object} errors by category\n */\nexport function getMatchingError (matching, addPenalty, missPenalty, timingPenalty, timeThreshold = 0) {\n  const result = {\n    total: 0,\n    totalAdd: 0,\n    totalMiss: 0,\n    totalCorrect: 0,\n    totalTime: 0,\n    totalNumberOfGtNotes: 0,\n    perPitch: new Map()\n  }\n  for (const [pitch, m] of matching.entries()) {\n    const { gtRecMap, additionalNotes, missingNotes, gtNotes } = m\n    const addError = additionalNotes.length * addPenalty\n    const missError = missingNotes.length * missPenalty\n    let correct = 0\n    let timeError = 0\n    for (const [gtStart, matchedRecNote] of gtRecMap.entries()) {\n      // If it is null, this is handled in missingNotes\n      if (matchedRecNote !== null) {\n        correct++\n        const error = Math.abs(matchedRecNote.start - gtStart)\n        if (error > timeThreshold) {\n          timeError += error\n        }\n      }\n    }\n    const total = addError + missError + timeError * timingPenalty\n    result.perPitch.set(pitch, {\n      total,\n      addError,\n      missError,\n      correct,\n      timeError,\n      numberOfGtNotes: gtNotes.length\n    })\n    // Update total\n    result.totalAdd += addError\n    result.totalMiss += missError\n    result.totalCorrect += correct\n    result.totalTime += timeError\n    result.total += total\n    result.totalNumberOfGtNotes += gtNotes.length\n  }\n  return result\n}\n\n/**\n * Cuts a section from a matching by filtering on the start times\n * of ground truth, missing, and additonal notes\n *\n * @param {Map} matching matching\n * @param {number} start start time (inclusive)\n * @param {number} end end time (exclusive)\n * @returns {Map} section of matching\n */\nexport function getMatchingSection (matching, start, end) {\n  const result = new Map()\n  for (const [pitch, m] of matching.entries()) {\n    const { gtRecMap, additionalNotes, missingNotes, gtNotes } = m\n    const newGtRecMap = new Map()\n    for (const [gtStart, matchedRecNote] of gtRecMap.entries()) {\n      // If it is null, this is handled in missingNotes\n      if (matchedRecNote !== null && gtStart >= start && gtStart < end) {\n        newGtRecMap.set(gtStart, matchedRecNote)\n      }\n    }\n    result.set(pitch, {\n      gtRecMap: newGtRecMap,\n      additionalNotes: additionalNotes.filter(d => d.start >= start && d.start < end),\n      missingNotes: missingNotes.filter(d => d.start >= start && d.start < end),\n      gtNotes\n    })\n  }\n  return result\n}\n\n/**\n * Shortcut for getMatchingSection and getMatchingError,\n * see them for parameter details.\n *\n * @param {Map} matching matching\n * @param {number} start start time (inclusive)\n * @param {number} end end time (exclusive)\n * @param {number} addPenalty penalty for each additonal note\n * @param {number} missPenalty penalty for each missing note\n * @param {number} timingPenalty penalty for note timing differences in seconds\n * @returns {object} error by category\n */\nexport function getMatchingSliceError (matching, start, end, addPenalty, missPenalty, timingPenalty) {\n  const section = getMatchingSection(matching, start, end)\n  const error = getMatchingError(section, addPenalty, missPenalty, timingPenalty)\n  return error\n}\n", "export * from './ArrayUtils.js'\r\nexport * from './BlobUtils.js'\r\nexport * from './ColorUtils.js'\r\nexport * from './FormattingUtils.js'\r\nexport * from './LocalStorageUtils.js'\r\nexport * from './MathUtils.js'\r\nexport * from './MiscUtils.js'\r\nexport * from './MusicUtils.js'\r\nexport * from './NoteColorUtils.js'\r\nexport * from './RecordingsUtils.js'\r\nexport * from './StatisticsUtils.js'\r\nexport * from './WebMidiUtils.js'\r\n\r\n/**\r\n * @module utils\r\n */\r\n", "/**\n * @module utils/BlobUtils\n */\n\n/**\n * Converts a Blob to a base64 string\n *\n * @param {Blob} blob Blob\n * @returns {Promise<string,undefined>} base64 string\n */\nexport function blobToBase64 (blob) {\n  return new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.onloadend = () => resolve(reader.result)\n    reader.readAsDataURL(blob)\n  })\n}\n\n/**\n * Extracts the file extension from a Blob, so it can be saved as a file with\n * an appropriate extension.\n *\n * @param {Blob} blob Blob\n * @returns {string} file extension\n */\nexport function blobToFileExtension (blob) {\n  return blob.type.split('/')[1].split(';')[0]\n}\n", "import * as d3 from 'd3'\n\n/**\n * Determines the perceptual lightness of an HTML color\n *\n * @see https://stackoverflow.com/a/596241 (but normalizing to 0, 100)\n * @param {string} color HTML color specifier\n * @returns {number} lightness in [0, 100]\n */\nexport function getColorLightness (color) {\n  const { r, g, b } = d3.color(color).rgb()\n  // eslint-disable-next-line no-bitwise\n  const Y = (r + r + r + b + g + g + g + g) >> 3\n  return Y / 2.55\n}\n\n/**\n * Determines the average of mutliple given colors\n *\n * @param {string[]} colors HTML color specifiers\n * @returns {string} average as RGB string\n */\nexport function averageColor (colors) {\n  let mR = 0\n  let mG = 0\n  let mB = 0\n  for (const c of colors) {\n    const { r, g, b } = d3.color(c).rgb()\n    mR += r\n    mG += g\n    mB += b\n  }\n  mR = Math.round(mR / colors.length)\n  mG = Math.round(mG / colors.length)\n  mB = Math.round(mB / colors.length)\n  return `rgb(${mR}, ${mG}, ${mB})`\n}\n\n/**\n * Sets a color's opacity.\n * Does not support colors in rgba format.\n *\n * @param {string} color valid HTML color identifier\n * @param {number} [opacity=1] opacity from 0 to 1\n * @returns {string} color as RGBA string\n */\nexport function setOpacity (color, opacity = 1) {\n  const { r, g, b } = d3.color(color).rgb()\n  return `rgba(${r}, ${g}, ${b}, ${opacity})`\n}\n", "/**\n * @module utils/FormattingUtils\n */\n\n/**\n * Formats a time in seconds to <minutes>:<seconds>.<milliseconds>\n *\n * @param {number|null} seconds in seconds\n * @param {boolean} includeMillis include milli seconds in string?\n * @returns {string} 0-padded time string <minutes>:<seconds>.<milliseconds>\n */\nexport function formatTime (seconds, includeMillis = true) {\n  if (seconds === undefined || seconds === null) {\n    return includeMillis ? '--:--.---' : '--:--'\n  }\n  const s = Math.floor(seconds)\n  let min = (Math.floor(s / 60)).toString()\n  let sec = (s % 60).toString()\n  min = min.length < 2 ? `0${min}` : min\n  sec = sec.length < 2 ? `0${sec}` : sec\n  if (!includeMillis) {\n    return `${min}:${sec}`\n  }\n  let ms = (Math.round((seconds - s) * 1000)).toString()\n  if (ms.length < 2) {\n    ms = `00${ms}`\n  } else if (ms.length < 3) {\n    ms = `0${ms}`\n  }\n  return `${min}:${sec}.${ms}`\n}\n\n/**\n * Formats a Date to a string with format\n *      YYYY-mm-DDTHH:MM:SS\n * or when replaceT == true\n *      YYYY-mm-DD HH:MM:SS\n *\n * @param {Date} date date\n * @param {boolean} replaceT replace the 'T'?\n * @param {boolean} keepMillis keep milliseconds?\n * @returns {string} formatted date\n */\nexport function formatDate (date, replaceT = false, keepMillis = true) {\n  let string = date.toISOString()\n    .split(':')\n    .join('-')\n  if (!keepMillis) {\n    string = string.slice(0, string.indexOf('.'))\n  }\n  if (replaceT) {\n    string = string.replace('T', ' ')\n  }\n  return string\n}\n\n/**\n * Formats the song title (e.g. remove file extension and shorten)\n *\n * @param {string} title song title\n * @param {number} maxLength shorten to this length\n * @returns {string} formatted song title\n */\nexport function formatSongTitle (title, maxLength = 30) {\n  if (!title) {\n    return '[No Song]'\n  }\n  // Remove file extension\n  if (title.lastIndexOf('.') !== -1) {\n    title = title.slice(0, title.lastIndexOf('.'))\n  }\n  // Shorten\n  if (title.length > maxLength) {\n    title = `${title.slice(0, maxLength - 3)}...`\n  }\n  return title\n}\n", "/**\n * @module utils/LocalStorageUtils\n */\n\n/**\n * Stringifies an object and stores it in the localStorage\n *\n * @param {string} key key\n * @param {object} object JSON compatible object\n */\nexport function storeObjectInLocalStorage (key, object) {\n  const string = JSON.stringify(object)\n  localStorage.setItem(key, string)\n}\n\n/**\n * Retrieves a stringified object from the localStorage and parses it.\n *\n * @param {string} key key\n * @returns {object|null} object or null of not possible\n */\nexport function getObjectFromLocalStorage (key) {\n  const string = localStorage.getItem(key)\n  if (string === null) {\n    // console.warn(`LocalStorage has no key ${key}`);\n    return null\n  }\n  try {\n    return JSON.parse(string)\n  } catch {\n    return null\n  }\n}\n", "import * as d3 from 'd3'\r\n\r\n/**\r\n * @module utils/MiscUtils\r\n */\r\n\r\n/**\r\n * Clones a map where the values are flat objects,\r\n * i.e. values do not contain objects themselfes.\r\n *\r\n * @param {Map} map a map with object values\r\n * @returns {Map} a copy of the map with copies of the value objects\r\n */\r\nexport function deepCloneFlatObjectMap (map) {\r\n  const result = new Map()\r\n  for (const [key, value] of map.entries()) {\r\n    result.set(key, { ...value })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Groups the Notes from multiple tracks\r\n *\r\n * @param {Note[][]} tracks array of arrays of Note objects\r\n * @returns {Map} grouping\r\n */\r\nexport function groupNotesByPitch (tracks) {\r\n  const allNotes = tracks.flat()\r\n  if (allNotes.length === 0) {\r\n    return new Map()\r\n  }\r\n  return d3.group(allNotes, d => d.pitch)\r\n}\r\n\r\n/**\r\n * Reverses a given string.\r\n *\r\n * @param {string} s string\r\n * @returns {string} reversed string\r\n */\r\nexport function reverseString (s) {\r\n  return [...s].reverse().join('')\r\n}\r\n\r\n/**\r\n * Given some notes and a target note, finds\r\n * the note that has its start time closest to\r\n * the one of targetNote\r\n *\r\n * @todo replace by d3 argmin or sth?\r\n * @param {Note[]} notes notes\r\n * @param {Note} targetNote target note\r\n * @returns {Note} closest note to targetNote\r\n */\r\nexport function findNearest (notes, targetNote) {\r\n  if (!notes || notes.length === 0 || !targetNote) {\r\n    return null\r\n  }\r\n  let nearest = null\r\n  let dist = Number.POSITIVE_INFINITY\r\n  const targetStart = targetNote.start\r\n  for (const n of notes) {\r\n    const newDist = Math.abs(n.start - targetStart)\r\n    if (newDist < dist) {\r\n      dist = newDist\r\n      nearest = n\r\n    }\r\n  }\r\n  return nearest\r\n}\r\n\r\n/**\r\n * Allows to wait for a number of seconds with async/await\r\n * IMPORTANT: This it not exact, it will at *least* wait for X seconds\r\n *\r\n * @param {number} seconds number of seconds to wait\r\n * @returns {Promise} empty Promise that will resolve after the specified amount\r\n *      of seconds\r\n */\r\nexport function delay (seconds) {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, seconds * 1000)\r\n  })\r\n}\r\n", "import * as d3 from 'd3'\n\n/**\n * @module utils/NoteColorUtils\n */\n\n// TODO: move to colors/ folder?\n\n/**\n * Maps each note to a color\n * Colors from https://www.svpwiki.com/music+note+or+sound+colors\n * Order is C, C#, ... B\n *\n * @type {string[]}\n */\nconst noteColormap = [\n  '#ff0000',\n  '#ff4e00',\n  '#db7b00',\n  '#ffcc00',\n  '#e4ed00',\n  '#81d700',\n  '#00ffb4',\n  '#00ffea',\n  '#00baff',\n  '#3c00ff',\n  '#a800ff',\n  '#ff00fd'\n].map(d => {\n  // Make colors less saturated\n  const c = d3.hsl(d)\n  c.s = 0.5\n  return c.toString()\n})\n/**\n * Colorblind save colors from\n * Malandrino et al. - Visualization and Music Harmony: Design, Implementation,\n * and Evaluation https://ieeexplore.ieee.org/abstract/document/8564210\n * Order is C, C#, ... B\n *\n * @type {string[]}\n */\n// export const noteColormapAccessible = new Map([\n//     ['C', '#9aebff'],\n//     ['C#', '#add5ff'],\n//     ['D', '#d6d6ff'],\n//     ['D#', '#ebd5ff'],\n//     ['E', '#ffc2eb'],\n//     ['F', '#ffcbcc'],\n//     ['F#', '#ffd5c2'],\n//     ['G', '#ffebc2'],\n//     ['G#', '#ebffc2'],\n//     ['A', '#c2d599'],\n//     ['A#', '#99ebbe'],\n//     ['B', '#adebeb'],\n// ]);\nconst noteColormapAccessible = [\n  '#6699ff',\n  '#66ffff',\n  '#000000',\n  '#647878',\n  '#993366',\n  '#ff0000',\n  '#ffcc99',\n  '#ffff01',\n  '#ff9900',\n  '#009900',\n  '#66ff99',\n  '#0000cc'\n]\n\nconst colorInterpolator = d3.interpolateRgb('black', 'steelblue')\n/**\n * Gradient color map from black to steelblue\n *\n * @type {string[]}\n */\nconst noteColormapGradientArray = Array.from({ length: 12 })\n  .map((d, index) => colorInterpolator(index / 11))\n\n/**\n * Returns the note color depending on the given pitch.\n * (Simplifies note color lookup by looking up the color for pitch%12.)\n *\n * @param {number} pitch MIDI pitch in [0, 127]\n * @param {string} colormap one of 'default', 'accessible', 'gradient'\n * @returns {string} color code\n */\nexport function noteColorFromPitch (pitch, colormap = 'default') {\n  switch (colormap) {\n    case 'accessible':\n      return noteColormapAccessible[pitch % 12]\n    case 'gradient':\n      return noteColormapGradientArray[pitch % 12]\n    default:\n      return noteColormap[pitch % 12]\n  }\n}\n", "import * as d3 from 'd3'\r\n\r\n/**\r\n * @module utils/StatisticsUtils\r\n */\r\n\r\n/**\r\n * Computes the Pearson correlation\r\n *\r\n * @see https://gist.github.com/matt-west/6500993#gistcomment-3718526\r\n * @param {number[]} x an array of numbers\r\n * @param {number[]} y an array of numbers\r\n * @returns {number} correlation\r\n * @throws {'Invalid data, must be two arrays with same length'} for invalid\r\n *  arguments\r\n * @throws {'Invalid data, length must be >= 2'} for invalid arguments\r\n */\r\nexport function pearsonCorrelation (x, y) {\r\n  if (!x || !y || !x.length || !y.length || x.length !== y.length) {\r\n    throw new Error('Invalid data, must be two arrays with same length')\r\n  }\r\n  if (x.length < 2) {\r\n    throw new Error('Invalid data, length must be >= 2')\r\n  }\r\n  let n = x.length\r\n  let nn = 0\r\n  for (let i = 0; i < n; i++, nn++) {\r\n    if ((!x[i] && x[i] !== 0) || (!y[i] && y[i] !== 0)) {\r\n      nn--\r\n      continue\r\n    }\r\n    x[nn] = x[i]\r\n    y[nn] = y[i]\r\n  }\r\n  if (n !== nn) {\r\n    x = x.splice(0, nn)\r\n    y = y.splice(0, nn)\r\n    n = nn\r\n  }\r\n  const meanX = d3.mean(x)\r\n  const meanY = d3.mean(y)\r\n  const calc = (v, mean) =>\r\n    Math.sqrt(v.reduce((s, a) => s + a * a, 0) - n * mean * mean)\r\n  return (\r\n    (x.map((e, i) => ({ x: e, y: y[i] }))\r\n      .reduce((v, a) => v + a.x * a.y, 0) -\r\n      n * meanX * meanY) /\r\n    (calc(x, meanX) * calc(y, meanY))\r\n  )\r\n}\r\n\r\n/**\r\n * Calculates a 95% confidence interval\r\n *\r\n * @see https://www.alchemer.com/resources/blog/how-to-calculate-confidence-intervals/\r\n * @param {numnber[]} values values\r\n * @returns {object} {mean, low, high}\r\n */\r\nexport function confidenceInterval (values) {\r\n  const n = values.length\r\n  const m = d3.mean(values)\r\n  const s = d3.deviation(values)\r\n  const z = 1.96 // 95% CI\r\n  // const z = 2.576; // 99% CI\r\n  const part = z * (s / Math.sqrt(n))\r\n  const low = m - part\r\n  const high = m + part\r\n  return { mean: m, low, high }\r\n}\r\n\r\n/**\r\n * Given an array of numbers, computes the proportions of a boxplot.\r\n *\r\n * @param {number[]} values values\r\n * @returns {object} { q1, q2, q3, r0, r1 }\r\n */\r\nexport function getBoxplotCharacteristics (values) {\r\n  values.sort((a, b) => a - b)\r\n  const minValue = values[0]\r\n  const maxValue = values[values.length - 1]\r\n  const q1 = d3.quantile(values, 0.25)\r\n  const q2 = d3.quantile(values, 0.5)\r\n  const q3 = d3.quantile(values, 0.75)\r\n  const iqr = q3 - q1\r\n  const r0 = Math.max(minValue, q1 - iqr * 1.5)\r\n  const r1 = Math.min(maxValue, q3 + iqr * 1.5)\r\n  return { q1, q2, q3, r0, r1 }\r\n}\r\n\r\n/**\r\n * Returns a kernel desity estimator function.\r\n *\r\n * @see https://www.d3-graph-gallery.com/graph/violin_basicDens.html\r\n * @example\r\n * // With x being a d3.scaleLinear() scale\r\n * const kde = kernelDensityEstimator(kernelEpanechnikov(0.2), x.ticks(50));\r\n * const estimate = kde(data);\r\n * @param {Function} kernel kernel function\r\n * @param {number[]} X domain\r\n * @returns {Function} kernel density estimator\r\n */\r\nexport function kernelDensityEstimator (kernel, X) {\r\n  /**\r\n       * Kernel desity estimator\r\n       * For each value of X it computes the estimated density of the data values\r\n       * in V. The result has the form [ [x1, est1], [x2, est2], ... ]\r\n       *\r\n       * @param {number[]} V values\r\n       * @returns {number[][]} estimates for points of X\r\n       */\r\n  const estimator = (V) => {\r\n    return X.map(x => [\r\n      x,\r\n      d3.mean(V, (v) => kernel(x - v))\r\n    ])\r\n  }\r\n  return estimator\r\n}\r\n\r\n/**\r\n * Epanechnikov kernel\r\n *\r\n * @param {number} k kernel size\r\n * @returns {Function} kernel function with curried k\r\n */\r\nexport function kernelEpanechnikov (k) {\r\n  /**\r\n       * Epanechnokov kernel function\r\n       *\r\n       * @param {number} v value\r\n       * @returns {number} result\r\n       */\r\n  const epKernel = (v) => Math.abs(v /= k) <= 1\r\n    ? 0.75 * (1 - v * v) / k\r\n    : 0\r\n  return epKernel\r\n}\r\n\r\n/**\r\n * Gauss kernel\r\n *\r\n * @param {number} k kernel size\r\n * @returns {Function} kernel function with curried k\r\n */\r\nexport function kernelGauss (k) {\r\n  /**\r\n       * Gaussian kernel function\r\n       *\r\n       * @param {number} v value\r\n       * @returns {number} result\r\n       */\r\n  const gaKernel = (v) => Math.abs(v / k) <= 1\r\n    ? ((1 / Math.sqrt(2 * Math.PI)) * Math.E ** ((-1 / 2) * v * v))\r\n    : 0\r\n  return gaKernel\r\n}\r\n", "import * as d3 from 'd3'\r\nimport Note from '../types/Note.js'\r\nimport { bpmToSecondsPerBeat } from './MusicUtils.js'\r\nimport { kernelDensityEstimator, kernelEpanechnikov } from './StatisticsUtils.js'\r\nimport { findLocalMaxima } from './MathUtils.js'\r\nimport Recording from '../types/Recording.js' /* eslint-disable-line no-unused-vars */\r\n\r\n/**\r\n * @module utils/RecordingsUtils\r\n */\r\n\r\n/**\r\n * Filters notes of a recording to remove noise from the MIDI device or pickup\r\n *\r\n * @todo detect gaps and fill them\r\n * @param {Recording} recording a recording\r\n * @param {number} velocityThreshold notes with velocity < velocityThreshold\r\n *      are removed\r\n * @param {number} durationThreshold notes with duration < velocityThreshold\r\n *      are removed (value in seconds)\r\n * @returns {Recording} clone of the recording with filtered notes\r\n */\r\nexport function filterRecordingNoise (recording, velocityThreshold = 0, durationThreshold = 0) {\r\n  const result = recording\r\n    .clone()\r\n    .filter(note => {\r\n      if (note.velocity < velocityThreshold) {\r\n        return false\r\n      }\r\n      if (note.getDuration() < durationThreshold) {\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n    // console.log(`Filtered recording, ${result.length()} of ${recording.length()} notes left`);\r\n  return result\r\n}\r\n\r\n/**\r\n * Removes notes from a recordings which are outside the range of the ground\r\n * truth and therefore likely noise.\r\n * Looks up the pitch range from the track of the GT that the recording was made\r\n * for.\r\n *\r\n * @param {Recording[]} recordings recordings\r\n * @param {Note[][]} groundTruth ground truth\r\n * @returns {Recording[]} filtered recordings\r\n */\r\nexport function clipRecordingsPitchesToGtRange (recordings, groundTruth) {\r\n  // Speed up by getting range only once for all tracks\r\n  const pitchRanges = new Map()\r\n  for (const [index, part] of groundTruth.entries()) {\r\n    const pitchExtent = d3.extent(part, d => d.pitch)\r\n    pitchRanges.set(index, pitchExtent)\r\n  }\r\n  return recordings.map(recording => {\r\n    const track = recording.selectedTrack\r\n    const [minPitch, maxPitch] = pitchRanges.get(track)\r\n    return recording.clone().filter(note => note.pitch >= minPitch && note.pitch <= maxPitch)\r\n  })\r\n}\r\n\r\n/**\r\n * Removes notes from a recordings which are outside the fretboard range of the\r\n * ground truth and therefore likely noise.\r\n * Looks up the fretboard position range from the track of the GT that the\r\n * recording was made for.\r\n *\r\n * @param {Recording[]} recordings recordings\r\n * @param {Note[][]} groundTruth ground truth\r\n * @param {'exact'|'area'} [mode=exact] mode for which fretboard positions to\r\n *      include: exact will only keep notes that have positions that occur in\r\n *      the GT, area will get a rectangular area of the fretboard that contains\r\n *      all GT positions and fill filter on that.\r\n * @returns {Recording[]} filtered recordings\r\n */\r\nexport function clipRecordingsPitchesToGtFretboardRange (recordings, groundTruth, mode = 'exact') {\r\n  if (mode === 'exact') {\r\n    // Speed up by getting range only once for all tracks\r\n    const occuringPositions = new Map()\r\n    for (const [index, part] of groundTruth.entries()) {\r\n      const positions = new Set(part.map(note => `${note.string} ${note.fret}`))\r\n      occuringPositions.set(index, positions)\r\n    }\r\n    return recordings.map(recording => {\r\n      const track = recording.selectedTrack\r\n      const validPositions = occuringPositions.get(track)\r\n      return recording.clone().filter(note => validPositions.has(`${note.string} ${note.fret}`))\r\n    })\r\n  } else {\r\n    // Speed up by getting range only once for all tracks\r\n    const positionRanges = new Map()\r\n    for (const [index, part] of groundTruth.entries()) {\r\n      const stringExtent = d3.extent(part, d => d.string)\r\n      const fretExtent = d3.extent(part, d => d.fret)\r\n      positionRanges.set(index, { stringExtent, fretExtent })\r\n    }\r\n    return recordings.map(recording => {\r\n      const track = recording.selectedTrack\r\n      const { stringExtent, fretExtent } = positionRanges.get(track)\r\n      const [minString, maxString] = stringExtent\r\n      const [minFret, maxFret] = fretExtent\r\n      return recording.clone().filter(note => {\r\n        return note.string >= minString && note.string <= maxString &&\r\n                    note.fret >= minFret && note.fret <= maxFret\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Aligns notes to a rhythmic pattern\r\n *\r\n * @todo not used\r\n * @param {Note[]} notes notes\r\n * @param {number} bpm e.g. 120 for tempo 120\r\n * @param {number} timeDivision e.g. 16 for 16th note steps\r\n * @returns {Note[]} aligned notes\r\n */\r\nexport function alignNotesToBpm (notes, bpm, timeDivision = 16) {\r\n  const secondsPerBeat = bpmToSecondsPerBeat(bpm)\r\n  const secondsPerDivision = secondsPerBeat / timeDivision\r\n  return notes.map(note => {\r\n    const n = note.clone()\r\n    n.start = Math.round(n.start / secondsPerDivision) * secondsPerDivision\r\n    n.end = Math.round(n.end / secondsPerDivision) * secondsPerDivision\r\n    return n\r\n  })\r\n}\r\n\r\n/**\r\n * Calculates a heatmap either pitch- or channel-wise.\r\n * Pitch-time heatmap:\r\n * Calculates a heatmap of multiple recordings, to see the note density in the\r\n * pitch-time-space.\r\n * Channel-time heatmap:\r\n * Calculates a heatmap of multiple recordings, to see the note density in the\r\n * channel-time-space. Channel could be a guitar string or left and right hand\r\n * for example.\r\n *\r\n * @param {Note[]} recNotes recordings\r\n * @param {number} nRecs number of recordings\r\n * @param {number} binSize time bin size in milliseconds\r\n * @param {string} attribute 'pitch' | 'channel'\r\n * @returns {Map} pitch->heatmap; heatmap is number[] for all time slices\r\n */\r\nexport function recordingsHeatmap (recNotes, nRecs, binSize = 10, attribute = 'pitch') {\r\n  let groupedByAttribute\r\n  if (attribute === 'pitch') {\r\n    groupedByAttribute = d3.group(recNotes, d => d.pitch)\r\n  } else if (attribute === 'channel') {\r\n    groupedByAttribute = d3.group(recNotes, d => d.channel)\r\n  } else {\r\n    console.warn(`Invalid attribute parameter '${attribute}'`)\r\n  }\r\n\r\n  const heatmapByAttribute = new Map()\r\n  for (const [attribute_, notes] of groupedByAttribute.entries()) {\r\n    // Calculate heatmap\r\n    const maxTime = d3.max(notes, d => d.end)\r\n    const nBins = Math.ceil((maxTime * 1000) / binSize) + 1\r\n    const heatmap = Array.from({ length: nBins }).fill(0)\r\n    for (const note of notes) {\r\n      const start = Math.round(note.start * 1000 / binSize)\r\n      const end = Math.round(note.end * 1000 / binSize)\r\n      for (let bin = start; bin <= end; bin++) {\r\n        heatmap[bin] += 1\r\n      }\r\n    }\r\n    // Normalize\r\n    for (let bin = 0; bin < heatmap.length; bin++) {\r\n      heatmap[bin] /= nRecs\r\n    }\r\n    heatmapByAttribute.set(attribute_, heatmap)\r\n  }\r\n  return heatmapByAttribute\r\n}\r\n\r\n/**\r\n * 'Averages' multiple recordings of the same piece to get an approximation of\r\n * the ground truth.\r\n *\r\n * @todo use velocity?\r\n * @param {Map} heatmapByPitch haetmap from recordingsHeatmap()\r\n * @param {number} binSize size of time bins in milliseconds\r\n * @param {number} threshold note is regarded as true when this ratio of\r\n *      recordings has a note there\r\n * @returns {Note[]} approximated ground truth notes\r\n */\r\nexport function averageRecordings (heatmapByPitch, binSize, threshold = 0.8) {\r\n  const newNotes = []\r\n  for (const [pitch, heatmap] of heatmapByPitch.entries()) {\r\n    // Threshold to get note timespans -> array with booleans (is note here?)\r\n    // TODO: use Canny Edge Detector? Fill Gaps?\r\n    for (let bin = 0; bin < heatmap.length; bin++) {\r\n      heatmap[bin] = heatmap[bin] > threshold\r\n    }\r\n    // Extract notes\r\n    let currentNote = null\r\n    for (let bin = 0; bin < heatmap.length; bin++) {\r\n      // Detect note start\r\n      if (!currentNote && heatmap[bin]) {\r\n        const time = bin * binSize / 1000\r\n        currentNote = new Note(pitch, time, 127, 0)\r\n      }\r\n      // Detect note end or end of array\r\n      if (currentNote && (!heatmap[bin] || bin === heatmap.length - 1)) {\r\n        const time = bin * binSize / 1000\r\n        currentNote.end = time\r\n        newNotes.push(currentNote)\r\n        currentNote = null\r\n      }\r\n    }\r\n  }\r\n  // Sort new notes\r\n  newNotes.sort((a, b) => a.start - b.start)\r\n  return newNotes\r\n}\r\n\r\n/**\r\n * Extracts a probable ground truth from multiple recordings. Uses one KDE for\r\n * each note starts and ends, detects maxima in the KDE and thresholds them.\r\n * Then uses alternating start end end candidates to create notes.\r\n *\r\n * @param {Note[]} recNotes recordings notes\r\n * @param {number} bandwidth kernel bandwidth\r\n * @param {number} ticksPerSecond number of ticks per second\r\n * @param {number} threshold threshold\r\n * @returns {Note[]} new notes\r\n */\r\nexport function averageRecordings2 (recNotes, bandwidth = 0.01, ticksPerSecond, threshold) {\r\n  const groupedByPitch = d3.group(recNotes, d => d.pitch)\r\n  const newNotes = []\r\n  for (const [pitch, notes] of groupedByPitch.entries()) {\r\n    const starts = notes.map(d => d.start)\r\n    const ends = notes.map(d => d.end)\r\n    // Create KDE\r\n    const duration = d3.max(ends)\r\n    const ticks = Math.ceil(ticksPerSecond * duration)\r\n    const x = d3.scaleLinear()\r\n      .domain([0, duration])\r\n      .range([0, duration])\r\n    const kde = kernelDensityEstimator(kernelEpanechnikov(bandwidth), x.ticks(ticks))\r\n    const estimateStarts = kde(starts)\r\n    const estimateEnds = kde(ends)\r\n    // Search for density maxima\r\n    const maximaStarts = findLocalMaxima(estimateStarts.map(d => d[1]))\r\n    const maximaEnds = findLocalMaxima(estimateEnds.map(d => d[1]))\r\n    // If density value > threshold, update note state\r\n    const chosenStarts = maximaStarts\r\n      .filter(d => estimateStarts[d][1] > threshold)\r\n      .map(d => estimateStarts[d][0])\r\n    const chosenEnds = maximaEnds\r\n      .filter(d => estimateEnds[d][1] > threshold)\r\n      .map(d => estimateEnds[d][0])\r\n    // Create notes\r\n    while (chosenStarts.length > 0) {\r\n      const nextStart = chosenStarts.shift()\r\n      // Remove ends before nextStart\r\n      while (chosenEnds.length > 0 && chosenEnds[0] < nextStart) {\r\n        chosenEnds.shift()\r\n      }\r\n      const nextEnd = chosenEnds.shift()\r\n      // Remove starts before nextEnd\r\n      while (chosenStarts.length > 0 && chosenStarts[0] < nextEnd) {\r\n        chosenStarts.shift()\r\n      }\r\n      newNotes.push(new Note(pitch, nextStart, 127, 0, nextEnd))\r\n    }\r\n  }\r\n  // Sort new notes\r\n  newNotes.sort((a, b) => a.start - b.start)\r\n  return newNotes\r\n}\r\n\r\n/**\r\n * Returns a Map: pitch->differenceMap, differenceMap is an Array with time bins\r\n * and each bin is either\r\n *      0 (none, neither GT nor rec have a note here)\r\n *      1 (missing, only GT has a note here)\r\n *      2 (additional, only rec has a note here)\r\n *      3 (both, both have a note here)\r\n *\r\n * @todo move to comparison\r\n * @param {Note[]} gtNotes ground truth notes\r\n * @param {Note[]} recNotes recrodings notes\r\n * @param {number} binSize size of a time bin in milliseconds\r\n * @returns {Map} pitch->differenceMap; differenceMap is number[] for all time slices\r\n * @example\r\n *      const diffMap = differenceMap(gtNotes, recNotes, 10);\r\n */\r\nexport function differenceMap (gtNotes, recNotes, binSize) {\r\n  const recHeatmap = recordingsHeatmap(recNotes, 1, binSize)\r\n  const gtHeatmap = recordingsHeatmap(gtNotes, 1, binSize)\r\n  const allPitches = [...new Set([\r\n    ...recHeatmap.keys(),\r\n    ...gtHeatmap.keys()\r\n  ])]\r\n  const resultMap = new Map()\r\n  for (const pitch of allPitches) {\r\n    let result\r\n    // Handle pitches that occur only in one of both\r\n    if (!recHeatmap.has(pitch)) {\r\n      // All notes are missing\r\n      result = gtHeatmap.get(pitch).map(d => d !== 0 ? 1 : 0)\r\n    } else if (!gtHeatmap.has(pitch)) {\r\n      // All notes are additional\r\n      result = recHeatmap.get(pitch).map(d => d !== 0 ? 2 : 0)\r\n    } else {\r\n      // Compare both bins for each time slice\r\n      const recH = recHeatmap.get(pitch)\r\n      const gtH = gtHeatmap.get(pitch)\r\n      const nBins = Math.max(recH.length, gtH.length)\r\n      result = Array.from({ length: nBins }).fill(0)\r\n      for (let index = 0; index < result.length; index++) {\r\n        const gtValue = gtH[index] || 0\r\n        const recValue = recH[index] || 0\r\n        if (gtValue === 0 && recValue === 0) {\r\n          // None\r\n          result[index] = 0\r\n        }\r\n        if (gtValue !== 0 && recValue === 0) {\r\n          // Missing\r\n          result[index] = 1\r\n        }\r\n        if (gtValue === 0 && recValue !== 0) {\r\n          // Additional\r\n          result[index] = 2\r\n        }\r\n        if (gtValue !== 0 && recValue !== 0) {\r\n          // Both\r\n          result[index] = 3\r\n        }\r\n      }\r\n    }\r\n    resultMap.set(pitch, result)\r\n  }\r\n  return resultMap\r\n}\r\n\r\n/**\r\n * Computes the 'area' of error from a differenceMap normalized by total area.\r\n * The area is simply the number of bins with each value, total area is max.\r\n * number of bins in all pitches * the number of pitches.\r\n *\r\n * @todo move to comparison\r\n * @todo not used or tested yet\r\n * @todo add threshold for small errors (i.e. ignore area left and right of notes' start and end (masking?)))\r\n * @param {Map} differenceMap differenceMap from differenceMap()\r\n * @returns {object} {missing, additional, correct} area ratios\r\n * @example\r\n *      const diffMap = differenceMap(gtNotes, recNotes, 10);\r\n *      const diffMapErrors = differenceMapErrorAreas(diffMap);\r\n *      const {missing, additional, correct} = diffMapErrors;\r\n */\r\nexport function differenceMapErrorAreas (differenceMap) {\r\n  // Count bins for each error type\r\n  let missingBins = 0\r\n  let additionalBins = 0\r\n  let correctBins = 0\r\n\r\n  for (const diffMap of differenceMap.values()) {\r\n    for (const bin of diffMap) {\r\n      if (bin === 1) { missingBins++ } else if (bin === 2) { additionalBins++ } else if (bin === 3) { correctBins++ }\r\n    }\r\n  }\r\n\r\n  // Normalize\r\n  const maxLength = d3.max([...differenceMap], d => d[1].length)\r\n  const totalArea = differenceMap.size * maxLength\r\n\r\n  return {\r\n    missing: missingBins / totalArea,\r\n    additional: additionalBins / totalArea,\r\n    correct: correctBins / totalArea\r\n  }\r\n}\r\n", "/**\n * @module utils/WebMidiUtils\n */\n\n/**\n * Allows to ping a MIDI device that loops back to measure latency.\n * The tool loopMIDI does exactly this:\n *\n * @see https://www.tobias-erichsen.de/software/loopmidi.html.\n * @example pingMidiDevice('loopMIDI Port', 10);\n * @param {string} deviceName name of the MIDI device\n * @param {number} howOften how many times to ping the device\n */\nexport function pingMidiDevice (deviceName, howOften = 1) {\n  if (!navigator.requestMIDIAccess) {\n    console.error('MIDI: WebMIDI is not supported in this browser.')\n  } else {\n    let sentCount = 0\n    let sentTime\n    let totalTime = 0\n    // Start listening for incoming data\n    const receiveFunction = () => {\n      const ping = Date.now() - sentTime\n      totalTime += ping\n      const avg = totalTime / sentCount\n      console.log(`Received MIDI from ${deviceName} after ${ping} ms (avg: ${avg})`)\n    }\n    navigator.requestMIDIAccess().then(midiAccess => {\n      for (const input of midiAccess.inputs.values()) {\n        if (deviceName === input.name) {\n          input.onmidimessage = receiveFunction\n        }\n      }\n      // Get output device\n      let outputDevice = null\n      for (const output of midiAccess.outputs.values()) {\n        if (deviceName === output.name) {\n          outputDevice = output\n        }\n      }\n      if (!outputDevice) {\n        console.error(`Cannot ping output device ${deviceName} because it is not there`)\n      }\n      // Send data once a second\n      const pingFunction = () => {\n        if (sentCount < howOften) {\n          sentCount++\n          console.log(`Ping ${sentCount}/${howOften} Sending MIDI ping to ${deviceName}`)\n          sentTime = new Date()\n          outputDevice.send([0x90, 0x45, 0x7F])\n          setTimeout(pingFunction, 1000)\n        }\n      }\n      setTimeout(pingFunction, 1000)\n    }, () => console.error('Cannot get MIDI access')\n    )\n  }\n}\n", "import NoteArray from '../types/NoteArray.js'\nimport Recording from '../types/Recording.js'\nimport { group, max } from 'd3'\n\n/**\n * @module DiffAlignment\n */\n\n/**\n * Aligns the recording to the best fitting position of the ground truth\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Recording} recording a Recording object\n * @param {number} binSize time bin size in milliseconds\n * @returns {Recording} aligned recording\n */\nexport function alignRecordingToBestFit (gtNotes, recording, binSize = 100) {\n  const recNotes = recording.getNotes()\n  const bestFit = alignGtAndRecToMinimizeDiffError(gtNotes, recNotes, binSize)[0]\n  const newRec = recording.clone().shiftToStartAt(bestFit.offsetMilliseconds / 1000)\n  return newRec\n}\n\n/**\n * Splits the recording at gaps > gapDuration and then aligns each section to\n * the best fitting position of the ground truth.\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Recording} recording a Recording object\n * @param {number} binSize time bin size in milliseconds\n * @param {number} gapDuration duration of seconds for a gap to be used as\n *      segmenting time\n * @param {'start-start'|'end-start'} gapMode gaps can either be considered as\n *      the maximum time between two note's starts or the end of the first\n *      and the start of the second note\n * @returns {Recording} aligned recording\n */\nexport function alignRecordingSectionsToBestFit (\n  gtNotes,\n  recording,\n  binSize,\n  gapDuration = 3,\n  gapMode = 'start-start'\n) {\n  // Cut into sections when there are gaps\n  const sections = Recording.segmentAtGaps(gapDuration, gapMode)\n\n  const alignedSections = sections.map(section => {\n    // TODO: avoid overlaps?\n    const bestFit = alignGtAndRecToMinimizeDiffError(gtNotes, section, binSize)[0]\n    return bestFit\n  })\n\n  const newRec = recording.clone()\n  newRec.setNotes(alignedSections.flat())\n  return newRec\n}\n\n/**\n * Global alignment.\n *\n * Returns an array with matches sorted by magnitude of agreement.\n * The offsetMilliseconds value describes at what time the first note of the\n * recording should start.\n *\n * Goal: Know which part of ground truth (GT) was played in recording (rec)\n * Assumptions:\n * - Rec has same tempo as GT\n * - Rec does not start before GT\n * - Rec does not repeat something that is not repeated in the GT\n * - Rec does not have gaps\n * Ideas:\n * - Brute-force\n * - Sliding window\n * - Using diff between time-pitch matrix of GT and rec\n * - Only compute agreement (correct diff part) for the current overlap\n * - For each time position save the agreement magnitude\n * - Optionally: repeat around local maxima with finer binSize\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Note[]} recNotes recorded notes\n * @param {number} binSize time bin size in milliseconds\n * @returns {object[]} best offsets with agreements\n */\nexport function alignGtAndRecToMinimizeDiffError (gtNotes, recNotes, binSize) {\n  gtNotes = new NoteArray(gtNotes)\n  recNotes = new NoteArray(recNotes).shiftToStartAt(0)\n  const gtDuration = gtNotes.getDuration()\n  const recDuration = recNotes.getDuration()\n  const nBins = Math.ceil((gtDuration * 1000) / binSize) + 1\n  const nRecBins = Math.ceil((recDuration * 1000) / binSize) + 1\n  // TODO: just switch them around?\n  if (nRecBins > nBins) {\n    console.warn('Cannot compare GT and rec if rec is longer')\n  }\n  // Get activation maps\n  const gtActivation = activationMap(gtNotes.getNotes(), binSize)\n  const recActivation = activationMap(recNotes.getNotes(), binSize)\n  // Compare with sliding window\n  const agreementsPerOffset = []\n  for (let offset = 0; offset < nBins - nRecBins + 1; offset++) {\n    const currentAgreement = agreement(gtActivation, recActivation, offset)\n    // console.log(`Comparing gt bins ${offset}...${offset + nRecBins} to rec\\nGot agreement ${currentAgreement}`);\n    agreementsPerOffset.push({\n      offsetBins: offset,\n      offsetMilliseconds: offset * binSize,\n      agreement: currentAgreement\n    })\n  }\n  // Sort by best match\n  const sorted = agreementsPerOffset.sort((a, b) => b.agreement - a.agreement)\n  return sorted\n}\n\n/**\n * Returns an activation map, that maps pitch to an array of time bins.\n * Each bin contains a 0 when there is no note or a 1 when there is one.\n *\n * @param {Note[]} allNotes notes\n * @param {number} binSize time bin size in milliseconds\n * @returns {Map} activation map\n */\nexport function activationMap (allNotes, binSize = 100) {\n  const activationMap = new Map()\n  for (const [pitch, notes] of group(allNotes, d => d.pitch).entries()) {\n    const maxTime = max(notes, d => d.end)\n    const nBins = Math.ceil((maxTime * 1000) / binSize) + 1\n    const pitchActivationMap = Array.from({ length: nBins }).fill(0)\n    // Calculate heatmap by writing 1 where a note is active\n    for (const note of notes) {\n      const start = Math.round(note.start * 1000 / binSize)\n      const end = Math.round(note.end * 1000 / binSize)\n      for (let bin = start; bin <= end; bin++) {\n        pitchActivationMap[bin] = 1\n      }\n    }\n    activationMap.set(pitch, pitchActivationMap)\n  }\n  return activationMap\n}\n\n/**\n * Given two activation maps, simply counts the number of bins [pitch, time]\n * where both have a 1, so an acitve note\n * GT must be longer than rec\n *\n * @todo also count common 0s?\n * @param {Map} gtActivations see activationMap()\n * @param {Map} recActivations see activationMap()\n * @param {number} offset offset for activation2 when comparing\n * @returns {number} agreement\n */\nexport function agreement (gtActivations, recActivations, offset) {\n  const allPitches = [...new Set([\n    ...gtActivations.keys(),\n    ...recActivations.keys()\n  ])]\n  let agreement = 0\n  for (const pitch of allPitches) {\n    // Handle pitches that occur only in one of both\n    if (!gtActivations.has(pitch)) {\n      // All notes are missing\n    } else if (!recActivations.has(pitch)) {\n      // All notes are additional\n    } else {\n      // Compare both bins for each time slice\n      const gtA = gtActivations.get(pitch)\n      const recA = recActivations.get(pitch)\n      // Go through full rec, and compare to current section of GT\n      for (let index = 0; index < recA.length; index++) {\n        const gtValue = gtA[index + offset] || 0\n        const recValue = recA[index] || 0\n        if (gtValue === 1 && recValue === 1) {\n          agreement++\n        }\n      }\n    }\n  }\n  return agreement\n}\n", "import { minIndex } from 'd3'\n\n/**\n * Idea: Like in hierarchical clustering, take the most similar pair out of the\n * set of all possible pairs repeatedly, until one array of items is empty.\n *\n * @template T1\n * @template T2\n * @param {T1[]} itemsA an array with items\n * @param {T2[]} itemsB an array with items\n * @param {function(T1, T2): number} distanceFunction distance function for two\n *      items, must be 0 for equal items and symmetric\n * @returns {Map<number,number>} with the indices of the matched items\n */\nexport function priorityMatching (itemsA, itemsB, distanceFunction) {\n  // Build distance matrix\n  const matrix = Array.from({ length: itemsA.length }).map(\n    () => Array.from({ length: itemsB.length })\n  )\n  for (const [indexA, gtNote] of itemsA.entries()) {\n    for (let indexB = indexA; indexB < itemsB.length; indexB++) {\n      const dist = distanceFunction(gtNote, itemsB[indexB])\n      matrix[indexA][indexB] = dist\n      if (matrix[indexB] !== undefined) {\n        matrix[indexB][indexA] = dist\n      }\n    }\n  }\n  // Compute matching pair by pair\n  const matching = new Map()\n  const numberOfMatches = Math.min(itemsA.length, itemsB.length)\n  for (let match = 0; match < numberOfMatches; match++) {\n    // Find most similar pair, i.e. matrix entry with smallest value\n    const [a, b] = getMatrixMinPosition(matrix)\n    matching.set(a, b)\n    // Remove from matrix (just set to null)\n    if (match >= numberOfMatches - 1) {\n      break\n    }\n    for (let index = 0; index < itemsA.length; index++) {\n      matrix[index][b] = null\n    }\n    for (let index = 0; index < itemsB.length; index++) {\n      matrix[a][index] = null\n    }\n  }\n  return matching\n}\n\n/**\n * First matches GT to rec notes via priorityMatching, then computes the error\n * for each GT note that has been matched using the same distance function.\n * The Map will be undefined for GT notes that have not been matched, they can\n * be considered missing in the recording.\n *\n * @param {Note[]} gtNotes ground truth notes\n * @param {Note[]} recNotes recorded notes\n * @param {function(Note,Note): number} distanceFunction distance function,\n *      taking two notes and returning the 'distance', i.e. how different they\n *      are. See balancedNoteDistance as example.\n * @returns {Map<Note,number>} a Map from GT note to its error\n */\nexport function errorFromPriorityMatching (gtNotes, recNotes, distanceFunction) {\n  const matching = priorityMatching(gtNotes, recNotes, distanceFunction)\n  // Map GT notes to errors\n  const errors = new Map()\n  for (const [gt, rec] of matching.entries()) {\n    const gtNote = gtNotes[gt]\n    const recNote = recNotes[rec]\n    const error = distanceFunction(gtNote, recNote)\n    errors.set(gtNote, error)\n  }\n  return errors\n}\n\n/**\n * Computes a distance (inverse similarity) of two notes, considering pitch,\n * chroma, start, duration, and channel.\n *\n * @param {Note} a a Note\n * @param {Note} b a Note\n * @returns {number} distance\n */\nexport function balancedNoteDistance (a, b) {\n  let dist = 0\n  // Pitch\n  dist += Math.abs(a.pitch - b.pitch)\n  // Chroma\n  dist += Math.abs(a.pitch % 12 - b.pitch % 12)\n  // Start time\n  dist += Math.abs(a.start - b.start)\n  // Duration\n  dist += 0.5 * Math.abs(a.getDuration() - b.getDuration())\n  // Channel\n  dist += Math.abs(a.channel - b.channel)\n  return dist\n}\n\n/**\n * Returns the row and colum indices of the minimum value of the given matrix\n *\n * @param {number[][]} matrix matrix\n * @returns {number[]} [rowIndex, columIndex] of the minimum value\n */\nexport function getMatrixMinPosition (matrix) {\n  // Find most similar pair, i.e. matrix entry with smallest value\n  const minPerRow = matrix.map(row => {\n    const minInd = minIndex(row)\n    return [\n      minInd,\n      row[minInd]\n    ]\n  })\n  const minRowIndex = minIndex(minPerRow, d => d[1])\n  const minColIndex = minPerRow[minRowIndex][0]\n  return [minRowIndex, minColIndex]\n}\n", "import { max, min } from 'd3'\r\n// import DynamicTimeWarping from 'dynamic-time-warping-2';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Note from '../types/Note.js'\r\n\r\n/**\r\n * @module comparison/Similarity\r\n */\r\n\r\n/**\r\n * Given a track, a selected time interval and a threshold,\r\n * this function searches for parts in the track that are\r\n * similar to the selection.\r\n * It uses a sliding window with the size of the selection\r\n * and a stride given as argument.\r\n *\r\n * @param {Note[]} track array of Note objects\r\n * @param {number[]} selectedInterval [startTime, endTime] in seconds\r\n * @param {number} stride stride for the sliding window in number of bins\r\n * @param {number} threshold distance threshold below which parts are considered similar\r\n * @param {number} secondsPerBin time bin size in seconds\r\n * @param {string} distance one of: 'dtw', 'euclidean', 'nearest'\r\n * @returns {object} similar parts\r\n */\r\nexport function getSimilarParts (track, selectedInterval, stride, threshold, secondsPerBin = 1 / 16, distance = 'euclidean') {\r\n  console.log(`Searching for similar parts based on selection, using ${distance}`)\r\n  if (track === undefined || track.length === 0) {\r\n    console.warn('No or empty track given')\r\n    return\r\n  }\r\n  // Discretize track (instead of doing this for every part)\r\n  const minTime = min(track, d => d.start)\r\n  const maxTime = max(track, d => d.end)\r\n  const binCount = Math.ceil((maxTime - minTime) / secondsPerBin)\r\n  const discrTrack = discretizeTime(track, secondsPerBin)\r\n  // Selection\r\n  const startBin = Math.floor((selectedInterval[0] - minTime) / secondsPerBin)\r\n  const endBin = Math.ceil((selectedInterval[1] - minTime) / secondsPerBin)\r\n  const selection = sliceDiscretizedTrack(discrTrack, startBin, endBin)\r\n  const selectionSize = endBin - startBin\r\n  // Sliding window through the track\r\n  const similarParts = []\r\n  for (let pos = 0; pos < binCount - selectionSize; pos += stride) {\r\n    const pos2 = pos + selectionSize\r\n    // Ignore intersections with selection\r\n    if (!(pos >= startBin && pos <= endBin) && !(pos2 >= startBin && pos2 <= endBin)) {\r\n      const part = sliceDiscretizedTrack(discrTrack, pos, pos2)\r\n      const dist = getTrackSimilarity(selection, part, distance)\r\n      if (dist <= threshold) {\r\n        similarParts.push({\r\n          startBin: pos,\r\n          endBin: pos2,\r\n          startTime: minTime + pos * secondsPerBin,\r\n          endTime: minTime + pos2 * secondsPerBin,\r\n          dist\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    selection: {\r\n      startBin,\r\n      endBin,\r\n      startTime: minTime + startBin * secondsPerBin,\r\n      endTime: minTime + endBin * secondsPerBin\r\n    },\r\n    similarParts\r\n  }\r\n}\r\n\r\n/**\r\n * Uses calculates the distance between\r\n * two discretized tracks, for each pitch separately.\r\n * Pitch-wise distances are averaged and a penalty is added to the distance\r\n * for pitches that are not occuring in both tracks\r\n *\r\n * @see https://github.com/GordonLesti/dynamic-time-warping\r\n * @param {Map} discrA discretized track\r\n * @param {Map} discrB discretized track\r\n * @param {string} distance one of: 'euclidean', 'nearest'\r\n * @returns {number} distance\r\n */\r\nexport function getTrackSimilarity (discrA, discrB, distance) {\r\n  // Get common pitches\r\n  const common = []\r\n  for (const key of discrA.keys()) {\r\n    if (discrB.has(key)) {\r\n      common.push(key)\r\n    }\r\n  }\r\n  // Get distance for each pitch and add to weighted average\r\n  let totalDist = 0\r\n  // Get DTW distance for each common pitch\r\n  for (const pitch of common) {\r\n    const binsA = discrA.get(pitch)\r\n    const binsB = discrB.get(pitch)\r\n    let dist\r\n    if (distance === 'dtw') {\r\n      // const dtw = new DynamicTimeWarping(binsA, binsB, (a, b) => Math.abs(a - b));\r\n      // dist = dtw.getDistance();\r\n    } else if (distance === 'euclidean') {\r\n      dist = euclideanDistanceSquared(binsA, binsB)\r\n    } else if (distance === 'nearest') {\r\n      dist = neirestNeighborDistance(binsA, binsB)\r\n    }\r\n    // Get weighted average\r\n    // TODO: How to weight the average?\r\n    const weight = 1\r\n    // const weight = countActiveNoteBins(binsA) + countActiveNoteBins(binsB);\r\n    // const weight = 1 / (countActiveNoteBins(binsA) + countActiveNoteBins(binsB));\r\n    totalDist += weight * dist\r\n  }\r\n  // TODO: add penalty for uncommon pitches\r\n  // Depending on number of 1s?\r\n  let penaltyWeight = 0\r\n  for (const discr of [discrA, discrB]) {\r\n    for (const key of discr.keys()) {\r\n      if (!common.includes(key)) {\r\n        penaltyWeight += countActiveNoteBins(discr.get(key))\r\n      }\r\n    }\r\n  }\r\n  return totalDist + penaltyWeight\r\n}\r\n\r\n/**\r\n * - Normalizes Note times to be between 0 and (maxTime - minTime),\r\n * - discretizes the start and end time by using Math.round to get\r\n * the closest time bin (beat) and\r\n * - Creates one array for each pitch, where each entry contains\r\n * either a 0 (no note at that time bin) or a 1 (note at that time bin)\r\n *\r\n * @param {Note[]} track an array of Note objects\r\n * @param {number} secondsPerBin time bin size in seconds\r\n * @returns {Map} pitch to binArray\r\n */\r\nexport function discretizeTime (track, secondsPerBin) {\r\n  const minTime = min(track, d => d.start)\r\n  const maxTime = max(track, d => d.end)\r\n  const binCount = Math.ceil((maxTime - minTime) / secondsPerBin)\r\n  // Map pitch->timeBinArray\r\n  const result = new Map()\r\n  for (const note of track) {\r\n    const startBin = Math.round((note.start - minTime) / secondsPerBin)\r\n    const endBin = Math.round((note.end - minTime) / secondsPerBin)\r\n    const pitch = note.pitch\r\n    const binArray = result.has(pitch) ? result.get(pitch) : Array.from({ length: binCount }).fill(0)\r\n    for (let bin = startBin; bin <= endBin; bin++) {\r\n      binArray[bin] = 1\r\n    }\r\n    result.set(pitch, binArray)\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Counts the occurence of 1 in an array\r\n *\r\n * @param {number[]} binArray array\r\n * @returns {number} occurence of 1\r\n */\r\nfunction countActiveNoteBins (binArray) {\r\n  let count = 0\r\n  for (const bin of binArray) {\r\n    if (bin === 1) {\r\n      count++\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n/**\r\n * Slices bins out of a discretices track.\r\n * This is done for each pitch separately\r\n *\r\n * @param {Map} trackMap Map pitch->binArray\r\n * @param {number} startBin index of first bin\r\n * @param {number} endBin index of last bin\r\n * @returns {Map} map with sliced arrays\r\n */\r\nfunction sliceDiscretizedTrack (trackMap, startBin, endBin) {\r\n  const slice = new Map()\r\n  for (const [key, value] of trackMap.entries()) {\r\n    slice.set(key, value.slice(startBin, endBin))\r\n  }\r\n  return slice\r\n}\r\n\r\n/**\r\n * Returns sum_{i=0}^{N-1}{(a_i-b_i)^2},\r\n * i.e. Euclidean distance but without square root\r\n *\r\n * @param {number[]} A an array\r\n * @param {number[]} B  another array\r\n * @returns {number} Euclidean distance\r\n */\r\nfunction euclideanDistanceSquared (A, B) {\r\n  const maxBins = Math.max(A.length, B.length)\r\n  let sum = 0\r\n  for (let index = 0; index < maxBins; index++) {\r\n    // If undefined (because one array is shorter)\r\n    // use 0 as padding value\r\n    const a = A[index] || 0\r\n    const b = B[index] || 0\r\n    const diff = a - b\r\n    sum += diff * diff\r\n  }\r\n  return sum\r\n}\r\n\r\n/**\r\n * Given two arrays containing 1s and 0s, this algorithm\r\n * goes through all bins and for each bin where one array\r\n * has a 1 and the other a 0, it searches for the closest 1\r\n * next to the 0.\r\n * The distance is then added to the global distance.\r\n *\r\n * @param {number[]} A an array\r\n * @param {number[]} B  another array\r\n * @returns {number} nearest neighbor distance\r\n */\r\nfunction neirestNeighborDistance (A, B) {\r\n  const maxBins = Math.max(A.length, B.length)\r\n  const maxOffset = Math.round(maxBins / 4)\r\n  let sum = 0\r\n  for (let index = 0; index < maxBins; index++) {\r\n    let offset = 0\r\n    // If undefined (because one array is shorter)\r\n    // use 0 as padding value\r\n    const a = A[index] || 0\r\n    const b = B[index] || 0\r\n    if (a === b) {\r\n      // 0 cost\r\n    } else if (a === 0 && b === 1) {\r\n      // If b == 1, look for the nearest 1 in a\r\n      // Out of bounds does not matter since undefined !== 1\r\n      // while (i - offset > 0 && i + offset < (maxBins-1) && offset <= maxOffset) {\r\n      while (offset <= maxOffset) {\r\n        offset++\r\n        if (a[index - offset] === 1 || a[index + offset === 1]) {\r\n          break\r\n        }\r\n      }\r\n    } else if (a === 1 && b === 0) {\r\n      // If a == 1, look for the nearest 1 in b\r\n      while (offset <= maxOffset) {\r\n        offset++\r\n        if (b[index - offset] === 1 || b[index + offset === 1]) {\r\n          break\r\n        }\r\n      }\r\n    }\r\n    sum += offset\r\n  }\r\n  return sum\r\n}\r\n", "import { levenshtein } from '../stringBased/Levenshtein.js'\nimport PitchSequence from '../types/PitchSequence.js'\n\n/**\n * @module comparison/SimilarSections\n */\n\n/**\n * Turns an array of notes into a string to perform pattern matching search for similar\n * patterns.\n *\n * @param {Note[]} notes notes, must be sorted by Note.start\n * @param {number} startTime start time of the section to search\n * @param {number} endTime end time for the section to search\n * @param {number} threshold threshold for normalized Levenshtein distance in [0, 1]\n * @returns {object[]} {index, distance, startTime, endTime}\n */\nexport function findSimilarNoteSections (notes, startTime, endTime, threshold = 0.5) {\n  const selectedNotes = notes.filter(d => d.start >= startTime && d.end <= endTime)\n  // Convert to string\n  const dataString = PitchSequence.fromNotes(notes).getPitches()\n  const searchString = PitchSequence.fromNotes(selectedNotes).getPitches()\n  const length = searchString.length\n  if (length < 3) {\n    return []\n  }\n  // Find matches\n  const matches = findSimilarStringSections(dataString, searchString, threshold)\n  // Get time spans\n  return matches.map(m => {\n    const { index } = m\n    const note1 = notes[index]\n    const note2 = notes[index + length]\n    return {\n      ...m,\n      startTime: note1.start,\n      endTime: note2.end\n    }\n  })\n}\n\n/**\n * Finds similar sections in a string via Levenshtein distance\n *\n * @param {stringArray} dataString they string to search in\n * @param {stringArray} searchString the string to search for\n * @param {number} threshold threshold for normalized Levenshtein distance in [0, 1]\n * @returns {object[]} {index, distance}\n */\nexport function findSimilarStringSections (dataString, searchString, threshold = 0.5) {\n  const length = searchString.length\n  const matches = []\n  for (let index = 0; index < dataString.length - length; index++) {\n    const slice = dataString.slice(index, index + length)\n    const distance = levenshtein(searchString, slice) / length\n    if (distance < threshold) {\n      matches.push({ index, distance })\n    }\n  }\n  // Filter overlapping matches by removing the ones with larger distances\n  const filtered = []\n  // Therefore, sort by distance ascending and add them one by one\n  matches.sort((a, b) => a.distance - b.distance)\n  // Speed up hit detection by keeping track of indices that are already occupied\n  const occupied = Array.from({ length: dataString.length }).fill(false)\n  for (const m of matches) {\n    const { index } = m\n    // Check if occupied\n    let occ = false\n    for (let i = index; i < index + length; i++) {\n      if (occupied[i]) {\n        occ = true\n        break\n      }\n    }\n    // If not occupied, add and occupy\n    if (!occ) {\n      filtered.push(m)\n      for (let i = index; i < index + length; i++) {\n        occupied[i] = true\n      }\n    }\n  }\n  return filtered\n}\n", "/**\n * @module stringBased/Levenshtein\n */\n\n/**\n * Computes the Levenshtein distance of two strings or arrays.\n *\n * @see https://gist.github.com/andrei-m/982927#gistcomment-1931258\n * @author https://github.com/kigiri, license: MIT\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @param {boolean} normalize when set to true, the distance will be normalized\n *      to [0, 1], by dividing by the longer string's length\n * @returns {number} Levenshtein distance\n */\nexport function levenshtein (a, b, normalize = false) {\n  if (a.length === 0 && b.length === 0) { return 0 }\n  if (a.length === 0) { return normalize ? 1 : b.length }\n  if (b.length === 0) { return normalize ? 1 : a.length }\n  let i, j, previous, value\n  // swap to save some memory O(min(a,b)) instead of O(a)\n  if (a.length > b.length) {\n    const temporary = a\n    a = b\n    b = temporary\n  }\n  // init the row\n  const row = Array.from({ length: a.length + 1 })\n  for (i = 0; i <= a.length; i++) {\n    row[i] = i\n  }\n  // fill in the rest\n  for (i = 1; i <= b.length; i++) {\n    previous = i\n    for (j = 1; j <= a.length; j++) {\n      value = b[i - 1] === a[j - 1]\n        ? row[j - 1]\n        : Math.min(\n          row[j - 1] + 1, // substitution\n          Math.min(\n            previous + 1, // insertion\n            row[j] + 1 // deletion\n          )\n        )\n      row[j - 1] = previous\n      previous = value\n    }\n    row[a.length] = previous\n  }\n  const result = row[a.length]\n  // Normalize?\n  return normalize ? result / Math.max(a.length, b.length) : result\n}\n\n/**\n * Computes the Damerau-Levenshtein distance of two strings or arrays.\n *\n * @see https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @param {boolean} normalize when set to true, the distance will be normalized\n *      to [0, 1], by dividing by the longer string's length\n * @returns {number} Levenshtein distance\n */\nexport function damerauLevenshtein (a, b, normalize = false) {\n  if (a.length === 0 && b.length === 0) { return 0 }\n  if (a.length === 0) { return normalize ? 1 : b.length }\n  if (b.length === 0) { return normalize ? 1 : a.length }\n  const d = Array.from({ length: a.length + 1 })\n    .map(() => Array.from({ length: b.length }))\n  for (let i = 0; i <= a.length; i++) {\n    d[i][0] = i\n  }\n  for (let i = 0; i <= b.length; i++) {\n    d[0][i] = i\n  }\n  let cost\n  for (let i = 1; i <= a.length; i++) {\n    for (let j = 1; j <= b.length; j++) {\n      cost = a[i - 1] === b[j - 1] ? 0 : 1\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      )\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        // transposition\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1)\n      }\n    }\n  }\n  const result = d[a.length][b.length]\n  // Normalize?\n  return normalize ? result / Math.max(a.length, b.length) : result\n}\n", "export * as Levenshtein from './Levenshtein.js'\r\nexport * as LongestCommonSubsequence from './LongestCommonSubsequence.js'\r\nexport * as Gotoh from './Gotoh.js'\r\nexport * as SuffixTree from './SuffixTree.js'\r\nexport * as NGrams from './NGrams.js'\r\nexport * as ImmediateRepetitionCompression from './ImmediateRepetitionCompression.js'\r\nexport { default as NeedlemanWunsch } from './NeedlemanWunsch.js'\r\n\r\n/**\r\n * @module stringBased\r\n * @todo rename to Sequences\r\n */\r\n", "/**\n * @module stringBased/LongestCommonSubsequence\n */\n\n/**\n * Calculates the longest common subsequence.\n *\n * @see https://rosettacode.org/wiki/Longest_common_subsequence#JavaScript\n * @example\n * const lcs = StringBased.LongestCommonSubsequence.lcs('hello world!', 'world');\n * // world\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @returns {string|Array} the longest common subsequence\n */\nexport function lcs (a, b) {\n  // Make sure shorter string is the column string\n  const m = a.length\n  const n = b.length\n  // Return now if one (or both) empty\n  if (a.length === 0) { return a }\n  if (b.length === 0) { return b }\n  let i; let j; let row = []; let left; let diagonal; let latch\n  const lcs = []\n  const c = []\n  // Build the c-table\n  for (j = 0; j < n; row[j++] = 0);\n  for (i = 0; i < m; i++) {\n    c[i] = row = [...row]\n    for (diagonal = 0, j = 0; j < n; j++, diagonal = latch) {\n      latch = row[j]\n      if (a[i] === b[j]) {\n        row[j] = diagonal + 1\n      } else {\n        left = row[j - 1] || 0\n        if (left > row[j]) {\n          row[j] = left\n        }\n      }\n    }\n  }\n  i--\n  j--\n  // row[j] now contains the length of the lcs\n  // Recover the lcs from the table\n  while (i > -1 && j > -1) {\n    switch (c[i][j]) {\n      // eslint-disable-next-line\n      default:\n        j--\n        lcs.unshift(a[i])\n      case (i && c[i - 1][j]): // eslint-disable-line no-fallthrough\n        i--\n        continue\n      case (j && c[i][j - 1]):\n        j--\n    }\n  }\n  // Only join when x and y are strings\n  return (Array.isArray(a)) || (Array.isArray(b)) ? lcs : lcs.join('')\n}\n\n/**\n * Calculates the *length* of the longest common subsequence.\n * Also works with arrays.\n *\n * @see https://rosettacode.org/wiki/Longest_common_subsequence#JavaScript\n * @example\n * const lcsLength = StringBased.LongestCommonSubsequence.lcs('hello world!', 'world');\n * // 5\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @returns {number} the length of longest common subsequence\n */\nexport function lcsLength (a, b) {\n  // Make sure shorter string is the column string\n  const m = a.length\n  const n = b.length\n  // Return now if one (or both) empty\n  if (a.length === 0) { return 0 }\n  if (b.length === 0) { return 0 }\n  let i; let j; let row = []; let left; let diagonal; let latch\n  const c = []\n  // Build the c-table\n  for (j = 0; j < n; row[j++] = 0);\n  for (i = 0; i < m; i++) {\n    c[i] = row = [...row]\n    for (diagonal = 0, j = 0; j < n; j++, diagonal = latch) {\n      latch = row[j]\n      if (a[i] === b[j]) {\n        row[j] = diagonal + 1\n      } else {\n        left = row[j - 1] || 0\n        if (left > row[j]) {\n          row[j] = left\n        }\n      }\n    }\n  }\n  i--\n  j--\n  // row[j] now contains the length of the lcs\n  return row[j]\n}\n\n/**\n * Normalizes the result of lcsLength() by dividing by the longer string's\n * length.\n *\n * @param {string|Array} a a string\n * @param {string|Array} b another string\n * @returns {number} normalized length of longest common subsequence\n */\nexport function normalizedLcsLength (a, b) {\n  const longerLength = Math.max(a.length, b.length)\n  if (longerLength === 0) {\n    return 0\n  }\n  return lcsLength(a, b) / longerLength\n}\n", "/**\n * @module stringBased/Gotoh\n */\n\n/**\n * Calculates the SIMILARITY for two strings or arrays.\n * Similar to NeedlemanWunsch but O(n^2) instead of O(n^3)\n * IMPORTANT: This metric is not symmetric!\n *\n * @todo normalize to [0, 1], but how?\n * @todo somehow the the matched sequences and gaps...\n * @see https://de.wikipedia.org/wiki/Gotoh-Algorithmus\n * @param {string|Array} seqA a sequence\n * @param {string|Array} seqB a sequence\n * @param {Function} similarityFunction a function that takes two elements and\n *      returns their similarity score (higher => more similar)\n *      (a:any, b:any):number\n * @param {number} gapPenaltyStart cost for starting a new gap (negative)\n * @param {number} gapPenaltyExtend cost for continuing a gap (negative)\n * @returns {number} similarity score\n */\nexport function gotoh (\n  seqA,\n  seqB,\n  similarityFunction = matchMissmatchSimilarity,\n  gapPenaltyStart = -1,\n  gapPenaltyExtend = -0.1\n) {\n  // check if strings are empty\n  if (seqA.length === 0 && seqB.length === 0) { return 0 }\n  // gap penalty function\n  const gap = (index) => gapPenaltyStart + (index - 1) * gapPenaltyExtend\n  const lengthA = seqA.length\n  const lengthB = seqB.length\n  // initialize matrices\n  const a = Array.from({ length: lengthA + 1 }).map(() => Array.from({ length: lengthB + 1 }))\n  const b = Array.from({ length: lengthA + 1 }).map(() => Array.from({ length: lengthB + 1 }))\n  const c = Array.from({ length: lengthA + 1 }).map(() => Array.from({ length: lengthB + 1 }))\n  a[0][0] = 0\n  b[0][0] = 0\n  c[0][0] = 0\n  for (let i = 1; i <= lengthA; i++) {\n    a[i][0] = c[i][0] = Number.NEGATIVE_INFINITY\n    b[i][0] = gap(i)\n  }\n  for (let i = 1; i <= lengthB; i++) {\n    a[0][i] = b[0][i] = Number.NEGATIVE_INFINITY\n    c[0][i] = gap(i)\n  }\n  // compute matrices\n  for (let i = 1; i <= lengthA; i++) {\n    for (let j = 1; j <= lengthB; j++) {\n      const sim = similarityFunction(seqA[i - 1], seqB[j - 1])\n      a[i][j] = Math.max(\n        a[i - 1][j - 1],\n        b[i - 1][j - 1],\n        c[i - 1][j - 1]) + sim\n      b[i][j] = Math.max(\n        a[i - 1][j] + gapPenaltyStart,\n        b[i - 1][j] + gapPenaltyExtend,\n        c[i - 1][j] + gapPenaltyStart)\n      c[i][j] = Math.max(\n        a[i][j - 1] + gapPenaltyStart,\n        b[i][j - 1] + gapPenaltyStart,\n        c[i][j - 1] + gapPenaltyExtend)\n    }\n  }\n  return Math.max(\n    a[lengthA][lengthB],\n    b[lengthA][lengthB],\n    c[lengthA][lengthB]\n  )\n}\n\n/**\n * Idea: what would the max. similarity value be? the string with itself!\n * So just compare the longer string to itself and use that similarity to\n * normalize\n *\n * @todo does this work with negative costs and/or results?\n * @todo can this be optimized since only the similarityFunction is needed?\n * @todo only compute 'a' matrix for maxSimilarity\n * @param {string|Array} seqA a sequence\n * @param {string|Array} seqB a sequence\n * @param {Function} similarityFunction a function that takes two elements and\n *      returns their similarity score (higher => more similar)\n *      (a:any, b:any):number\n * @param {number} gapPenaltyStart cost for starting a new gap (negative)\n * @param {number} gapPenaltyExtend cost for continuing a gap (negative)\n * @returns {number} normalized similarity score\n */\nexport function normalizedGotoh (\n  seqA,\n  seqB,\n  similarityFunction = matchMissmatchSimilarity,\n  gapPenaltyStart = -1,\n  gapPenaltyExtend = -0.1\n) {\n  const similarity = gotoh(seqA, seqB, similarityFunction, gapPenaltyStart, gapPenaltyExtend)\n  const longer = seqA.length >= seqB.length ? seqA : seqB\n  const maxSimilarity = gotoh(longer, longer, similarityFunction, gapPenaltyStart, gapPenaltyExtend)\n  if (maxSimilarity === 0) {\n    // TODO: can this happen? what would be reasonable here?\n    return similarity\n  }\n  return similarity / maxSimilarity\n}\n\n/**\n * Cost function that simply checks whether two values are equal or not with ===\n *\n * @param {any} a some value\n * @param {any} b some value\n * @returns {number} 1 if equal, -1 otherwise\n */\nexport function matchMissmatchSimilarity (a, b) {\n  return a === b ? 1 : -1\n}\n\n/**\n * Cost function that takes the negative absolute value of the value's\n * difference, assuming that close values are more similar\n *\n * @param {number} a some value\n * @param {number} b some value\n * @returns {number} -Math.abs(a - b)\n */\nexport function differenceSimilarity (a, b) {\n  return -Math.abs(a - b)\n}\n", "import { arrayShallowEquals } from '../utils/ArrayUtils.js'\n\n/**\n * @module stringBased/SuffixTree\n */\n\n/**\n * Suffix tree, a tree that shows which subsequences are repeated\n *\n * @see https://github.com/eikes/suffixtree/blob/master/js/suffixtree.js\n */\nclass SuffixTree {\n  /**\n     * SuffixTree for strings or Arrays\n     *\n     * @param {string|Array} array string or Array to process\n     */\n  constructor (array) {\n    // Split string to array\n    if (typeof array === 'string') {\n      array = array.split('')\n    }\n    this.node = new TreeNode()\n    if (array && array.length > 0) {\n      for (let index = 0; index < array.length; index++) {\n        this.node.addSuffix(array.slice(index))\n      }\n    }\n  }\n\n  /**\n     * Returns the longest repeated substring\n     *\n     * @returns {Array} longest repeated substring\n     */\n  getLongestRepeatedSubString () {\n    return this.node.getLongestRepeatedSubString()\n  }\n\n  /**\n     * Returns a readable string format of this tree\n     *\n     * @returns {string} string\n     */\n  toString () {\n    return this.node.toString()\n  }\n\n  /**\n     * Returns a JSON representation of this tree\n     *\n     * @returns {string} JSON\n     */\n  toJson () {\n    return JSON.stringify(this.node)\n  }\n}\n\n/**\n * TreeNode\n */\nclass TreeNode {\n  /**\n     *\n     */\n  constructor () {\n    this.value = []\n    this.leaves = []\n    this.nodes = []\n  }\n\n  /**\n     * @param {string|Array} suf suffix\n     * @returns {boolean} true if first entry of suf equals the value of a child\n     */\n  checkNodes (suf) {\n    let node\n    for (let index = 0; index < this.nodes.length; index++) {\n      node = this.nodes[index]\n      if (arrayShallowEquals(node.value, [suf[0]])) {\n        node.addSuffix(suf.slice(1))\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n     * @param {string|Array} suf suffix\n     */\n  checkLeaves (suf) {\n    let node, leaf\n    for (let index = 0; index < this.leaves.length; index++) {\n      leaf = this.leaves[index]\n      if (leaf[0] === suf[0]) {\n        node = new TreeNode()\n        node.value = [leaf[0]]\n        node.addSuffix(suf.slice(1))\n        node.addSuffix(leaf.slice(1))\n        this.nodes.push(node)\n        this.leaves.splice(index, 1)\n        return\n      }\n    }\n    this.leaves.push(suf)\n  }\n\n  /**\n     * @param {string|Array} suf suffix\n     */\n  addSuffix (suf) {\n    if (suf.length === 0) {\n      return\n    }\n    if (!this.checkNodes(suf)) {\n      this.checkLeaves(suf)\n    }\n  }\n\n  /**\n     * Returns the longest repeated substring\n     *\n     * @returns {Array} longest substring\n     */\n  getLongestRepeatedSubString () {\n    let array = []\n    let temporary = []\n    for (let index = 0; index < this.nodes.length; index++) {\n      temporary = this.nodes[index].getLongestRepeatedSubString()\n      if (temporary.length > array.length) {\n        array = temporary\n      }\n    }\n    return this.value.concat(array)\n  }\n\n  /**\n     * Readable string representation of this node and its children\n     *\n     * @param {number} indent indentation\n     * @returns {string} string representation\n     */\n  toString (indent = 1) {\n    const ind = ' |'.repeat(indent)\n    let string = ''\n    string += this.value.length > 0 ? `-N '${this.value}'` : 'root'\n    if (this.nodes.length > 0) {\n      for (let index = 0; index < this.nodes.length; index++) {\n        string += `\\n${ind}${this.nodes[index].toString(indent + 1)}`\n      }\n    }\n    if (this.leaves.length > 0) {\n      for (let index = 0; index < this.leaves.length; index++) {\n        string += `\\n${ind}-L ${this.leaves[index]}`\n      }\n    }\n    return string\n  }\n}\n\nexport default SuffixTree\n", "/**\n * Calculates all n-grams with a specified length\n *\n * @param {string} string a string\n * @param {number} length length (n) of n-grams\n * @returns {Map<string,number>} maps n-gram to its number of occurences\n */\nexport function getNGrams (string, length) {\n  if (length <= 0) {\n    return new Map()\n  }\n  length = Math.min(length, string.length)\n  const nGrams = new Map()\n  for (let index = 0; index < string.length - length + 1; index++) {\n    const subString = string.slice(index, index + length)\n    if (nGrams.has(subString)) {\n      nGrams.set(subString, nGrams.get(subString) + 1)\n    } else {\n      nGrams.set(subString, 1)\n    }\n  }\n  return nGrams\n}\n\n/**\n * Calculates all n-grams with a specified length\n *\n * @param {Array} array an array of primitive data types\n * @param {number} length length (n) of n-grams\n * @returns {Map<string,object>} maps n-gram, joined with ' ', to its number of\n * occurences and value\n */\nexport function getNGramsForArray (array, length) {\n  if (length <= 0) {\n    return new Map()\n  }\n  length = Math.min(length, array.length)\n  const nGrams = new Map()\n  for (let index = 0; index < array.length - length + 1; index++) {\n    const subArray = array.slice(index, index + length)\n    const key = subArray.join(' ')\n    let count = 1\n    if (nGrams.has(key)) {\n      count = nGrams.get(key).count + 1\n    }\n    nGrams.set(key, {\n      value: subArray,\n      count\n    })\n  }\n  return nGrams\n}\n", "import { arraySlicesEqual } from '../utils/ArrayUtils.js'\n\n/**\n * Compresses a sequence by detecting immediately repeating subsequences\n * hierarchically. Optimal result but high performance complexity.\n *\n * @todo Link to observable demo\n * @param {Array} sequence array with immediately repeating subsequences\n * @returns {object} compressed hierarchy\n */\nexport function compress (sequence) {\n  if (!sequence || sequence.length === 0) {\n    return null\n  }\n  const longestReps = getImmediateRepetitions(sequence)\n  if (longestReps === null) {\n    return sequence\n  }\n  // Get repetition\n  const { seq, rep, length: len, pos } = longestReps[0]\n\n  // Get rest of sequence\n  const preSeq = sequence.slice(0, pos)\n  const postSeq = sequence.slice(pos + len * rep)\n\n  // Recurse with longest repetition\n  const repetition = compress(seq)\n  // Recurse with left rest\n  const pre = compress(preSeq)\n  // Recurse with right rest\n  const post = compress(postSeq)\n\n  // Get current depth\n  const depth = Math.max(\n    pre?.depth ?? 0,\n    (repetition?.depth ?? 0) + 1,\n    post?.depth ?? 0\n  )\n\n  // Get current length / width, i.e. compressed sequence length\n  const length =\n    (pre?.length ?? 0) +\n    (repetition?.length ?? 0) +\n    (post?.length ?? 0)\n\n  return {\n    pre,\n    seq: repetition,\n    rep,\n    post,\n    // Depth, leaves are 0, root is highest\n    depth,\n    // Compressed length\n    length,\n    // Include complete sequence of this node\n    content: sequence\n  }\n}\n\n/**\n * Finds all immediate repetitions in a given sequence.\n *\n * @todo implement a mode that just looks for the best one, instead of later\n * sorting all found ones (will be faster since less sequence.slice() happens)\n * Still needs to keep all results with the same score\n * @param {Array} sequence array with immediately repeating subsequences\n * @returns {object[]} result\n */\nexport function getImmediateRepetitions (sequence = []) {\n  const foundReps = []\n  // For each length, look for a repetition that has that length\n  for (let length = Math.floor(sequence.length / 2); length > 0; --length) {\n    for (let pos = 0; pos < sequence.length - length; ++pos) {\n      let numberOfReps = 0\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        // Let's see how often the slice at pos with the current length repeats immediately...\n        const startPos = pos + (numberOfReps + 1) * length\n        const found = arraySlicesEqual(\n          sequence,\n          sequence,\n          length,\n          pos,\n          startPos\n        )\n        if (!found) {\n          // No more repetitions found\n          break\n        } else {\n          // Continue with searching for more\n          numberOfReps++\n        }\n        // Did we find any repetitions?\n        if (numberOfReps > 0) {\n          const rep = numberOfReps + 1\n          const seq = sequence.slice(pos, pos + length)\n          foundReps.push({\n            length,\n            pos,\n            rep,\n            seq,\n            totalLength: length * rep\n          })\n        }\n      }\n    }\n  }\n  if (foundReps.length > 0) {\n    // Prioritize the ones that encompass most of the sequence, i.e., maximum length*rep\n    return foundReps.sort((a, b) => {\n      // If same total length, choose the one with more repetitions\n      // Better 8*a than 4*aa\n      return a.totalLength === b.totalLength\n        ? b.rep - a.rep\n        : b.totalLength - a.totalLength\n    })\n  }\n  return null\n}\n\n/**\n * Restores the original array/sequence from the compressed hierarchy.\n *\n * @param {object} tree compressed hierarchy\n * @returns {Array} decompressed sequence\n */\nexport function decompress (tree) {\n  if (!tree) {\n    return []\n  }\n  if (tree.join) {\n    return tree\n  }\n  const seq = decompress(tree.seq)\n  const repetition = Array.from({ length: tree.rep }).map(() => seq)\n  return [\n    ...decompress(tree.pre),\n    ...repetition.flat(),\n    ...decompress(tree.post)\n  ]\n}\n\n/**\n * Returns the summary of a hierachy, leaving out information about repetitions.\n *\n * @param {object} tree compressed hierarchy\n * @returns {Array} summary\n * @example\n *  const arr = '12312345656'.split('')\n *  const h = compress(arr)\n *  summary(h).join('')\n *  // '123456'\n */\nexport function summary (tree) {\n  if (!tree) {\n    return []\n  }\n  if (tree.join) {\n    return tree\n  }\n  return [\n    ...summary(tree.pre),\n    ...summary(tree.seq),\n    ...summary(tree.post)\n  ]\n}\n\n/**\n * Formats a compressed hierarchy into a readable string, for example:\n * \"1222333222333\" => \"1 (2x (3x 2) (3x 3))\"\n *\n * @param {object} tree compressed hierarchy\n * @param {string} separator separator\n * @returns {string} result\n */\nexport function toString (tree, separator = ' ') {\n  if (!tree) {\n    return ''\n  }\n  if (tree.join) {\n    return tree.join(separator)\n  }\n  const seq = toString(tree.seq)\n  const repetition = `(${tree.rep}x ${seq})`\n  return [\n    toString(tree.pre),\n    repetition,\n    toString(tree.post)\n  ].join(separator).trim()\n}\n\n/**\n * Calculates the compression rate in [0, 1] for a result of compress().\n *\n * @param {object} compressed compressed hierachy\n * @returns {number} compression ratio\n * @throws {'Invalid hierarchy'} for invalid hierarchy\n */\nexport function compressionRate (compressed) {\n  if (!compressed?.length || !compressed?.content?.length) {\n    throw new Error('Invalid hierarchy')\n  }\n  return compressed.length / compressed.content.length\n}\n", "/**\n * @module stringBased/NeedlemanWunsch\n */\n\n/**\n * Needleman-Wunsch algorithm\n *\n * @see https://github.com/blievrouw/needleman-wunsch/blob/master/src/needleman_wunsch.js\n * @todo does not support cost matrix\n * @todo extend by matchMismathFunction\n */\nclass NeedlemanWunsch {\n  /**\n     * @param {string|Array} seq1 a string\n     * @param {string|Array} seq2 another string\n     * @param {number} matchScore score for matching characters\n     * @param {number} mismatchPenalty penalty for mismatching characters\n     * @param {number} gapPenalty penalty for a gap\n     */\n  constructor (seq1, seq2, matchScore = 1, mismatchPenalty = -1, gapPenalty = -1) {\n    // Compared sequences\n    this.seq1 = seq1\n    this.seq2 = seq2\n    // Scoring parameters\n    this.matchScore = matchScore\n    this.mismatchPenalty = mismatchPenalty\n    this.gapPenalty = gapPenalty\n    // Intermediate scores matrix (scores for [`insert`, `match`, `delete`] positions)\n    this.I = []\n    // Score matrix (best score out of intermediate scores)\n    this.S = []\n    // Traceback matrix (boolean values for [`insert`, `match`, `delete`] positions)\n    this.T = []\n    // Alignments\n    this.finalAlignments = []\n\n    // Calculate scores and tracebacks\n    this.calcScoresAndTracebacks()\n  }\n\n  /**\n     * Calculates (intermediate) scores and tracebacks using provided parameters\n     */\n  calcScoresAndTracebacks () {\n    this.S.push([0])\n    this.I.push([[null, null, null]])\n    this.T.push([[false, false, false]])\n\n    // Calculate scores and traceback on first row\n    for (let i = 1; i < this.seq2.length + 1; i++) {\n      this.S[0].push(this.S[0][this.S[0].length - 1] + this.gapPenalty)\n      this.I[0].push([null, null, null])\n      this.T[0].push([true, false, false])\n    }\n\n    // Generate other rows\n    for (let i = 1; i < this.seq1.length + 1; i++) {\n      this.S.push([this.S[i - 1][0] + this.gapPenalty])\n      this.I.push([[null, null, null]])\n      this.T.push([[false, false, true]])\n      for (let j = 1; j < this.seq2.length + 1; j++) {\n        const insert = this.S[i][j - 1] + this.gapPenalty\n        const del = this.S[i - 1][j] + this.gapPenalty\n        // similarity\n        // TODO: support function here\n        const simScore = this.seq1[i - 1] === this.seq2[j - 1] ? this.matchScore : this.mismatchPenalty\n        const match = this.S[i - 1][j - 1] + simScore\n        const intermediateScores = [insert, match, del]\n        const score = Math.max(...intermediateScores)\n        const tracebackTypeStatus = intermediateScores.map(entry => entry === score)\n        this.S[i].push(score)\n        this.I[i].push(intermediateScores)\n        this.T[i].push(tracebackTypeStatus)\n      }\n    }\n\n    // set best match score\n    const lastRow = this.S[this.S.length - 1]\n    this.score = lastRow[lastRow.length - 1]\n  }\n\n  /**\n     * Finds next alignment locations (children) from a position in scoring matrix\n     *\n     * @param {number[]} pos m- Position in scoring matrix\n     * @returns {object[]} children - Children positions and alignment types\n     */\n  alignmentChildren (pos) {\n    const [i, j] = pos\n    const children = []\n    const tracebackTypeStatus = this.T[i][j]\n    if (tracebackTypeStatus[0]) {\n      // insert\n      children.push({ pos: [i, j - 1], tracebackType: 0 })\n    }\n    if (tracebackTypeStatus[1]) {\n      // match\n      children.push({ pos: [i - 1, j - 1], tracebackType: 1 })\n    }\n    if (tracebackTypeStatus[2]) {\n      // delete\n      children.push({ pos: [i - 1, j], tracebackType: 2 })\n    }\n    return children\n  }\n\n  /**\n     * Runs through scoring matrix from bottom-right to top-left using traceback values to create all optimal alignments\n     *\n     * @returns {object[]} e.g. [{ seq1: '-4321', seq2: '54321' }]\n     */\n  alignmentTraceback () {\n    const finalAlignments = []\n    const root = {\n      next: null,\n      pos: [this.seq1.length, this.seq2.length],\n      alignment: {\n        seq1: '',\n        seq2: ''\n        // score: this.score,\n      }\n    }\n    let current, child, children, length, alignment, pos, t\n    current = root\n    while (current) {\n      pos = current.pos\n      alignment = current.alignment\n      // Get children alignments\n      children = this.alignmentChildren(current.pos)\n      // Store completed alignments\n      if (children.length === 0) {\n        finalAlignments.push(alignment)\n      }\n      current = current.next\n      for (t = 0, length = children.length; t < length; t++) {\n        child = children[t]\n        child.alignment = {\n          // -1 refers to offset between  scoring matrix and the sequence\n          seq1: alignment.seq1.concat(child.tracebackType === 0 ? '-' : this.seq1[pos[0] - 1]),\n          seq2: alignment.seq2.concat(child.tracebackType === 2 ? '-' : this.seq2[pos[1] - 1])\n          // TODO: add score for this alignment\n          // score: alignment.score - this.S[pos[0]][pos[1]]\n        }\n        // Move down a layer\n        child.next = current\n        current = child\n      }\n    }\n    return finalAlignments\n  }\n}\n\nexport default NeedlemanWunsch\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "_atob", "string", "b64", "b64re", "bitmap", "result", "r1", "r2", "i", "MidiParser", "input", "_callback", "_fileElement", "InputEvt", "reader", "e", "b64String", "raw", "rawLength", "t_array", "FileAsUint8Array", "file", "_bytes", "value", "text", "char", "FirstBytes", "lastByte", "dt", "headerSize", "MIDI", "timeDivisionByte1", "timeDivisionByte2", "t", "headerValidation", "endOfTrack", "statusByte", "laststatusByte", "metaEventLength", "event_length", "_global", "src_exports", "__export", "Alignment_exports", "Canvas_exports", "Chords_exports", "DiffAlignment_exports", "Drums_exports", "Guitar_exports", "GuitarNote_default", "HarmonicaNote_default", "Lamellophone_exports", "Matching_exports", "Midi_exports", "MidiInputManager_default", "MusicPiece_default", "Note_default", "NoteArray_default", "Piano_exports", "PitchSequence_default", "PriorityMatching_exports", "Recording_default", "SimilarSections_exports", "Similarity_exports", "stringBased_exports", "utils_exports", "getVersion", "recordAudio", "recordMidi", "Midi_exports", "__export", "MIDI_COMMANDS", "MIDI_NOTES", "MIDI_NOTE_RANGES", "NOTE_NAMES", "NOTE_NAMES_FLAT", "SHARPS", "flatToSharp", "getMidiDrumNoteByNr", "getMidiInstrumentByNr", "getMidiInstrumentByNrL2", "getMidiNoteByLabel", "getMidiNoteByNameAndOctave", "getMidiNoteByNr", "getNoteNameFromNoteNr", "isSharp", "sharpToFlat", "MidiNoteByPitch", "MidiNoteByLabel", "MidiInstrumentByNumber", "MidiInstrumentByNumberLev2", "nr", "label", "name", "octave", "subNr", "key", "GENERAL_MIDI_DRUM_NOTE_NUMBERS", "chroma", "MIDI_INSTRUMENTS", "MIDI_INSTRUMENTS_LEV2", "note", "instrument", "Note", "pitch", "start", "velocity", "channel", "end", "getMidiNoteByNr", "object", "duration", "note", "getMidiNoteByLabel", "addedSeconds", "factor", "otherNote", "laterStart", "short", "Note_default", "GuitarNote", "Note_default", "pitch", "start", "velocity", "channel", "end", "string", "fret", "object", "note", "getMidiNoteByLabel", "otherNote", "short", "GuitarNote_default", "HarmonicaNote", "Note_default", "pitch", "start", "velocity", "channel", "end", "hole", "instruction", "object", "note", "getMidiNoteByLabel", "otherNote", "short", "HarmonicaNote_default", "ascending_default", "a", "b", "bisector_default", "f", "delta", "compare", "d", "x", "ascendingComparator", "left", "lo", "hi", "mid", "right", "center", "i", "ascending_default", "number_default", "x", "numbers", "values", "valueof", "value", "index", "ascendingBisect", "bisector_default", "ascending_default", "bisectRight", "bisectLeft", "bisectCenter", "number_default", "bisect_default", "variance", "values", "valueof", "count", "delta", "mean", "sum", "value", "index", "deviation", "values", "valueof", "v", "variance", "extent_default", "values", "valueof", "min", "max", "value", "index", "InternMap", "entries", "key", "keyof", "value", "intern_get", "intern_set", "intern_delete", "intern_get", "_intern", "_key", "value", "key", "intern_set", "intern_delete", "keyof", "identity_default", "x", "group", "values", "keys", "nest", "identity_default", "nest", "values", "map", "reduce", "keys", "regroup", "i", "groups", "InternMap", "keyof", "index", "value", "key", "group", "e10", "e5", "e2", "ticks_default", "start", "stop", "count", "reverse", "i", "n", "ticks", "step", "tickIncrement", "r0", "r1", "power", "error", "tickStep", "step0", "step1", "max", "values", "valueof", "value", "index", "min", "values", "valueof", "value", "index", "quickselect", "array", "k", "left", "right", "compare", "ascending_default", "n", "m", "z", "s", "sd", "newLeft", "newRight", "t", "i", "j", "swap", "quantile", "values", "p", "valueof", "numbers", "n", "min", "max", "i", "i0", "value0", "quickselect", "value1", "mean", "values", "valueof", "count", "sum", "value", "index", "median_default", "values", "valueof", "quantile", "minIndex", "values", "valueof", "min", "index", "value", "difference", "values", "others", "other", "value", "set", "values", "intersection", "values", "others", "set", "out", "value", "other", "union", "others", "set", "other", "o", "noop", "dispatch", "i", "n", "_", "t", "Dispatch", "parseTypenames", "typenames", "types", "name", "typename", "callback", "T", "get", "set", "copy", "type", "that", "args", "c", "dispatch_default", "xhtml", "namespaces_default", "namespace_default", "name", "prefix", "i", "namespaces_default", "creatorInherit", "name", "document", "uri", "xhtml", "creatorFixed", "fullname", "creator_default", "namespace_default", "none", "selector_default", "selector", "select_default", "select", "selector_default", "groups", "m", "subgroups", "j", "group", "n", "subgroup", "node", "subnode", "i", "Selection", "array_default", "x", "empty", "selectorAll_default", "selector", "arrayAll", "select", "group", "array_default", "selectAll_default", "selectorAll_default", "groups", "m", "subgroups", "parents", "j", "n", "node", "i", "Selection", "matcher_default", "selector", "childMatcher", "node", "find", "childFind", "match", "childFirst", "selectChild_default", "childMatcher", "filter", "children", "childrenFilter", "match", "selectChildren_default", "childMatcher", "filter_default", "match", "matcher_default", "groups", "m", "subgroups", "j", "group", "n", "subgroup", "node", "i", "Selection", "sparse_default", "update", "enter_default", "Selection", "sparse_default", "EnterNode", "parent", "datum", "child", "next", "selector", "constant_default", "x", "bindIndex", "parent", "group", "enter", "update", "exit", "data", "i", "node", "groupLength", "dataLength", "EnterNode", "bindKey", "key", "nodeByKeyValue", "keyValues", "keyValue", "datum", "data_default", "value", "bind", "parents", "groups", "constant_default", "m", "j", "array_default", "enterGroup", "updateGroup", "exitGroup", "i0", "i1", "previous", "next", "Selection", "exit_default", "Selection", "sparse_default", "join_default", "onenter", "onupdate", "onexit", "enter", "update", "exit", "merge_default", "selection", "Selection", "groups0", "groups1", "m0", "m1", "m", "merges", "j", "group0", "group1", "n", "merge", "node", "i", "order_default", "groups", "j", "m", "group", "i", "next", "node", "sort_default", "compare", "ascending", "compareNode", "a", "b", "groups", "m", "sortgroups", "j", "group", "n", "sortgroup", "node", "i", "Selection", "call_default", "callback", "nodes_default", "node_default", "groups", "j", "m", "group", "i", "n", "node", "size_default", "size", "node", "empty_default", "each_default", "callback", "groups", "j", "m", "group", "n", "node", "attrRemove", "name", "attrRemoveNS", "fullname", "attrConstant", "value", "attrConstantNS", "attrFunction", "v", "attrFunctionNS", "attr_default", "namespace_default", "node", "window_default", "node", "styleRemove", "name", "styleConstant", "value", "priority", "styleFunction", "v", "style_default", "styleValue", "node", "window_default", "propertyRemove", "name", "propertyConstant", "value", "propertyFunction", "v", "property_default", "classArray", "string", "classList", "node", "ClassList", "name", "i", "classedAdd", "names", "list", "n", "classedRemove", "classedTrue", "classedFalse", "classedFunction", "value", "classed_default", "textRemove", "textConstant", "value", "textFunction", "v", "text_default", "htmlRemove", "htmlConstant", "value", "htmlFunction", "v", "html_default", "raise", "raise_default", "lower", "lower_default", "append_default", "name", "create", "creator_default", "constantNull", "insert_default", "name", "before", "create", "creator_default", "select", "selector_default", "remove", "parent", "remove_default", "selection_cloneShallow", "clone", "parent", "selection_cloneDeep", "clone_default", "deep", "datum_default", "value", "contextListener", "listener", "event", "parseTypenames", "typenames", "name", "i", "onRemove", "typename", "on", "j", "m", "o", "onAdd", "value", "options", "on_default", "n", "t", "dispatchEvent", "node", "type", "params", "window", "window_default", "event", "dispatchConstant", "dispatchFunction", "dispatch_default", "iterator_default", "groups", "j", "m", "group", "i", "n", "node", "root", "Selection", "groups", "parents", "selection", "selection_selection", "select_default", "selectAll_default", "selectChild_default", "selectChildren_default", "filter_default", "data_default", "enter_default", "exit_default", "join_default", "merge_default", "order_default", "sort_default", "call_default", "nodes_default", "node_default", "size_default", "empty_default", "each_default", "attr_default", "style_default", "property_default", "classed_default", "text_default", "html_default", "raise_default", "lower_default", "append_default", "insert_default", "remove_default", "clone_default", "datum_default", "on_default", "dispatch_default", "iterator_default", "selection_default", "define_default", "constructor", "factory", "prototype", "extend", "parent", "definition", "key", "Color", "darker", "brighter", "reI", "reN", "reP", "reHex", "reRgbInteger", "reRgbPercent", "reRgbaInteger", "reRgbaPercent", "reHslPercent", "reHslaPercent", "named", "define_default", "color", "channels", "color_formatHex", "color_formatHsl", "color_formatRgb", "hslConvert", "format", "m", "l", "rgbn", "Rgb", "rgba", "hsla", "n", "r", "g", "b", "a", "rgbConvert", "o", "rgb", "opacity", "extend", "k", "rgb_formatHex", "rgb_formatRgb", "hex", "value", "h", "s", "Hsl", "min", "max", "hsl", "m2", "m1", "hsl2rgb", "radians", "degrees", "A", "B", "C", "D", "E", "ED", "EB", "BC_DA", "cubehelixConvert", "o", "Cubehelix", "Rgb", "rgbConvert", "r", "g", "b", "l", "bl", "k", "h", "degrees", "cubehelix", "s", "opacity", "define_default", "extend", "Color", "brighter", "darker", "radians", "a", "cosh", "sinh", "basis", "t1", "v0", "v1", "v2", "v3", "t2", "t3", "basis_default", "values", "n", "t", "i", "basisClosed_default", "values", "n", "t", "i", "v0", "v1", "v2", "v3", "basis", "constant_default", "x", "linear", "a", "d", "t", "exponential", "b", "y", "hue", "constant_default", "gamma", "nogamma", "rgb_default", "rgbGamma", "y", "color", "gamma", "rgb", "start", "end", "r", "g", "b", "opacity", "nogamma", "t", "rgbSpline", "spline", "colors", "i", "rgbBasis", "basis_default", "rgbBasisClosed", "basisClosed_default", "numberArray_default", "a", "b", "c", "i", "t", "isNumberArray", "x", "genericArray", "a", "b", "nb", "na", "x", "c", "i", "value_default", "t", "date_default", "a", "b", "d", "t", "number_default", "a", "b", "t", "object_default", "a", "b", "i", "c", "k", "value_default", "t", "reA", "reB", "zero", "b", "one", "string_default", "a", "bi", "am", "bm", "bs", "i", "q", "number_default", "t", "o", "value_default", "a", "b", "t", "c", "constant_default", "number_default", "color", "rgb_default", "string_default", "date_default", "isNumberArray", "numberArray_default", "genericArray", "object_default", "round_default", "a", "b", "t", "degrees", "identity", "decompose_default", "a", "b", "c", "d", "e", "f", "scaleX", "scaleY", "skewX", "svgNode", "parseCss", "value", "m", "identity", "decompose_default", "parseSvg", "interpolateTransform", "parse", "pxComma", "pxParen", "degParen", "pop", "s", "translate", "xa", "ya", "xb", "yb", "q", "i", "number_default", "rotate", "a", "b", "skewX", "scale", "t", "n", "o", "interpolateTransformCss", "parseCss", "interpolateTransformSvg", "parseSvg", "cubehelix", "hue", "cubehelixGamma", "y", "start", "end", "h", "nogamma", "l", "opacity", "t", "cubehelix_default", "cubehelixLong", "frame", "timeout", "interval", "pokeDelay", "taskHead", "taskTail", "clockLast", "clockNow", "clockSkew", "clock", "setFrame", "f", "now", "clearNow", "Timer", "timer", "callback", "delay", "time", "sleep", "t", "timerFlush", "e", "wake", "nap", "poke", "t0", "t1", "t2", "timeout_default", "callback", "delay", "time", "t", "Timer", "elapsed", "emptyOn", "dispatch_default", "emptyTween", "CREATED", "SCHEDULED", "STARTING", "STARTED", "RUNNING", "ENDING", "ENDED", "schedule_default", "node", "name", "id", "index", "group", "timing", "schedules", "create", "init", "schedule", "get", "set", "self", "tween", "timer", "elapsed", "start", "i", "j", "n", "o", "stop", "timeout_default", "tick", "t", "interrupt_default", "node", "name", "schedules", "schedule", "active", "empty", "i", "STARTING", "ENDING", "ENDED", "interrupt_default", "name", "tweenRemove", "id", "name", "tween0", "tween1", "schedule", "set", "tween", "i", "n", "tweenFunction", "value", "t", "tween_default", "get", "tweenValue", "transition", "node", "interpolate_default", "a", "b", "c", "number_default", "color", "rgb_default", "string_default", "attrRemove", "name", "attrRemoveNS", "fullname", "attrConstant", "interpolate", "value1", "string00", "string1", "interpolate0", "string0", "attrConstantNS", "attrFunction", "value", "string10", "attrFunctionNS", "attr_default", "namespace_default", "i", "interpolateTransformSvg", "interpolate_default", "tweenValue", "attrInterpolate", "name", "i", "t", "attrInterpolateNS", "fullname", "attrTweenNS", "value", "t0", "i0", "tween", "attrTween", "attrTween_default", "key", "namespace_default", "delayFunction", "id", "value", "init", "delayConstant", "delay_default", "get", "durationFunction", "id", "value", "set", "durationConstant", "duration_default", "get", "easeConstant", "id", "value", "set", "ease_default", "get", "easeVarying", "id", "value", "v", "set", "easeVarying_default", "filter_default", "match", "matcher_default", "groups", "m", "subgroups", "j", "group", "n", "subgroup", "node", "i", "Transition", "merge_default", "transition", "groups0", "groups1", "m0", "m1", "m", "merges", "j", "group0", "group1", "n", "merge", "node", "i", "Transition", "start", "name", "i", "onFunction", "id", "listener", "on0", "on1", "sit", "init", "set", "schedule", "on", "on_default", "get", "removeFunction", "id", "parent", "i", "remove_default", "select_default", "select", "name", "id", "selector_default", "groups", "m", "subgroups", "j", "group", "n", "subgroup", "node", "subnode", "i", "schedule_default", "get", "Transition", "selectAll_default", "select", "name", "id", "selectorAll_default", "groups", "m", "subgroups", "parents", "j", "group", "n", "node", "i", "children", "child", "inherit", "get", "k", "l", "schedule_default", "Transition", "Selection", "selection_default", "styleNull", "name", "interpolate", "string00", "string10", "interpolate0", "string0", "styleValue", "string1", "styleRemove", "styleConstant", "value1", "styleFunction", "value", "styleMaybeRemove", "id", "on0", "on1", "listener0", "key", "event", "remove", "schedule", "set", "on", "listener", "style_default", "priority", "i", "interpolateTransformCss", "interpolate_default", "tweenValue", "styleInterpolate", "name", "i", "priority", "t", "styleTween", "value", "i0", "tween", "styleTween_default", "key", "textConstant", "value", "textFunction", "value1", "text_default", "tweenValue", "textInterpolate", "i", "textTween", "value", "t0", "i0", "tween", "textTween_default", "key", "transition_default", "name", "id0", "id1", "newId", "groups", "m", "j", "group", "n", "node", "i", "inherit", "get", "schedule_default", "Transition", "end_default", "on0", "on1", "that", "id", "size", "resolve", "reject", "cancel", "end", "schedule", "set", "on", "id", "Transition", "groups", "parents", "name", "transition", "selection_default", "newId", "selection_prototype", "select_default", "selectAll_default", "filter_default", "merge_default", "transition_default", "on_default", "attr_default", "attrTween_default", "style_default", "styleTween_default", "text_default", "textTween_default", "remove_default", "tween_default", "delay_default", "duration_default", "ease_default", "easeVarying_default", "end_default", "cubicInOut", "t", "defaultTiming", "cubicInOut", "inherit", "node", "id", "timing", "transition_default", "name", "Transition", "newId", "now", "groups", "m", "j", "group", "n", "i", "schedule_default", "selection_default", "interrupt_default", "transition_default", "abs", "max", "min", "number1", "number2", "X", "type", "x", "e", "xy", "Y", "y", "XY", "type", "t", "formatDecimal_default", "x", "formatDecimalParts", "p", "i", "coefficient", "exponent_default", "x", "formatDecimalParts", "formatGroup_default", "grouping", "thousands", "value", "width", "i", "t", "j", "g", "length", "formatNumerals_default", "numerals", "value", "i", "re", "formatSpecifier", "specifier", "match", "FormatSpecifier", "formatTrim_default", "s", "out", "n", "i", "i0", "i1", "prefixExponent", "formatPrefixAuto_default", "x", "p", "d", "formatDecimalParts", "coefficient", "exponent", "n", "formatRounded_default", "x", "p", "d", "formatDecimalParts", "coefficient", "exponent", "formatTypes_default", "x", "p", "formatDecimal_default", "formatRounded_default", "formatPrefixAuto_default", "identity_default", "x", "map", "prefixes", "locale_default", "locale", "group", "identity_default", "formatGroup_default", "currencyPrefix", "currencySuffix", "decimal", "numerals", "formatNumerals_default", "percent", "minus", "nan", "newFormat", "specifier", "formatSpecifier", "fill", "align", "sign", "symbol", "zero", "width", "comma", "precision", "trim", "type", "formatTypes_default", "prefix", "suffix", "formatType", "maybeSuffix", "format", "value", "valuePrefix", "valueSuffix", "i", "n", "c", "valueNegative", "formatTrim_default", "prefixExponent", "length", "padding", "formatPrefix", "f", "e", "exponent_default", "k", "locale", "format", "formatPrefix", "defaultLocale", "definition", "locale_default", "precisionFixed_default", "step", "exponent_default", "precisionPrefix_default", "step", "value", "exponent_default", "precisionRound_default", "step", "max", "exponent_default", "defaultSource_default", "uniform_default", "sourceRandomUniform", "source", "randomUniform", "min", "max", "defaultSource_default", "int_default", "sourceRandomInt", "source", "randomInt", "min", "max", "defaultSource_default", "normal_default", "sourceRandomNormal", "source", "randomNormal", "mu", "sigma", "x", "r", "y", "defaultSource_default", "eps", "lcg", "seed", "state", "initRange", "domain", "range", "constants", "x", "number", "x", "unit", "identity", "x", "normalize", "a", "b", "constants", "clamper", "t", "bimap", "domain", "range", "interpolate", "d0", "d1", "r0", "r1", "polymap", "j", "d", "r", "i", "bisect_default", "copy", "source", "target", "transformer", "value_default", "transform", "untransform", "unknown", "clamp", "piecewise", "output", "input", "rescale", "n", "scale", "y", "number_default", "_", "number", "round_default", "u", "continuous", "tickFormat", "start", "stop", "count", "specifier", "step", "tickStep", "precision", "formatSpecifier", "value", "precisionPrefix_default", "formatPrefix", "precisionRound_default", "precisionFixed_default", "format", "linearish", "scale", "domain", "count", "d", "ticks_default", "specifier", "tickFormat", "i0", "i1", "start", "stop", "prestep", "step", "maxIter", "tickIncrement", "linear", "continuous", "copy", "initRange", "colors_default", "specifier", "n", "colors", "i", "warm", "cubehelixLong", "cubehelix", "cool", "c", "rainbow_default", "t", "ts", "ramp", "range", "n", "t", "viridis_default", "colors_default", "magma", "inferno", "plasma", "Transform", "k", "x", "y", "point", "location", "identity", "transform", "node", "randFloat", "min", "max", "choose", "array", "index", "int_default", "clipValue", "value", "minValue", "maxValue", "roundToNDecimals", "number", "n", "swapSoSmallerFirst", "x", "y", "countOnesOfBinary", "integer", "count", "findLocalMaxima", "maximaIndices", "last", "current", "next", "lastIndex", "NoteArray", "notes", "reUseNotes", "d", "GuitarNote_default", "Note_default", "note", "sort", "noteArray", "gap", "duration", "clone", "times", "result", "copy", "index", "min", "noteEnd", "factor", "addedSeconds", "startTime", "offset", "n", "func", "element", "array", "sortFunction", "a", "b", "mapFunction", "start", "end", "endTime", "mode", "filterFunc", "slices", "lastTime", "time", "gapDuration", "cuts", "occupiedTimes", "collisions", "s", "e", "newStart", "newEnd", "currentStart", "lastEnd", "indices", "segments", "lastIndex", "filterFunction", "pitches", "steps", "clipValue", "newNote", "otherNoteArray", "NoteArray_default", "arrayShallowEquals", "a", "b", "index", "element", "arrayHasSameElements", "checkLength", "setA", "setB", "jaccardIndex", "set1", "set2", "intersection", "union", "kendallTau", "ranking1", "ranking2", "normalize", "inversions", "n", "r1smaller", "r2smaller", "removeDuplicates", "array", "arrayContainsArray", "arraySlicesEqual", "length", "startA", "startB", "offset", "arrayIndexOf", "haystack", "needle", "startIndex", "found", "getArrayMax", "max", "normalizeNdArray", "array_", "maxValue", "d", "euclideanDistance", "matrixA", "matrixB", "valuesA", "valuesB", "diffs", "i", "formatMatrix", "matrix", "colSeparator", "rowSeparator", "formatter", "row", "value", "binarySearch", "accessor", "closest", "diff", "value_", "diff2", "pivotPosition", "pivotElement", "pivotValue", "findStreaks", "values", "equality", "result", "startValue", "v", "findRepeatedIndices", "sequence", "equals", "index2", "element2", "Recording", "NoteArray_default", "name", "date", "notes", "speed", "selectedTrack", "timeSelection", "comment", "d", "otherRecording", "arrayShallowEquals", "notes1", "notes2", "index", "element", "object", "values", "names", "value", "Recording_default", "midiParser", "ROUNDING_PRECISION", "preprocessMusicXmlData", "xml", "log", "partNameElements", "instruments", "partNames", "instrumentNames", "p", "index", "drumInstrumentMap", "getDrumInstrumentMap", "parts", "parsedParts", "part", "preprocessMusicXmlPart", "result", "max", "d", "_a", "_b", "_c", "handleStaveAndTab", "measures", "xmlMeasureIndices", "duplicateRepeatedMeasures", "xmlNotes", "xmlNoteIndexMap", "i", "xmlNoteIndices", "currentTime", "divisions", "tempo", "beats", "beatType", "defaultVelocity", "velocityFactor", "velocity", "tempoChanges", "beatTypeChanges", "keySignatureChanges", "noteObjs", "measureRehearsalMap", "noteLyricsMap", "measureLinePositions", "measureIndices", "measure", "currentTimeRounded", "roundToNDecimals", "soundElements", "element", "tempoValue", "secondsPerBeat", "fifths", "key", "scale", "keySignatureMap", "lastNoteDuration", "child", "duration", "getDurationInSeconds", "direction", "rehearsals", "marks", "r", "text", "measureIndex", "note", "durationInSeconds", "type", "isUnpitched", "pitch", "instrumentId", "alter", "step", "octave", "getMidiNoteByNameAndOctave", "dynamicsTag", "dynamicsMap", "tieElement", "noteEnd", "noteObject", "lyrics", "getLyricsFromNote", "newLyrics", "staff", "startTime", "endTime", "string", "fret", "GuitarNote_default", "Note_default", "error", "removeRehearsalRepetitions", "getTuningPitches", "entries", "clean", "lyric", "texts", "l", "resultMeasures", "currentRepeatedSection", "isAlternativeEndingOne", "endingMarks", "repetitionMarks", "times", "repetition", "firstRepetition", "allMeasuresUntilHere", "endingMark", "measureIndexMap", "track", "notes", "hasStringFretNotes", "voice", "backups", "backup", "tuningPitches", "staffTunings", "st", "tuningNote", "tuningOctave", "partMap", "scoreParts", "scorePart", "partId", "instruMap", "midiInstrs", "midiInstr", "instrId", "bpmToSecondsPerBeat", "bpm", "freqToApproxMidiNr", "frequency", "midiToFrequency", "midi", "chordToInteger", "notes", "value", "note", "chroma", "noteInteger", "chordIntegerJaccardIndex", "chord1", "chord2", "intersection", "union", "intersectionSize", "countOnesOfBinary", "unionSize", "noteTypeDurationRatios", "baseDurations", "d", "dots", "duration", "toAdd", "dot", "a", "b", "noteDurationToNoteType", "quarterDuration", "ratio", "binarySearch", "CIRCLE_OF_5THS", "INTERVALS", "metronomeTrackFromTempoAndMeter", "tempo", "meter", "track", "secondsPerBeat", "currentTime", "beat", "roundToNDecimals", "metronomeTrackFromMusicPiece", "musicPiece", "tempoFactor", "tempos", "timeSignatures", "initialTimeSig", "beatCount", "beatType", "timeSigsTodo", "initialTempo", "temposTodo", "lookahead", "ROUNDING_PRECISION", "preprocessMidiFileData", "data", "splitFormat0IntoTracks", "log", "parsedTracks", "tempoChanges", "beatTypeChanges", "keySignatureChanges", "getSignatureChanges", "track", "t", "parseMidiTrack", "splitFormat0", "totalTime", "max", "d", "measureLinePositions", "getMeasureLines", "getMeasureIndices", "result", "timeDivision", "_a", "notes", "tempo", "currentTick", "currentTime", "milliSecondsPerTick", "getMillisecondsPerTick", "tickOfLastTempoChange", "timeOfLastTempoChange", "unfinishedNotes", "event", "type", "EVENT_TYPES", "btc", "roundToNDecimals", "ksc", "mostRecentTempoChange", "index", "tick", "pitch", "velocity", "channel", "key", "newNote", "Note_default", "neededToFix", "note", "trackName", "instrument", "instrumentName", "getInstrumentAndTrackName", "META_TYPES", "measureLines", "beats", "beatType", "currentBeatsInMeasure", "timeSinceLastTempoChange", "b", "bpmToSecondsPerBeat", "measureTimes", "measureIndices", "todo", "tracks", "grouped", "group", "splittedTracks", "lastTempo", "milliSecondsPerQuarter", "newEntry", "last", "KEY_SIG_MAP", "scale", "MusicPiece", "name", "tempos", "timeSignatures", "keySignatures", "measureTimes", "tracks", "xmlMeasureIndices", "d", "currentTempo", "tempo", "currentTimeSig", "timeSignature", "currentKeySig", "keySignature", "midiFile", "midi", "parsed", "preprocessMidiFileData", "TempoDefinition", "TimeSignature", "KeySignature", "track", "Track", "xmlFile", "xmlDocument", "preprocessMusicXmlData", "index", "n", "json", "pretty", "_this", "sortByTime", "notes", "t", "a", "b", "indices", "steps", "newTracks", "change", "na", "NoteArray_default", "tuning", "instrument", "tuningPitches", "measureIndices", "measureRehearsalMap", "noteLyricsMap", "xmlNoteIndices", "note", "object", "GuitarNote_default", "Note_default", "time", "bpm", "signature", "key", "scale", "MusicPiece_default", "PitchSequence", "pitches", "notes", "a", "b", "d", "string", "index", "p", "getMidiNoteByNr", "result", "otherPitchSequence", "element", "PitchSequence_default", "Canvas_exports", "__export", "drawArc", "drawAssymetricArc", "drawBezierConnectorX", "drawBezierConnectorY", "drawBowRight", "drawBracketH", "drawCircle", "drawColorRamp", "drawCornerLine", "drawDiamond", "drawFilledCircle", "drawHLine", "drawHexagon", "drawLine", "drawMatrix", "drawNoteTrapezoid", "drawNoteTrapezoidUpwards", "drawRoundedCorner", "drawRoundedCornerLine", "drawRoundedCornerLineRightLeft", "drawRoundedRect", "drawTriangle", "drawVLine", "drawX", "setupCanvas", "setupCanvas", "canvas", "dpr", "rect", "context", "drawLine", "x1", "y1", "x2", "y2", "drawHLine", "y", "drawVLine", "x", "drawBowRight", "strength", "middleX", "middleY", "dx", "normalX", "normalY", "cx", "cy", "drawCircle", "radius", "drawFilledCircle", "drawTriangle", "halfSize", "drawDiamond", "drawX", "drawNoteTrapezoid", "width", "height", "height2", "drawNoteTrapezoidUpwards", "width2", "drawRoundedRect", "drawCornerLine", "xFirst", "drawRoundedCornerLine", "maxRadius", "xDist", "yDist", "drawRoundedCornerLineRightLeft", "drawHexagon", "index", "angle", "drawBezierConnectorX", "deltaX", "drawBezierConnectorY", "deltaY", "drawRoundedCorner", "turnLeft", "roundness", "drawArc", "startX1", "startX2", "length", "yBottom", "drawAssymetricArc", "endX1", "endX2", "radiusTop", "radiusBottom", "cxTop", "cxBottom", "drawBracketH", "w", "h", "drawMatrix", "matrix", "size", "colorScale", "colorMap", "viridis_default", "cellSize", "paddedSize", "linear", "extent_default", "row", "col", "drawColorRamp", "rainbow_default", "scaleColor", "recordAudio", "resolve", "stream", "error", "options", "mediaRecorder", "audioChunks", "event", "blobOptions", "audioBlob", "recordMidi", "onMessage", "resolve", "midiAccess", "error", "messages", "addMessage", "message", "input", "processMidiMessagesToNotes", "currentNotes", "notes", "device", "time", "commandAndChannel", "channel", "command", "pitch", "velocity", "noteOff", "noteOn", "a", "b", "note", "Note_default", "key", "MidiInputManager", "getMidiLiveData", "setMidiLiveData", "addCurrentNote", "removeCurrentNote", "midiAccess", "input", "error", "message", "device", "commandAndChannel", "channel", "command", "time", "pitch", "velocity", "note", "Note_default", "midiData", "index", "MidiInputManager_default", "Drums_exports", "__export", "DRUM_ACTIONS", "DRUM_PARTS", "DRUM_PARTS_ACTIONS", "drumPitchReplacementMapMPS850", "generateDrumVariation", "getPitch2PositionMap", "simplifyDrumPitches", "DRUM_PARTS", "DRUM_ACTIONS", "DRUM_PARTS_ACTIONS", "drumPitchReplacementMapMPS850", "generateDrumVariation", "data", "deviation", "pAdd", "pRemove", "usedPitches", "note", "pitches", "randVelocity", "int_default", "randTime", "normal_default", "variation", "randFloat", "start", "end", "velocity", "pitch", "choose", "Note_default", "newNote", "a", "b", "simplifyDrumPitches", "notes", "replacementMap", "errors", "oldPitch", "newPitch", "getPitch2PositionMap", "result", "uniqeRows", "group", "d", "index", "Guitar_exports", "__export", "StringedTuning", "fretboardPositionsFromMidi", "generateExampleData", "getFretboardPositionsFromNoteName", "getFretboardPositionsFromPitch", "getNoteInfoFromFretboardPos", "getPitchFromFretboardPos", "getTuningFromPitches", "getTuningPitchRange", "guitarNoteFromNote", "stringColors", "stringedTunings", "StringedTuning", "name", "notes", "note", "getMidiNoteByLabel", "stringedTunings", "guitarNoteFromNote", "tuning", "string", "reversedString", "fret", "GuitarNote_default", "getTuningFromPitches", "pitches", "stringCount", "stringCountMap", "tunings", "t", "arrayShallowEquals", "getTuningPitchRange", "fretCount", "openMax", "stringColors", "getPitchFromFretboardPos", "getNoteInfoFromFretboardPos", "pitch", "getMidiNoteByNr", "getFretboardPositionsFromPitch", "positions", "openPitch", "getFretboardPositionsFromNoteName", "n", "lowestPitch", "generateExampleData", "startTime", "count", "currentTime", "start", "randFloat", "int_default", "velocity", "fretboardPositionsFromMidi", "minPitch", "maxPitch", "possibleNotes", "errorPitches", "result", "bestPos", "pos", "minDataPitch", "maxDataPitch", "extent_default", "d", "advice", "Lamellophone_exports", "__export", "LamellophoneTuning", "bestTransposition", "convertNotesToHtmlTab", "convertNotesToTab", "convertNumbersToLetters", "convertTabToNotes", "lamellophoneTunings", "Chords_exports", "__export", "detectChordsByExactStart", "detectChordsByOverlap", "detectChordsBySimilarStart", "getChordName", "getChordType", "fillStr", "s", "n", "deprecate", "original", "alternative", "fn", "args", "isNamed", "src", "isPitch", "pitch", "FIFTHS", "STEPS_TO_OCTS", "fifths", "encode", "step", "alt", "oct", "dir", "f", "o", "FIFTHS_TO_STEPS", "decode", "coord", "unaltered", "i", "NoNote", "cache$1", "stepToLetter", "altToAcc", "accToAlt", "acc", "note", "cached", "value", "parse$1", "pitchName$1", "REGEX$1", "tokenizeNote", "str", "m", "coordToNote", "noteCoord", "mod", "SEMI", "noteName", "tokens", "letter", "octStr", "name", "pc", "chroma", "height", "midi", "freq", "props", "NoInterval", "INTERVAL_TONAL_REGEX", "INTERVAL_SHORTHAND_REGEX", "REGEX", "tokenizeInterval", "cache", "interval", "parse", "pitchName", "SIZES", "TYPES", "num", "q", "t", "type", "simple", "qToAlt", "semitones", "coordToInterval", "forceDescending", "isDescending", "ivl", "calcNum", "d", "altToQ", "transpose", "intervalName", "note$1", "interval$1", "intervalCoord", "tr", "distance", "fromNote", "toNote", "from", "to", "fcoord", "tcoord", "octs", "rotate", "times", "arr", "len", "n", "compact", "EmptyPcset", "setNumToChroma", "num", "chromaToNumber", "chroma", "REGEX", "isChroma", "set", "isPcsetNum", "isPcset", "cache", "get", "src", "listToChroma", "chromaToPcset", "pcset", "deprecate", "IVLS", "chromaToIntervals", "chroma", "intervals", "i", "modes", "set", "normalize", "binary", "get", "compact", "_", "r", "rotate", "isSubsetOf", "set", "s", "get", "notes", "o", "isSupersetOf", "chromaRotations", "chroma", "binary", "_", "i", "rotate", "chromaToPcset", "setNum", "chromaToNumber", "normalizedNum", "n", "normalized", "setNumToChroma", "intervals", "chromaToIntervals", "listToChroma", "set", "EmptyPcset", "pitch", "note", "interval", "CHORDS", "NoChordType", "EmptyPcset", "dictionary", "index", "get", "type", "chordType", "deprecate", "all", "dictionary", "entries", "deprecate", "add", "intervals", "aliases", "fullName", "quality", "getQuality", "chord", "get", "dictionary", "index", "alias", "addAlias", "has", "interval", "CHORDS", "ivls", "names", "a", "b", "namedSet", "notes", "pcToName", "record", "n", "chroma", "note", "detect", "source", "x", "findExactMatches", "chord", "a", "b", "weight", "tonic", "tonicChroma", "noteName", "allModes", "modes", "found", "mode", "index", "all", "chordType", "chordName", "baseNote", "SCALES", "NoScaleType", "EmptyPcset", "dictionary", "index", "get", "type", "index", "NoScaleType", "scaleType", "deprecate", "all", "dictionary", "entries", "add", "intervals", "name", "aliases", "scale", "get", "dictionary", "index", "alias", "addAlias", "SCALES", "ivls", "NoChord", "NUM_TYPES", "tokenize", "name", "letter", "acc", "oct", "type", "tokenizeNote", "get", "src", "getChord", "tonic", "chord", "typeName", "optionalTonic", "optionalRoot", "note", "root", "rootInterval", "distance", "rootDegree", "intervals", "i", "num", "quality", "newNum", "notes", "transpose", "symbol", "deprecate", "chordName", "interval", "chordScales", "s", "isChordIncluded", "isSupersetOf", "all", "scale", "extended", "isSuperset", "reduced", "isSubset", "isSubsetOf", "index", "detect", "DATA", "VALUES", "denominator", "shorthand", "names", "add", "add", "denominator", "shorthand", "names", "VALUES", "IQ", "add", "combinator", "a", "b", "substract", "combinator", "a", "b", "combinator", "fn", "a", "b", "coordA", "interval", "coordB", "coord", "coordToInterval", "L2", "L440", "SHARPS", "FLATS", "NoRomanNumeral", "cache", "get", "src", "parse", "NAMES", "isPitch", "fromPitch", "isNamed", "romanNumeral", "deprecate", "fromPitch", "pitch", "get", "altToAcc", "NAMES", "REGEX", "tokenize", "str", "ROMANS", "NAMES_MINOR", "parse", "src", "name", "acc", "roman", "chordType", "NoRomanNumeral", "upperRoman", "step", "alt", "accToAlt", "dir", "interval", "Empty", "NoKey", "NoKeyScale", "NoMajorKey", "NoMinorKey", "mapScaleToType", "scale", "list", "sep", "type", "i", "keyScale", "grades", "chords", "harmonicFunctions", "chordScales", "tonic", "intervals", "gr", "get", "interval", "transpose", "MajorScale", "keyScale", "NaturalScale", "HarmonicScale", "MelodicScale", "MODES", "NoMode", "EmptyPcset", "modes", "toMode", "index", "mode", "alias", "get", "name", "deprecate", "all", "entries", "toMode", "mode", "modeNum", "setNum", "alt", "name", "triad", "seventh", "alias", "aliases", "chroma", "intervals", "get", "chords", "modeName", "tonic", "mode", "get", "triads", "rotate", "tonics", "i", "transpose", "triad", "MODES", "x", "seventhChords", "NoScale", "tokenize", "name", "i", "tonic", "note", "n", "type", "get", "src", "tokens", "tokenize", "tonic", "note", "st", "NoScale", "type", "notes", "i", "transpose", "name", "scale", "deprecate", "detectChordsByExactStart", "notes", "group", "d", "a", "b", "chord", "detectChordsBySimilarStart", "threshold", "chords", "currentChord", "currentChordStartTime", "currentChordPitches", "note", "detectChordsByOverlap", "sortByPitch", "sorted", "notesTodo", "note1", "note2", "chordTypes", "getChordType", "steps", "lowest", "index", "candidates", "cand", "arrayShallowEquals", "getChordName", "noteLetters", "LamellophoneTuning", "name", "notes", "note", "getMidiNoteByLabel", "a", "b", "pitches", "numbers", "index", "pitch", "number", "ending", "lowerOctave", "d", "letter", "getMidiNoteByNr", "lamellophoneTunings", "convertTabToNotes", "tab", "tuning", "tempo", "symbolToPitchMap", "symbols", "noteNames", "noteNamesSet", "lowestNote", "startOct", "secondsPerBeat", "bpmToSecondsPerBeat", "insideChord", "insideNote", "currentTime", "currentPitch", "currentOctOffset", "finishNote", "Note_default", "char", "convertNotesToTab", "mode", "restSize", "pitchToSymbolMap", "chords", "detectChordsByExactStart", "previousEnd", "chord", "chordString", "_a", "max", "n", "convertNotesToHtmlTab", "colormap", "string", "convertNumbersToLetters", "numberTab", "numberLetterMap", "key", "value", "bestTransposition", "occuringPitches", "notePitches", "difference", "minPitch", "maxPitch", "extent_default", "transpose", "array", "steps", "bestSteps", "bestTransposed", "commonPitches", "transposed", "common", "intersection", "uncommon", "freePitches", "neededPitches", "p", "retune", "neededPitch", "bestMatch", "bestDiff", "freePitch", "Piano_exports", "__export", "pianoPitchRange", "Alignment_exports", "__export", "alignNoteArrays", "alignNoteArrays2", "alignNoteArrays3", "alignmentBenchmark", "testAlignment", "Matching_exports", "__export", "getMatchingError", "getMatchingSection", "getMatchingSliceError", "getMultiMatchingErrorPerNote", "matchGtAndMultipleRecordings", "matchGtAndRecordingNotes", "utils_exports", "__export", "CIRCLE_OF_5THS", "INTERVALS", "alignNotesToBpm", "arrayContainsArray", "arrayHasSameElements", "arrayIndexOf", "arrayShallowEquals", "arraySlicesEqual", "averageColor", "averageRecordings", "averageRecordings2", "binarySearch", "blobToBase64", "blobToFileExtension", "bpmToSecondsPerBeat", "choose", "chordIntegerJaccardIndex", "chordToInteger", "clipRecordingsPitchesToGtFretboardRange", "clipRecordingsPitchesToGtRange", "clipValue", "confidenceInterval", "countOnesOfBinary", "deepCloneFlatObjectMap", "delay", "differenceMap", "differenceMapErrorAreas", "euclideanDistance", "filterRecordingNoise", "findLocalMaxima", "findNearest", "findRepeatedIndices", "findStreaks", "formatDate", "formatMatrix", "formatSongTitle", "formatTime", "freqToApproxMidiNr", "getArrayMax", "getBoxplotCharacteristics", "getColorLightness", "getObjectFromLocalStorage", "groupNotesByPitch", "jaccardIndex", "kendallTau", "kernelDensityEstimator", "kernelEpanechnikov", "kernelGauss", "metronomeTrackFromMusicPiece", "metronomeTrackFromTempoAndMeter", "midiToFrequency", "normalizeNdArray", "noteColorFromPitch", "noteDurationToNoteType", "pearsonCorrelation", "pingMidiDevice", "randFloat", "recordingsHeatmap", "removeDuplicates", "reverseString", "roundToNDecimals", "setOpacity", "storeObjectInLocalStorage", "swapSoSmallerFirst", "blobToBase64", "blob", "resolve", "reader", "blobToFileExtension", "getColorLightness", "color", "r", "g", "b", "averageColor", "colors", "mR", "mG", "mB", "c", "setOpacity", "opacity", "formatTime", "seconds", "includeMillis", "s", "min", "sec", "ms", "formatDate", "date", "replaceT", "keepMillis", "string", "formatSongTitle", "title", "maxLength", "storeObjectInLocalStorage", "key", "object", "string", "getObjectFromLocalStorage", "deepCloneFlatObjectMap", "map", "result", "key", "value", "groupNotesByPitch", "tracks", "allNotes", "group", "d", "reverseString", "s", "findNearest", "notes", "targetNote", "nearest", "dist", "targetStart", "n", "newDist", "delay", "seconds", "resolve", "noteColormap", "d", "c", "hsl", "noteColormapAccessible", "colorInterpolator", "rgb_default", "noteColormapGradientArray", "index", "noteColorFromPitch", "pitch", "colormap", "pearsonCorrelation", "x", "y", "nn", "i", "meanX", "mean", "meanY", "calc", "v", "s", "a", "e", "confidenceInterval", "values", "n", "m", "deviation", "part", "low", "high", "getBoxplotCharacteristics", "b", "minValue", "maxValue", "q1", "quantile", "q2", "q3", "iqr", "r0", "r1", "kernelDensityEstimator", "kernel", "X", "V", "kernelEpanechnikov", "k", "kernelGauss", "filterRecordingNoise", "recording", "velocityThreshold", "durationThreshold", "note", "clipRecordingsPitchesToGtRange", "recordings", "groundTruth", "pitchRanges", "index", "part", "pitchExtent", "extent_default", "d", "track", "minPitch", "maxPitch", "clipRecordingsPitchesToGtFretboardRange", "mode", "occuringPositions", "positions", "validPositions", "positionRanges", "stringExtent", "fretExtent", "minString", "maxString", "minFret", "maxFret", "alignNotesToBpm", "notes", "bpm", "timeDivision", "secondsPerDivision", "bpmToSecondsPerBeat", "n", "recordingsHeatmap", "recNotes", "nRecs", "binSize", "attribute", "groupedByAttribute", "group", "heatmapByAttribute", "attribute_", "maxTime", "max", "nBins", "heatmap", "start", "end", "bin", "averageRecordings", "heatmapByPitch", "threshold", "newNotes", "pitch", "currentNote", "time", "Note_default", "a", "b", "averageRecordings2", "bandwidth", "ticksPerSecond", "groupedByPitch", "starts", "ends", "duration", "ticks", "x", "linear", "kde", "kernelDensityEstimator", "kernelEpanechnikov", "estimateStarts", "estimateEnds", "maximaStarts", "findLocalMaxima", "maximaEnds", "chosenStarts", "chosenEnds", "nextStart", "nextEnd", "differenceMap", "gtNotes", "recHeatmap", "gtHeatmap", "allPitches", "resultMap", "result", "recH", "gtH", "gtValue", "recValue", "differenceMapErrorAreas", "missingBins", "additionalBins", "correctBins", "diffMap", "maxLength", "totalArea", "pingMidiDevice", "deviceName", "howOften", "sentCount", "sentTime", "totalTime", "receiveFunction", "ping", "avg", "midiAccess", "input", "outputDevice", "output", "pingFunction", "matchGtAndRecordingNotes", "recNotes", "gtNotes", "groupedByPitch", "group", "d", "groupedByPitchRec", "result", "pitch", "gtRecMap", "additionalNotes", "missingNotes", "n", "r", "nearest", "findNearest", "currentEntry", "matchGtAndMultipleRecordings", "recordings", "allRecNotes", "getMultiMatchingErrorPerNote", "multiMatching", "errorThreshold", "gtErrorMap", "maxError", "gtStart", "matchedRecNotes", "error", "note", "error_", "getMatchingError", "matching", "addPenalty", "missPenalty", "timingPenalty", "timeThreshold", "m", "addError", "missError", "correct", "timeError", "matchedRecNote", "total", "getMatchingSection", "start", "end", "newGtRecMap", "getMatchingSliceError", "section", "alignNoteArrays", "gt", "rec", "f", "alignmentForce", "alignNoteArrays2", "timeDifference", "tries", "matching", "matchGtAndRecordingNotes", "timeDiff", "count", "m", "gtRecMap", "gtStart", "matchedRecNote", "alignNoteArrays3", "timeDiffs", "shift", "median_default", "a", "b", "difference", "noteA", "distance", "diff", "noteB", "dist", "testAlignment", "test", "title", "n", "aligned", "NoteArray_default", "Note_default", "alignmentBenchmark", "seed", "rand127", "int_default", "lcg", "maxTime", "randTime", "uniform_default", "randDuration", "randomNotes", "start", "notes", "shifted", "deviation", "pAdd", "pRemove", "variation", "generateDrumVariation", "funcs", "error", "DiffAlignment_exports", "__export", "activationMap", "agreement", "alignGtAndRecToMinimizeDiffError", "alignRecordingSectionsToBestFit", "alignRecordingToBestFit", "alignRecordingToBestFit", "gtNotes", "recording", "binSize", "recNotes", "bestFit", "alignGtAndRecToMinimizeDiffError", "alignRecordingSectionsToBestFit", "gapDuration", "gapMode", "alignedSections", "Recording_default", "section", "newRec", "NoteArray_default", "gtDuration", "recDuration", "nBins", "nRecBins", "gtActivation", "activationMap", "recActivation", "agreementsPerOffset", "offset", "currentAgreement", "agreement", "a", "b", "allNotes", "pitch", "notes", "group", "d", "maxTime", "max", "pitchActivationMap", "note", "start", "end", "bin", "gtActivations", "recActivations", "allPitches", "gtA", "recA", "index", "gtValue", "recValue", "PriorityMatching_exports", "__export", "balancedNoteDistance", "errorFromPriorityMatching", "getMatrixMinPosition", "priorityMatching", "priorityMatching", "itemsA", "itemsB", "distanceFunction", "matrix", "indexA", "gtNote", "indexB", "dist", "matching", "numberOfMatches", "match", "a", "b", "getMatrixMinPosition", "index", "errorFromPriorityMatching", "gtNotes", "recNotes", "errors", "gt", "rec", "recNote", "error", "balancedNoteDistance", "minPerRow", "row", "minInd", "minIndex", "minRowIndex", "d", "minColIndex", "Similarity_exports", "__export", "discretizeTime", "getSimilarParts", "getTrackSimilarity", "getSimilarParts", "track", "selectedInterval", "stride", "threshold", "secondsPerBin", "distance", "minTime", "min", "maxTime", "max", "binCount", "discrTrack", "discretizeTime", "startBin", "endBin", "selection", "sliceDiscretizedTrack", "selectionSize", "similarParts", "pos", "pos2", "part", "dist", "getTrackSimilarity", "discrA", "discrB", "common", "key", "totalDist", "pitch", "binsA", "binsB", "euclideanDistanceSquared", "neirestNeighborDistance", "penaltyWeight", "discr", "countActiveNoteBins", "d", "result", "note", "binArray", "bin", "count", "trackMap", "slice", "value", "A", "B", "maxBins", "sum", "index", "a", "b", "diff", "maxOffset", "offset", "SimilarSections_exports", "__export", "findSimilarNoteSections", "findSimilarStringSections", "Levenshtein_exports", "__export", "damerauLevenshtein", "levenshtein", "a", "b", "normalize", "i", "j", "previous", "value", "temporary", "row", "result", "d", "cost", "findSimilarNoteSections", "notes", "startTime", "endTime", "threshold", "selectedNotes", "d", "dataString", "PitchSequence_default", "searchString", "length", "findSimilarStringSections", "m", "index", "note1", "note2", "matches", "slice", "distance", "levenshtein", "filtered", "a", "b", "occupied", "occ", "i", "stringBased_exports", "__export", "Gotoh_exports", "ImmediateRepetitionCompression_exports", "Levenshtein_exports", "LongestCommonSubsequence_exports", "NGrams_exports", "NeedlemanWunsch_default", "SuffixTree_exports", "LongestCommonSubsequence_exports", "__export", "lcs", "lcsLength", "normalizedLcsLength", "a", "b", "m", "n", "i", "j", "row", "left", "diagonal", "latch", "c", "longerLength", "Gotoh_exports", "__export", "differenceSimilarity", "gotoh", "matchMissmatchSimilarity", "normalizedGotoh", "seqA", "seqB", "similarityFunction", "gapPenaltyStart", "gapPenaltyExtend", "gap", "index", "lengthA", "lengthB", "a", "b", "i", "j", "sim", "similarity", "longer", "maxSimilarity", "SuffixTree_exports", "__export", "SuffixTree_default", "SuffixTree", "array", "TreeNode", "index", "suf", "node", "arrayShallowEquals", "leaf", "temporary", "indent", "ind", "string", "SuffixTree_default", "NGrams_exports", "__export", "getNGrams", "getNGramsForArray", "string", "length", "nGrams", "index", "subString", "array", "subArray", "key", "count", "ImmediateRepetitionCompression_exports", "__export", "compress", "compressionRate", "decompress", "getImmediateRepetitions", "summary", "toString", "compress", "sequence", "longestReps", "getImmediateRepetitions", "seq", "rep", "len", "pos", "preSeq", "postSeq", "repetition", "pre", "post", "depth", "length", "foundReps", "numberOfReps", "startPos", "arraySlicesEqual", "a", "b", "decompress", "tree", "summary", "toString", "separator", "compressionRate", "compressed", "_a", "NeedlemanWunsch", "seq1", "seq2", "matchScore", "mismatchPenalty", "gapPenalty", "i", "j", "insert", "del", "simScore", "match", "intermediateScores", "score", "tracebackTypeStatus", "entry", "lastRow", "pos", "children", "finalAlignments", "root", "current", "child", "length", "alignment", "t", "NeedlemanWunsch_default", "getVersion", "package_default"]
}
